
GPS_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  08009668  08009668  00019668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009a80  08009a80  00019a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009a88  08009a88  00019a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000674  20000000  08009a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003d4  20000674  0800a104  00020674  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a48  0800a104  00020a48  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000cfdf  00000000  00000000  0002069c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001efc  00000000  00000000  0002d67b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ba0  00000000  00000000  0002f578  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a98  00000000  00000000  00030118  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000054ed  00000000  00000000  00030bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003a9a  00000000  00000000  0003609d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00039b37  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003638  00000000  00000000  00039bb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000674 	.word	0x20000674
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800964c 	.word	0x0800964c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000678 	.word	0x20000678
 8000104:	0800964c 	.word	0x0800964c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fdd3 	bl	8001fd4 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fd2d 	bl	8001e98 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fdc5 	bl	8001fd4 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fdbb 	bl	8001fd4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd4d 	bl	8001f0c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd43 	bl	8001f0c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fc71 	bl	8000d84 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fc03 	bl	8000cb8 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fc63 	bl	8000d84 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc59 	bl	8000d84 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc0f 	bl	8000d04 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc05 	bl	8000d04 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_uldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d10f      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 8000510:	2900      	cmp	r1, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_uldivmod+0xe>
 8000514:	2800      	cmp	r0, #0
 8000516:	d002      	beq.n	800051e <__aeabi_uldivmod+0x16>
 8000518:	2100      	movs	r1, #0
 800051a:	43c9      	mvns	r1, r1
 800051c:	1c08      	adds	r0, r1, #0
 800051e:	b407      	push	{r0, r1, r2}
 8000520:	4802      	ldr	r0, [pc, #8]	; (800052c <__aeabi_uldivmod+0x24>)
 8000522:	a102      	add	r1, pc, #8	; (adr r1, 800052c <__aeabi_uldivmod+0x24>)
 8000524:	1840      	adds	r0, r0, r1
 8000526:	9002      	str	r0, [sp, #8]
 8000528:	bd03      	pop	{r0, r1, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	fffffee9 	.word	0xfffffee9
 8000530:	b403      	push	{r0, r1}
 8000532:	4668      	mov	r0, sp
 8000534:	b501      	push	{r0, lr}
 8000536:	9802      	ldr	r0, [sp, #8]
 8000538:	f000 f824 	bl	8000584 <__udivmoddi4>
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	469e      	mov	lr, r3
 8000540:	b002      	add	sp, #8
 8000542:	bc0c      	pop	{r2, r3}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			; (mov r8, r8)

08000548 <__aeabi_d2uiz>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2200      	movs	r2, #0
 800054c:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <__aeabi_d2uiz+0x38>)
 800054e:	0004      	movs	r4, r0
 8000550:	000d      	movs	r5, r1
 8000552:	f7ff ff95 	bl	8000480 <__aeabi_dcmpge>
 8000556:	2800      	cmp	r0, #0
 8000558:	d104      	bne.n	8000564 <__aeabi_d2uiz+0x1c>
 800055a:	0020      	movs	r0, r4
 800055c:	0029      	movs	r1, r5
 800055e:	f002 fb51 	bl	8002c04 <__aeabi_d2iz>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <__aeabi_d2uiz+0x38>)
 8000566:	2200      	movs	r2, #0
 8000568:	0020      	movs	r0, r4
 800056a:	0029      	movs	r1, r5
 800056c:	f002 f814 	bl	8002598 <__aeabi_dsub>
 8000570:	f002 fb48 	bl	8002c04 <__aeabi_d2iz>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	061b      	lsls	r3, r3, #24
 8000578:	469c      	mov	ip, r3
 800057a:	4460      	add	r0, ip
 800057c:	e7f1      	b.n	8000562 <__aeabi_d2uiz+0x1a>
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	41e00000 	.word	0x41e00000

08000584 <__udivmoddi4>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	4657      	mov	r7, sl
 8000588:	464e      	mov	r6, r9
 800058a:	4645      	mov	r5, r8
 800058c:	46de      	mov	lr, fp
 800058e:	b5e0      	push	{r5, r6, r7, lr}
 8000590:	0004      	movs	r4, r0
 8000592:	b083      	sub	sp, #12
 8000594:	000d      	movs	r5, r1
 8000596:	4692      	mov	sl, r2
 8000598:	4699      	mov	r9, r3
 800059a:	428b      	cmp	r3, r1
 800059c:	d82f      	bhi.n	80005fe <__udivmoddi4+0x7a>
 800059e:	d02c      	beq.n	80005fa <__udivmoddi4+0x76>
 80005a0:	4649      	mov	r1, r9
 80005a2:	4650      	mov	r0, sl
 80005a4:	f002 fc84 	bl	8002eb0 <__clzdi2>
 80005a8:	0029      	movs	r1, r5
 80005aa:	0006      	movs	r6, r0
 80005ac:	0020      	movs	r0, r4
 80005ae:	f002 fc7f 	bl	8002eb0 <__clzdi2>
 80005b2:	1a33      	subs	r3, r6, r0
 80005b4:	4698      	mov	r8, r3
 80005b6:	3b20      	subs	r3, #32
 80005b8:	469b      	mov	fp, r3
 80005ba:	d500      	bpl.n	80005be <__udivmoddi4+0x3a>
 80005bc:	e074      	b.n	80006a8 <__udivmoddi4+0x124>
 80005be:	4653      	mov	r3, sl
 80005c0:	465a      	mov	r2, fp
 80005c2:	4093      	lsls	r3, r2
 80005c4:	001f      	movs	r7, r3
 80005c6:	4653      	mov	r3, sl
 80005c8:	4642      	mov	r2, r8
 80005ca:	4093      	lsls	r3, r2
 80005cc:	001e      	movs	r6, r3
 80005ce:	42af      	cmp	r7, r5
 80005d0:	d829      	bhi.n	8000626 <__udivmoddi4+0xa2>
 80005d2:	d026      	beq.n	8000622 <__udivmoddi4+0x9e>
 80005d4:	465b      	mov	r3, fp
 80005d6:	1ba4      	subs	r4, r4, r6
 80005d8:	41bd      	sbcs	r5, r7
 80005da:	2b00      	cmp	r3, #0
 80005dc:	da00      	bge.n	80005e0 <__udivmoddi4+0x5c>
 80005de:	e079      	b.n	80006d4 <__udivmoddi4+0x150>
 80005e0:	2200      	movs	r2, #0
 80005e2:	2300      	movs	r3, #0
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	465a      	mov	r2, fp
 80005ec:	4093      	lsls	r3, r2
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2301      	movs	r3, #1
 80005f2:	4642      	mov	r2, r8
 80005f4:	4093      	lsls	r3, r2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	e019      	b.n	800062e <__udivmoddi4+0xaa>
 80005fa:	4282      	cmp	r2, r0
 80005fc:	d9d0      	bls.n	80005a0 <__udivmoddi4+0x1c>
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <__udivmoddi4+0x8c>
 800060c:	601c      	str	r4, [r3, #0]
 800060e:	605d      	str	r5, [r3, #4]
 8000610:	9800      	ldr	r0, [sp, #0]
 8000612:	9901      	ldr	r1, [sp, #4]
 8000614:	b003      	add	sp, #12
 8000616:	bc3c      	pop	{r2, r3, r4, r5}
 8000618:	4690      	mov	r8, r2
 800061a:	4699      	mov	r9, r3
 800061c:	46a2      	mov	sl, r4
 800061e:	46ab      	mov	fp, r5
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	42a3      	cmp	r3, r4
 8000624:	d9d6      	bls.n	80005d4 <__udivmoddi4+0x50>
 8000626:	2200      	movs	r2, #0
 8000628:	2300      	movs	r3, #0
 800062a:	9200      	str	r2, [sp, #0]
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0e8      	beq.n	8000606 <__udivmoddi4+0x82>
 8000634:	07fb      	lsls	r3, r7, #31
 8000636:	0872      	lsrs	r2, r6, #1
 8000638:	431a      	orrs	r2, r3
 800063a:	4646      	mov	r6, r8
 800063c:	087b      	lsrs	r3, r7, #1
 800063e:	e00e      	b.n	800065e <__udivmoddi4+0xda>
 8000640:	42ab      	cmp	r3, r5
 8000642:	d101      	bne.n	8000648 <__udivmoddi4+0xc4>
 8000644:	42a2      	cmp	r2, r4
 8000646:	d80c      	bhi.n	8000662 <__udivmoddi4+0xde>
 8000648:	1aa4      	subs	r4, r4, r2
 800064a:	419d      	sbcs	r5, r3
 800064c:	2001      	movs	r0, #1
 800064e:	1924      	adds	r4, r4, r4
 8000650:	416d      	adcs	r5, r5
 8000652:	2100      	movs	r1, #0
 8000654:	3e01      	subs	r6, #1
 8000656:	1824      	adds	r4, r4, r0
 8000658:	414d      	adcs	r5, r1
 800065a:	2e00      	cmp	r6, #0
 800065c:	d006      	beq.n	800066c <__udivmoddi4+0xe8>
 800065e:	42ab      	cmp	r3, r5
 8000660:	d9ee      	bls.n	8000640 <__udivmoddi4+0xbc>
 8000662:	3e01      	subs	r6, #1
 8000664:	1924      	adds	r4, r4, r4
 8000666:	416d      	adcs	r5, r5
 8000668:	2e00      	cmp	r6, #0
 800066a:	d1f8      	bne.n	800065e <__udivmoddi4+0xda>
 800066c:	465b      	mov	r3, fp
 800066e:	9800      	ldr	r0, [sp, #0]
 8000670:	9901      	ldr	r1, [sp, #4]
 8000672:	1900      	adds	r0, r0, r4
 8000674:	4169      	adcs	r1, r5
 8000676:	2b00      	cmp	r3, #0
 8000678:	db22      	blt.n	80006c0 <__udivmoddi4+0x13c>
 800067a:	002b      	movs	r3, r5
 800067c:	465a      	mov	r2, fp
 800067e:	40d3      	lsrs	r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	4644      	mov	r4, r8
 8000684:	40e2      	lsrs	r2, r4
 8000686:	001c      	movs	r4, r3
 8000688:	465b      	mov	r3, fp
 800068a:	0015      	movs	r5, r2
 800068c:	2b00      	cmp	r3, #0
 800068e:	db2c      	blt.n	80006ea <__udivmoddi4+0x166>
 8000690:	0026      	movs	r6, r4
 8000692:	409e      	lsls	r6, r3
 8000694:	0033      	movs	r3, r6
 8000696:	0026      	movs	r6, r4
 8000698:	4647      	mov	r7, r8
 800069a:	40be      	lsls	r6, r7
 800069c:	0032      	movs	r2, r6
 800069e:	1a80      	subs	r0, r0, r2
 80006a0:	4199      	sbcs	r1, r3
 80006a2:	9000      	str	r0, [sp, #0]
 80006a4:	9101      	str	r1, [sp, #4]
 80006a6:	e7ae      	b.n	8000606 <__udivmoddi4+0x82>
 80006a8:	4642      	mov	r2, r8
 80006aa:	2320      	movs	r3, #32
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	4652      	mov	r2, sl
 80006b0:	40da      	lsrs	r2, r3
 80006b2:	4641      	mov	r1, r8
 80006b4:	0013      	movs	r3, r2
 80006b6:	464a      	mov	r2, r9
 80006b8:	408a      	lsls	r2, r1
 80006ba:	0017      	movs	r7, r2
 80006bc:	431f      	orrs	r7, r3
 80006be:	e782      	b.n	80005c6 <__udivmoddi4+0x42>
 80006c0:	4642      	mov	r2, r8
 80006c2:	2320      	movs	r3, #32
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	002a      	movs	r2, r5
 80006c8:	4646      	mov	r6, r8
 80006ca:	409a      	lsls	r2, r3
 80006cc:	0023      	movs	r3, r4
 80006ce:	40f3      	lsrs	r3, r6
 80006d0:	4313      	orrs	r3, r2
 80006d2:	e7d5      	b.n	8000680 <__udivmoddi4+0xfc>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	2200      	movs	r2, #0
 80006de:	9100      	str	r1, [sp, #0]
 80006e0:	9201      	str	r2, [sp, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	40da      	lsrs	r2, r3
 80006e6:	9201      	str	r2, [sp, #4]
 80006e8:	e782      	b.n	80005f0 <__udivmoddi4+0x6c>
 80006ea:	4642      	mov	r2, r8
 80006ec:	2320      	movs	r3, #32
 80006ee:	0026      	movs	r6, r4
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	40de      	lsrs	r6, r3
 80006f4:	002f      	movs	r7, r5
 80006f6:	46b4      	mov	ip, r6
 80006f8:	4097      	lsls	r7, r2
 80006fa:	4666      	mov	r6, ip
 80006fc:	003b      	movs	r3, r7
 80006fe:	4333      	orrs	r3, r6
 8000700:	e7c9      	b.n	8000696 <__udivmoddi4+0x112>
 8000702:	46c0      	nop			; (mov r8, r8)

08000704 <__aeabi_fadd>:
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	46c6      	mov	lr, r8
 8000708:	024e      	lsls	r6, r1, #9
 800070a:	0247      	lsls	r7, r0, #9
 800070c:	0a76      	lsrs	r6, r6, #9
 800070e:	0a7b      	lsrs	r3, r7, #9
 8000710:	0044      	lsls	r4, r0, #1
 8000712:	0fc5      	lsrs	r5, r0, #31
 8000714:	00f7      	lsls	r7, r6, #3
 8000716:	0048      	lsls	r0, r1, #1
 8000718:	4698      	mov	r8, r3
 800071a:	b500      	push	{lr}
 800071c:	0e24      	lsrs	r4, r4, #24
 800071e:	002a      	movs	r2, r5
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	0e00      	lsrs	r0, r0, #24
 8000724:	0fc9      	lsrs	r1, r1, #31
 8000726:	46bc      	mov	ip, r7
 8000728:	428d      	cmp	r5, r1
 800072a:	d067      	beq.n	80007fc <__aeabi_fadd+0xf8>
 800072c:	1a22      	subs	r2, r4, r0
 800072e:	2a00      	cmp	r2, #0
 8000730:	dc00      	bgt.n	8000734 <__aeabi_fadd+0x30>
 8000732:	e0a5      	b.n	8000880 <__aeabi_fadd+0x17c>
 8000734:	2800      	cmp	r0, #0
 8000736:	d13a      	bne.n	80007ae <__aeabi_fadd+0xaa>
 8000738:	2f00      	cmp	r7, #0
 800073a:	d100      	bne.n	800073e <__aeabi_fadd+0x3a>
 800073c:	e093      	b.n	8000866 <__aeabi_fadd+0x162>
 800073e:	1e51      	subs	r1, r2, #1
 8000740:	2900      	cmp	r1, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_fadd+0x42>
 8000744:	e0bc      	b.n	80008c0 <__aeabi_fadd+0x1bc>
 8000746:	2401      	movs	r4, #1
 8000748:	1bdb      	subs	r3, r3, r7
 800074a:	015a      	lsls	r2, r3, #5
 800074c:	d546      	bpl.n	80007dc <__aeabi_fadd+0xd8>
 800074e:	019b      	lsls	r3, r3, #6
 8000750:	099e      	lsrs	r6, r3, #6
 8000752:	0030      	movs	r0, r6
 8000754:	f002 fb8e 	bl	8002e74 <__clzsi2>
 8000758:	3805      	subs	r0, #5
 800075a:	4086      	lsls	r6, r0
 800075c:	4284      	cmp	r4, r0
 800075e:	dd00      	ble.n	8000762 <__aeabi_fadd+0x5e>
 8000760:	e09d      	b.n	800089e <__aeabi_fadd+0x19a>
 8000762:	1b04      	subs	r4, r0, r4
 8000764:	0032      	movs	r2, r6
 8000766:	2020      	movs	r0, #32
 8000768:	3401      	adds	r4, #1
 800076a:	40e2      	lsrs	r2, r4
 800076c:	1b04      	subs	r4, r0, r4
 800076e:	40a6      	lsls	r6, r4
 8000770:	0033      	movs	r3, r6
 8000772:	1e5e      	subs	r6, r3, #1
 8000774:	41b3      	sbcs	r3, r6
 8000776:	2400      	movs	r4, #0
 8000778:	4313      	orrs	r3, r2
 800077a:	075a      	lsls	r2, r3, #29
 800077c:	d004      	beq.n	8000788 <__aeabi_fadd+0x84>
 800077e:	220f      	movs	r2, #15
 8000780:	401a      	ands	r2, r3
 8000782:	2a04      	cmp	r2, #4
 8000784:	d000      	beq.n	8000788 <__aeabi_fadd+0x84>
 8000786:	3304      	adds	r3, #4
 8000788:	015a      	lsls	r2, r3, #5
 800078a:	d529      	bpl.n	80007e0 <__aeabi_fadd+0xdc>
 800078c:	3401      	adds	r4, #1
 800078e:	2cff      	cmp	r4, #255	; 0xff
 8000790:	d100      	bne.n	8000794 <__aeabi_fadd+0x90>
 8000792:	e081      	b.n	8000898 <__aeabi_fadd+0x194>
 8000794:	002a      	movs	r2, r5
 8000796:	019b      	lsls	r3, r3, #6
 8000798:	0a5b      	lsrs	r3, r3, #9
 800079a:	b2e4      	uxtb	r4, r4
 800079c:	025b      	lsls	r3, r3, #9
 800079e:	05e4      	lsls	r4, r4, #23
 80007a0:	0a58      	lsrs	r0, r3, #9
 80007a2:	07d2      	lsls	r2, r2, #31
 80007a4:	4320      	orrs	r0, r4
 80007a6:	4310      	orrs	r0, r2
 80007a8:	bc04      	pop	{r2}
 80007aa:	4690      	mov	r8, r2
 80007ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ae:	2cff      	cmp	r4, #255	; 0xff
 80007b0:	d0e3      	beq.n	800077a <__aeabi_fadd+0x76>
 80007b2:	2180      	movs	r1, #128	; 0x80
 80007b4:	0038      	movs	r0, r7
 80007b6:	04c9      	lsls	r1, r1, #19
 80007b8:	4308      	orrs	r0, r1
 80007ba:	4684      	mov	ip, r0
 80007bc:	2a1b      	cmp	r2, #27
 80007be:	dd00      	ble.n	80007c2 <__aeabi_fadd+0xbe>
 80007c0:	e082      	b.n	80008c8 <__aeabi_fadd+0x1c4>
 80007c2:	2020      	movs	r0, #32
 80007c4:	4661      	mov	r1, ip
 80007c6:	40d1      	lsrs	r1, r2
 80007c8:	1a82      	subs	r2, r0, r2
 80007ca:	4660      	mov	r0, ip
 80007cc:	4090      	lsls	r0, r2
 80007ce:	0002      	movs	r2, r0
 80007d0:	1e50      	subs	r0, r2, #1
 80007d2:	4182      	sbcs	r2, r0
 80007d4:	430a      	orrs	r2, r1
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	015a      	lsls	r2, r3, #5
 80007da:	d4b8      	bmi.n	800074e <__aeabi_fadd+0x4a>
 80007dc:	075a      	lsls	r2, r3, #29
 80007de:	d1ce      	bne.n	800077e <__aeabi_fadd+0x7a>
 80007e0:	08de      	lsrs	r6, r3, #3
 80007e2:	002a      	movs	r2, r5
 80007e4:	2cff      	cmp	r4, #255	; 0xff
 80007e6:	d13a      	bne.n	800085e <__aeabi_fadd+0x15a>
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fadd+0xea>
 80007ec:	e0ae      	b.n	800094c <__aeabi_fadd+0x248>
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	03db      	lsls	r3, r3, #15
 80007f2:	4333      	orrs	r3, r6
 80007f4:	025b      	lsls	r3, r3, #9
 80007f6:	0a5b      	lsrs	r3, r3, #9
 80007f8:	24ff      	movs	r4, #255	; 0xff
 80007fa:	e7cf      	b.n	800079c <__aeabi_fadd+0x98>
 80007fc:	1a21      	subs	r1, r4, r0
 80007fe:	2900      	cmp	r1, #0
 8000800:	dd52      	ble.n	80008a8 <__aeabi_fadd+0x1a4>
 8000802:	2800      	cmp	r0, #0
 8000804:	d031      	beq.n	800086a <__aeabi_fadd+0x166>
 8000806:	2cff      	cmp	r4, #255	; 0xff
 8000808:	d0b7      	beq.n	800077a <__aeabi_fadd+0x76>
 800080a:	2080      	movs	r0, #128	; 0x80
 800080c:	003e      	movs	r6, r7
 800080e:	04c0      	lsls	r0, r0, #19
 8000810:	4306      	orrs	r6, r0
 8000812:	46b4      	mov	ip, r6
 8000814:	291b      	cmp	r1, #27
 8000816:	dd00      	ble.n	800081a <__aeabi_fadd+0x116>
 8000818:	e0aa      	b.n	8000970 <__aeabi_fadd+0x26c>
 800081a:	2620      	movs	r6, #32
 800081c:	4660      	mov	r0, ip
 800081e:	40c8      	lsrs	r0, r1
 8000820:	1a71      	subs	r1, r6, r1
 8000822:	4666      	mov	r6, ip
 8000824:	408e      	lsls	r6, r1
 8000826:	0031      	movs	r1, r6
 8000828:	1e4e      	subs	r6, r1, #1
 800082a:	41b1      	sbcs	r1, r6
 800082c:	4301      	orrs	r1, r0
 800082e:	185b      	adds	r3, r3, r1
 8000830:	0159      	lsls	r1, r3, #5
 8000832:	d5d3      	bpl.n	80007dc <__aeabi_fadd+0xd8>
 8000834:	3401      	adds	r4, #1
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x138>
 800083a:	e087      	b.n	800094c <__aeabi_fadd+0x248>
 800083c:	2201      	movs	r2, #1
 800083e:	4978      	ldr	r1, [pc, #480]	; (8000a20 <__aeabi_fadd+0x31c>)
 8000840:	401a      	ands	r2, r3
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	400b      	ands	r3, r1
 8000846:	4313      	orrs	r3, r2
 8000848:	e797      	b.n	800077a <__aeabi_fadd+0x76>
 800084a:	2c00      	cmp	r4, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fadd+0x14c>
 800084e:	e0a7      	b.n	80009a0 <__aeabi_fadd+0x29c>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x152>
 8000854:	e0b6      	b.n	80009c4 <__aeabi_fadd+0x2c0>
 8000856:	1e3b      	subs	r3, r7, #0
 8000858:	d162      	bne.n	8000920 <__aeabi_fadd+0x21c>
 800085a:	2600      	movs	r6, #0
 800085c:	2200      	movs	r2, #0
 800085e:	0273      	lsls	r3, r6, #9
 8000860:	0a5b      	lsrs	r3, r3, #9
 8000862:	b2e4      	uxtb	r4, r4
 8000864:	e79a      	b.n	800079c <__aeabi_fadd+0x98>
 8000866:	0014      	movs	r4, r2
 8000868:	e787      	b.n	800077a <__aeabi_fadd+0x76>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d04d      	beq.n	800090a <__aeabi_fadd+0x206>
 800086e:	1e48      	subs	r0, r1, #1
 8000870:	2800      	cmp	r0, #0
 8000872:	d157      	bne.n	8000924 <__aeabi_fadd+0x220>
 8000874:	4463      	add	r3, ip
 8000876:	2401      	movs	r4, #1
 8000878:	015a      	lsls	r2, r3, #5
 800087a:	d5af      	bpl.n	80007dc <__aeabi_fadd+0xd8>
 800087c:	2402      	movs	r4, #2
 800087e:	e7dd      	b.n	800083c <__aeabi_fadd+0x138>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d124      	bne.n	80008ce <__aeabi_fadd+0x1ca>
 8000884:	1c62      	adds	r2, r4, #1
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	2a01      	cmp	r2, #1
 800088a:	ddde      	ble.n	800084a <__aeabi_fadd+0x146>
 800088c:	1bde      	subs	r6, r3, r7
 800088e:	0172      	lsls	r2, r6, #5
 8000890:	d535      	bpl.n	80008fe <__aeabi_fadd+0x1fa>
 8000892:	1afe      	subs	r6, r7, r3
 8000894:	000d      	movs	r5, r1
 8000896:	e75c      	b.n	8000752 <__aeabi_fadd+0x4e>
 8000898:	002a      	movs	r2, r5
 800089a:	2300      	movs	r3, #0
 800089c:	e77e      	b.n	800079c <__aeabi_fadd+0x98>
 800089e:	0033      	movs	r3, r6
 80008a0:	4a60      	ldr	r2, [pc, #384]	; (8000a24 <__aeabi_fadd+0x320>)
 80008a2:	1a24      	subs	r4, r4, r0
 80008a4:	4013      	ands	r3, r2
 80008a6:	e768      	b.n	800077a <__aeabi_fadd+0x76>
 80008a8:	2900      	cmp	r1, #0
 80008aa:	d163      	bne.n	8000974 <__aeabi_fadd+0x270>
 80008ac:	1c61      	adds	r1, r4, #1
 80008ae:	b2c8      	uxtb	r0, r1
 80008b0:	2801      	cmp	r0, #1
 80008b2:	dd4e      	ble.n	8000952 <__aeabi_fadd+0x24e>
 80008b4:	29ff      	cmp	r1, #255	; 0xff
 80008b6:	d049      	beq.n	800094c <__aeabi_fadd+0x248>
 80008b8:	4463      	add	r3, ip
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	000c      	movs	r4, r1
 80008be:	e75c      	b.n	800077a <__aeabi_fadd+0x76>
 80008c0:	2aff      	cmp	r2, #255	; 0xff
 80008c2:	d041      	beq.n	8000948 <__aeabi_fadd+0x244>
 80008c4:	000a      	movs	r2, r1
 80008c6:	e779      	b.n	80007bc <__aeabi_fadd+0xb8>
 80008c8:	2201      	movs	r2, #1
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	e784      	b.n	80007d8 <__aeabi_fadd+0xd4>
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d01d      	beq.n	800090e <__aeabi_fadd+0x20a>
 80008d2:	28ff      	cmp	r0, #255	; 0xff
 80008d4:	d022      	beq.n	800091c <__aeabi_fadd+0x218>
 80008d6:	2480      	movs	r4, #128	; 0x80
 80008d8:	04e4      	lsls	r4, r4, #19
 80008da:	4252      	negs	r2, r2
 80008dc:	4323      	orrs	r3, r4
 80008de:	2a1b      	cmp	r2, #27
 80008e0:	dd00      	ble.n	80008e4 <__aeabi_fadd+0x1e0>
 80008e2:	e08a      	b.n	80009fa <__aeabi_fadd+0x2f6>
 80008e4:	001c      	movs	r4, r3
 80008e6:	2520      	movs	r5, #32
 80008e8:	40d4      	lsrs	r4, r2
 80008ea:	1aaa      	subs	r2, r5, r2
 80008ec:	4093      	lsls	r3, r2
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	4193      	sbcs	r3, r2
 80008f2:	4323      	orrs	r3, r4
 80008f4:	4662      	mov	r2, ip
 80008f6:	0004      	movs	r4, r0
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	000d      	movs	r5, r1
 80008fc:	e725      	b.n	800074a <__aeabi_fadd+0x46>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x200>
 8000902:	e726      	b.n	8000752 <__aeabi_fadd+0x4e>
 8000904:	2200      	movs	r2, #0
 8000906:	2400      	movs	r4, #0
 8000908:	e7a9      	b.n	800085e <__aeabi_fadd+0x15a>
 800090a:	000c      	movs	r4, r1
 800090c:	e735      	b.n	800077a <__aeabi_fadd+0x76>
 800090e:	2b00      	cmp	r3, #0
 8000910:	d04d      	beq.n	80009ae <__aeabi_fadd+0x2aa>
 8000912:	43d2      	mvns	r2, r2
 8000914:	2a00      	cmp	r2, #0
 8000916:	d0ed      	beq.n	80008f4 <__aeabi_fadd+0x1f0>
 8000918:	28ff      	cmp	r0, #255	; 0xff
 800091a:	d1e0      	bne.n	80008de <__aeabi_fadd+0x1da>
 800091c:	4663      	mov	r3, ip
 800091e:	24ff      	movs	r4, #255	; 0xff
 8000920:	000d      	movs	r5, r1
 8000922:	e72a      	b.n	800077a <__aeabi_fadd+0x76>
 8000924:	29ff      	cmp	r1, #255	; 0xff
 8000926:	d00f      	beq.n	8000948 <__aeabi_fadd+0x244>
 8000928:	0001      	movs	r1, r0
 800092a:	e773      	b.n	8000814 <__aeabi_fadd+0x110>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d061      	beq.n	80009f4 <__aeabi_fadd+0x2f0>
 8000930:	24ff      	movs	r4, #255	; 0xff
 8000932:	2f00      	cmp	r7, #0
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x234>
 8000936:	e720      	b.n	800077a <__aeabi_fadd+0x76>
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	4641      	mov	r1, r8
 800093c:	03d2      	lsls	r2, r2, #15
 800093e:	4211      	tst	r1, r2
 8000940:	d002      	beq.n	8000948 <__aeabi_fadd+0x244>
 8000942:	4216      	tst	r6, r2
 8000944:	d100      	bne.n	8000948 <__aeabi_fadd+0x244>
 8000946:	003b      	movs	r3, r7
 8000948:	24ff      	movs	r4, #255	; 0xff
 800094a:	e716      	b.n	800077a <__aeabi_fadd+0x76>
 800094c:	24ff      	movs	r4, #255	; 0xff
 800094e:	2300      	movs	r3, #0
 8000950:	e724      	b.n	800079c <__aeabi_fadd+0x98>
 8000952:	2c00      	cmp	r4, #0
 8000954:	d1ea      	bne.n	800092c <__aeabi_fadd+0x228>
 8000956:	2b00      	cmp	r3, #0
 8000958:	d058      	beq.n	8000a0c <__aeabi_fadd+0x308>
 800095a:	2f00      	cmp	r7, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_fadd+0x25c>
 800095e:	e70c      	b.n	800077a <__aeabi_fadd+0x76>
 8000960:	4463      	add	r3, ip
 8000962:	015a      	lsls	r2, r3, #5
 8000964:	d400      	bmi.n	8000968 <__aeabi_fadd+0x264>
 8000966:	e739      	b.n	80007dc <__aeabi_fadd+0xd8>
 8000968:	4a2e      	ldr	r2, [pc, #184]	; (8000a24 <__aeabi_fadd+0x320>)
 800096a:	000c      	movs	r4, r1
 800096c:	4013      	ands	r3, r2
 800096e:	e704      	b.n	800077a <__aeabi_fadd+0x76>
 8000970:	2101      	movs	r1, #1
 8000972:	e75c      	b.n	800082e <__aeabi_fadd+0x12a>
 8000974:	2c00      	cmp	r4, #0
 8000976:	d11e      	bne.n	80009b6 <__aeabi_fadd+0x2b2>
 8000978:	2b00      	cmp	r3, #0
 800097a:	d040      	beq.n	80009fe <__aeabi_fadd+0x2fa>
 800097c:	43c9      	mvns	r1, r1
 800097e:	2900      	cmp	r1, #0
 8000980:	d00b      	beq.n	800099a <__aeabi_fadd+0x296>
 8000982:	28ff      	cmp	r0, #255	; 0xff
 8000984:	d036      	beq.n	80009f4 <__aeabi_fadd+0x2f0>
 8000986:	291b      	cmp	r1, #27
 8000988:	dc47      	bgt.n	8000a1a <__aeabi_fadd+0x316>
 800098a:	001c      	movs	r4, r3
 800098c:	2620      	movs	r6, #32
 800098e:	40cc      	lsrs	r4, r1
 8000990:	1a71      	subs	r1, r6, r1
 8000992:	408b      	lsls	r3, r1
 8000994:	1e59      	subs	r1, r3, #1
 8000996:	418b      	sbcs	r3, r1
 8000998:	4323      	orrs	r3, r4
 800099a:	4463      	add	r3, ip
 800099c:	0004      	movs	r4, r0
 800099e:	e747      	b.n	8000830 <__aeabi_fadd+0x12c>
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d118      	bne.n	80009d6 <__aeabi_fadd+0x2d2>
 80009a4:	1e3b      	subs	r3, r7, #0
 80009a6:	d02d      	beq.n	8000a04 <__aeabi_fadd+0x300>
 80009a8:	000d      	movs	r5, r1
 80009aa:	24ff      	movs	r4, #255	; 0xff
 80009ac:	e6e5      	b.n	800077a <__aeabi_fadd+0x76>
 80009ae:	003b      	movs	r3, r7
 80009b0:	0004      	movs	r4, r0
 80009b2:	000d      	movs	r5, r1
 80009b4:	e6e1      	b.n	800077a <__aeabi_fadd+0x76>
 80009b6:	28ff      	cmp	r0, #255	; 0xff
 80009b8:	d01c      	beq.n	80009f4 <__aeabi_fadd+0x2f0>
 80009ba:	2480      	movs	r4, #128	; 0x80
 80009bc:	04e4      	lsls	r4, r4, #19
 80009be:	4249      	negs	r1, r1
 80009c0:	4323      	orrs	r3, r4
 80009c2:	e7e0      	b.n	8000986 <__aeabi_fadd+0x282>
 80009c4:	2f00      	cmp	r7, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_fadd+0x2c6>
 80009c8:	e6d7      	b.n	800077a <__aeabi_fadd+0x76>
 80009ca:	1bde      	subs	r6, r3, r7
 80009cc:	0172      	lsls	r2, r6, #5
 80009ce:	d51f      	bpl.n	8000a10 <__aeabi_fadd+0x30c>
 80009d0:	1afb      	subs	r3, r7, r3
 80009d2:	000d      	movs	r5, r1
 80009d4:	e6d1      	b.n	800077a <__aeabi_fadd+0x76>
 80009d6:	24ff      	movs	r4, #255	; 0xff
 80009d8:	2f00      	cmp	r7, #0
 80009da:	d100      	bne.n	80009de <__aeabi_fadd+0x2da>
 80009dc:	e6cd      	b.n	800077a <__aeabi_fadd+0x76>
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	4640      	mov	r0, r8
 80009e2:	03d2      	lsls	r2, r2, #15
 80009e4:	4210      	tst	r0, r2
 80009e6:	d0af      	beq.n	8000948 <__aeabi_fadd+0x244>
 80009e8:	4216      	tst	r6, r2
 80009ea:	d1ad      	bne.n	8000948 <__aeabi_fadd+0x244>
 80009ec:	003b      	movs	r3, r7
 80009ee:	000d      	movs	r5, r1
 80009f0:	24ff      	movs	r4, #255	; 0xff
 80009f2:	e6c2      	b.n	800077a <__aeabi_fadd+0x76>
 80009f4:	4663      	mov	r3, ip
 80009f6:	24ff      	movs	r4, #255	; 0xff
 80009f8:	e6bf      	b.n	800077a <__aeabi_fadd+0x76>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e77a      	b.n	80008f4 <__aeabi_fadd+0x1f0>
 80009fe:	003b      	movs	r3, r7
 8000a00:	0004      	movs	r4, r0
 8000a02:	e6ba      	b.n	800077a <__aeabi_fadd+0x76>
 8000a04:	2680      	movs	r6, #128	; 0x80
 8000a06:	2200      	movs	r2, #0
 8000a08:	03f6      	lsls	r6, r6, #15
 8000a0a:	e6f0      	b.n	80007ee <__aeabi_fadd+0xea>
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	e6b4      	b.n	800077a <__aeabi_fadd+0x76>
 8000a10:	1e33      	subs	r3, r6, #0
 8000a12:	d000      	beq.n	8000a16 <__aeabi_fadd+0x312>
 8000a14:	e6e2      	b.n	80007dc <__aeabi_fadd+0xd8>
 8000a16:	2200      	movs	r2, #0
 8000a18:	e721      	b.n	800085e <__aeabi_fadd+0x15a>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e7bd      	b.n	800099a <__aeabi_fadd+0x296>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	7dffffff 	.word	0x7dffffff
 8000a24:	fbffffff 	.word	0xfbffffff

08000a28 <__aeabi_fdiv>:
 8000a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2a:	4657      	mov	r7, sl
 8000a2c:	464e      	mov	r6, r9
 8000a2e:	46de      	mov	lr, fp
 8000a30:	4645      	mov	r5, r8
 8000a32:	b5e0      	push	{r5, r6, r7, lr}
 8000a34:	0244      	lsls	r4, r0, #9
 8000a36:	0043      	lsls	r3, r0, #1
 8000a38:	0fc6      	lsrs	r6, r0, #31
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	1c0f      	adds	r7, r1, #0
 8000a3e:	0a64      	lsrs	r4, r4, #9
 8000a40:	0e1b      	lsrs	r3, r3, #24
 8000a42:	46b2      	mov	sl, r6
 8000a44:	d053      	beq.n	8000aee <__aeabi_fdiv+0xc6>
 8000a46:	2bff      	cmp	r3, #255	; 0xff
 8000a48:	d027      	beq.n	8000a9a <__aeabi_fdiv+0x72>
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	00e4      	lsls	r4, r4, #3
 8000a4e:	04d2      	lsls	r2, r2, #19
 8000a50:	4314      	orrs	r4, r2
 8000a52:	227f      	movs	r2, #127	; 0x7f
 8000a54:	4252      	negs	r2, r2
 8000a56:	4690      	mov	r8, r2
 8000a58:	4498      	add	r8, r3
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	4699      	mov	r9, r3
 8000a5e:	469b      	mov	fp, r3
 8000a60:	027d      	lsls	r5, r7, #9
 8000a62:	0078      	lsls	r0, r7, #1
 8000a64:	0ffb      	lsrs	r3, r7, #31
 8000a66:	0a6d      	lsrs	r5, r5, #9
 8000a68:	0e00      	lsrs	r0, r0, #24
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	d024      	beq.n	8000ab8 <__aeabi_fdiv+0x90>
 8000a6e:	28ff      	cmp	r0, #255	; 0xff
 8000a70:	d046      	beq.n	8000b00 <__aeabi_fdiv+0xd8>
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	2100      	movs	r1, #0
 8000a76:	00ed      	lsls	r5, r5, #3
 8000a78:	04db      	lsls	r3, r3, #19
 8000a7a:	431d      	orrs	r5, r3
 8000a7c:	387f      	subs	r0, #127	; 0x7f
 8000a7e:	4647      	mov	r7, r8
 8000a80:	1a38      	subs	r0, r7, r0
 8000a82:	464f      	mov	r7, r9
 8000a84:	430f      	orrs	r7, r1
 8000a86:	00bf      	lsls	r7, r7, #2
 8000a88:	46b9      	mov	r9, r7
 8000a8a:	0033      	movs	r3, r6
 8000a8c:	9a00      	ldr	r2, [sp, #0]
 8000a8e:	4f87      	ldr	r7, [pc, #540]	; (8000cac <__aeabi_fdiv+0x284>)
 8000a90:	4053      	eors	r3, r2
 8000a92:	464a      	mov	r2, r9
 8000a94:	58ba      	ldr	r2, [r7, r2]
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	4697      	mov	pc, r2
 8000a9a:	2c00      	cmp	r4, #0
 8000a9c:	d14e      	bne.n	8000b3c <__aeabi_fdiv+0x114>
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	4699      	mov	r9, r3
 8000aa2:	33f7      	adds	r3, #247	; 0xf7
 8000aa4:	4698      	mov	r8, r3
 8000aa6:	3bfd      	subs	r3, #253	; 0xfd
 8000aa8:	469b      	mov	fp, r3
 8000aaa:	027d      	lsls	r5, r7, #9
 8000aac:	0078      	lsls	r0, r7, #1
 8000aae:	0ffb      	lsrs	r3, r7, #31
 8000ab0:	0a6d      	lsrs	r5, r5, #9
 8000ab2:	0e00      	lsrs	r0, r0, #24
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	d1da      	bne.n	8000a6e <__aeabi_fdiv+0x46>
 8000ab8:	2d00      	cmp	r5, #0
 8000aba:	d126      	bne.n	8000b0a <__aeabi_fdiv+0xe2>
 8000abc:	2000      	movs	r0, #0
 8000abe:	2101      	movs	r1, #1
 8000ac0:	0033      	movs	r3, r6
 8000ac2:	9a00      	ldr	r2, [sp, #0]
 8000ac4:	4f7a      	ldr	r7, [pc, #488]	; (8000cb0 <__aeabi_fdiv+0x288>)
 8000ac6:	4053      	eors	r3, r2
 8000ac8:	4642      	mov	r2, r8
 8000aca:	1a10      	subs	r0, r2, r0
 8000acc:	464a      	mov	r2, r9
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	58ba      	ldr	r2, [r7, r2]
 8000ad4:	001d      	movs	r5, r3
 8000ad6:	4697      	mov	pc, r2
 8000ad8:	9b00      	ldr	r3, [sp, #0]
 8000ada:	002c      	movs	r4, r5
 8000adc:	469a      	mov	sl, r3
 8000ade:	468b      	mov	fp, r1
 8000ae0:	465b      	mov	r3, fp
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d131      	bne.n	8000b4a <__aeabi_fdiv+0x122>
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	21ff      	movs	r1, #255	; 0xff
 8000aea:	2400      	movs	r4, #0
 8000aec:	e038      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000aee:	2c00      	cmp	r4, #0
 8000af0:	d117      	bne.n	8000b22 <__aeabi_fdiv+0xfa>
 8000af2:	2304      	movs	r3, #4
 8000af4:	4699      	mov	r9, r3
 8000af6:	2300      	movs	r3, #0
 8000af8:	4698      	mov	r8, r3
 8000afa:	3301      	adds	r3, #1
 8000afc:	469b      	mov	fp, r3
 8000afe:	e7af      	b.n	8000a60 <__aeabi_fdiv+0x38>
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d10b      	bne.n	8000b1e <__aeabi_fdiv+0xf6>
 8000b06:	2102      	movs	r1, #2
 8000b08:	e7da      	b.n	8000ac0 <__aeabi_fdiv+0x98>
 8000b0a:	0028      	movs	r0, r5
 8000b0c:	f002 f9b2 	bl	8002e74 <__clzsi2>
 8000b10:	1f43      	subs	r3, r0, #5
 8000b12:	409d      	lsls	r5, r3
 8000b14:	2376      	movs	r3, #118	; 0x76
 8000b16:	425b      	negs	r3, r3
 8000b18:	1a18      	subs	r0, r3, r0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	e7af      	b.n	8000a7e <__aeabi_fdiv+0x56>
 8000b1e:	2103      	movs	r1, #3
 8000b20:	e7ad      	b.n	8000a7e <__aeabi_fdiv+0x56>
 8000b22:	0020      	movs	r0, r4
 8000b24:	f002 f9a6 	bl	8002e74 <__clzsi2>
 8000b28:	1f43      	subs	r3, r0, #5
 8000b2a:	409c      	lsls	r4, r3
 8000b2c:	2376      	movs	r3, #118	; 0x76
 8000b2e:	425b      	negs	r3, r3
 8000b30:	1a1b      	subs	r3, r3, r0
 8000b32:	4698      	mov	r8, r3
 8000b34:	2300      	movs	r3, #0
 8000b36:	4699      	mov	r9, r3
 8000b38:	469b      	mov	fp, r3
 8000b3a:	e791      	b.n	8000a60 <__aeabi_fdiv+0x38>
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	4699      	mov	r9, r3
 8000b40:	33f3      	adds	r3, #243	; 0xf3
 8000b42:	4698      	mov	r8, r3
 8000b44:	3bfc      	subs	r3, #252	; 0xfc
 8000b46:	469b      	mov	fp, r3
 8000b48:	e78a      	b.n	8000a60 <__aeabi_fdiv+0x38>
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_fdiv+0x128>
 8000b4e:	e0a5      	b.n	8000c9c <__aeabi_fdiv+0x274>
 8000b50:	4655      	mov	r5, sl
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fdiv+0x130>
 8000b56:	e081      	b.n	8000c5c <__aeabi_fdiv+0x234>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2400      	movs	r4, #0
 8000b5e:	402b      	ands	r3, r5
 8000b60:	0264      	lsls	r4, r4, #9
 8000b62:	05c9      	lsls	r1, r1, #23
 8000b64:	0a60      	lsrs	r0, r4, #9
 8000b66:	07db      	lsls	r3, r3, #31
 8000b68:	4308      	orrs	r0, r1
 8000b6a:	4318      	orrs	r0, r3
 8000b6c:	b003      	add	sp, #12
 8000b6e:	bc3c      	pop	{r2, r3, r4, r5}
 8000b70:	4690      	mov	r8, r2
 8000b72:	4699      	mov	r9, r3
 8000b74:	46a2      	mov	sl, r4
 8000b76:	46ab      	mov	fp, r5
 8000b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7a:	2480      	movs	r4, #128	; 0x80
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	03e4      	lsls	r4, r4, #15
 8000b80:	21ff      	movs	r1, #255	; 0xff
 8000b82:	e7ed      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000b84:	21ff      	movs	r1, #255	; 0xff
 8000b86:	2400      	movs	r4, #0
 8000b88:	e7ea      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	1a59      	subs	r1, r3, r1
 8000b8e:	291b      	cmp	r1, #27
 8000b90:	dd66      	ble.n	8000c60 <__aeabi_fdiv+0x238>
 8000b92:	9a01      	ldr	r2, [sp, #4]
 8000b94:	4013      	ands	r3, r2
 8000b96:	2100      	movs	r1, #0
 8000b98:	2400      	movs	r4, #0
 8000b9a:	e7e1      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	03db      	lsls	r3, r3, #15
 8000ba0:	421c      	tst	r4, r3
 8000ba2:	d038      	beq.n	8000c16 <__aeabi_fdiv+0x1ee>
 8000ba4:	421d      	tst	r5, r3
 8000ba6:	d051      	beq.n	8000c4c <__aeabi_fdiv+0x224>
 8000ba8:	431c      	orrs	r4, r3
 8000baa:	0264      	lsls	r4, r4, #9
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	0033      	movs	r3, r6
 8000bb0:	21ff      	movs	r1, #255	; 0xff
 8000bb2:	e7d5      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000bb4:	0163      	lsls	r3, r4, #5
 8000bb6:	016c      	lsls	r4, r5, #5
 8000bb8:	42a3      	cmp	r3, r4
 8000bba:	d23b      	bcs.n	8000c34 <__aeabi_fdiv+0x20c>
 8000bbc:	261b      	movs	r6, #27
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	3801      	subs	r0, #1
 8000bc2:	2501      	movs	r5, #1
 8000bc4:	001f      	movs	r7, r3
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2f00      	cmp	r7, #0
 8000bcc:	db01      	blt.n	8000bd2 <__aeabi_fdiv+0x1aa>
 8000bce:	429c      	cmp	r4, r3
 8000bd0:	d801      	bhi.n	8000bd6 <__aeabi_fdiv+0x1ae>
 8000bd2:	1b1b      	subs	r3, r3, r4
 8000bd4:	4329      	orrs	r1, r5
 8000bd6:	3e01      	subs	r6, #1
 8000bd8:	2e00      	cmp	r6, #0
 8000bda:	d1f3      	bne.n	8000bc4 <__aeabi_fdiv+0x19c>
 8000bdc:	001c      	movs	r4, r3
 8000bde:	1e63      	subs	r3, r4, #1
 8000be0:	419c      	sbcs	r4, r3
 8000be2:	430c      	orrs	r4, r1
 8000be4:	0001      	movs	r1, r0
 8000be6:	317f      	adds	r1, #127	; 0x7f
 8000be8:	2900      	cmp	r1, #0
 8000bea:	ddce      	ble.n	8000b8a <__aeabi_fdiv+0x162>
 8000bec:	0763      	lsls	r3, r4, #29
 8000bee:	d004      	beq.n	8000bfa <__aeabi_fdiv+0x1d2>
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4023      	ands	r3, r4
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_fdiv+0x1d2>
 8000bf8:	3404      	adds	r4, #4
 8000bfa:	0123      	lsls	r3, r4, #4
 8000bfc:	d503      	bpl.n	8000c06 <__aeabi_fdiv+0x1de>
 8000bfe:	0001      	movs	r1, r0
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <__aeabi_fdiv+0x28c>)
 8000c02:	3180      	adds	r1, #128	; 0x80
 8000c04:	401c      	ands	r4, r3
 8000c06:	29fe      	cmp	r1, #254	; 0xfe
 8000c08:	dd0d      	ble.n	8000c26 <__aeabi_fdiv+0x1fe>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	9a01      	ldr	r2, [sp, #4]
 8000c0e:	21ff      	movs	r1, #255	; 0xff
 8000c10:	4013      	ands	r3, r2
 8000c12:	2400      	movs	r4, #0
 8000c14:	e7a4      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000c16:	2380      	movs	r3, #128	; 0x80
 8000c18:	03db      	lsls	r3, r3, #15
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	0264      	lsls	r4, r4, #9
 8000c1e:	0a64      	lsrs	r4, r4, #9
 8000c20:	0033      	movs	r3, r6
 8000c22:	21ff      	movs	r1, #255	; 0xff
 8000c24:	e79c      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000c26:	2301      	movs	r3, #1
 8000c28:	9a01      	ldr	r2, [sp, #4]
 8000c2a:	01a4      	lsls	r4, r4, #6
 8000c2c:	0a64      	lsrs	r4, r4, #9
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	4013      	ands	r3, r2
 8000c32:	e795      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	261a      	movs	r6, #26
 8000c38:	2101      	movs	r1, #1
 8000c3a:	e7c2      	b.n	8000bc2 <__aeabi_fdiv+0x19a>
 8000c3c:	9b00      	ldr	r3, [sp, #0]
 8000c3e:	468b      	mov	fp, r1
 8000c40:	469a      	mov	sl, r3
 8000c42:	2400      	movs	r4, #0
 8000c44:	e74c      	b.n	8000ae0 <__aeabi_fdiv+0xb8>
 8000c46:	0263      	lsls	r3, r4, #9
 8000c48:	d5e5      	bpl.n	8000c16 <__aeabi_fdiv+0x1ee>
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	2480      	movs	r4, #128	; 0x80
 8000c4e:	03e4      	lsls	r4, r4, #15
 8000c50:	432c      	orrs	r4, r5
 8000c52:	0264      	lsls	r4, r4, #9
 8000c54:	0a64      	lsrs	r4, r4, #9
 8000c56:	9b00      	ldr	r3, [sp, #0]
 8000c58:	21ff      	movs	r1, #255	; 0xff
 8000c5a:	e781      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000c5c:	9501      	str	r5, [sp, #4]
 8000c5e:	e7c1      	b.n	8000be4 <__aeabi_fdiv+0x1bc>
 8000c60:	0023      	movs	r3, r4
 8000c62:	2020      	movs	r0, #32
 8000c64:	40cb      	lsrs	r3, r1
 8000c66:	1a41      	subs	r1, r0, r1
 8000c68:	408c      	lsls	r4, r1
 8000c6a:	1e61      	subs	r1, r4, #1
 8000c6c:	418c      	sbcs	r4, r1
 8000c6e:	431c      	orrs	r4, r3
 8000c70:	0763      	lsls	r3, r4, #29
 8000c72:	d004      	beq.n	8000c7e <__aeabi_fdiv+0x256>
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_fdiv+0x256>
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	0163      	lsls	r3, r4, #5
 8000c80:	d505      	bpl.n	8000c8e <__aeabi_fdiv+0x266>
 8000c82:	2301      	movs	r3, #1
 8000c84:	9a01      	ldr	r2, [sp, #4]
 8000c86:	2101      	movs	r1, #1
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2400      	movs	r4, #0
 8000c8c:	e768      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	9a01      	ldr	r2, [sp, #4]
 8000c92:	01a4      	lsls	r4, r4, #6
 8000c94:	0a64      	lsrs	r4, r4, #9
 8000c96:	4013      	ands	r3, r2
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e761      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	03db      	lsls	r3, r3, #15
 8000ca0:	431c      	orrs	r4, r3
 8000ca2:	0264      	lsls	r4, r4, #9
 8000ca4:	0a64      	lsrs	r4, r4, #9
 8000ca6:	4653      	mov	r3, sl
 8000ca8:	21ff      	movs	r1, #255	; 0xff
 8000caa:	e759      	b.n	8000b60 <__aeabi_fdiv+0x138>
 8000cac:	08009670 	.word	0x08009670
 8000cb0:	080096b0 	.word	0x080096b0
 8000cb4:	f7ffffff 	.word	0xf7ffffff

08000cb8 <__eqsf2>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	0042      	lsls	r2, r0, #1
 8000cbc:	0245      	lsls	r5, r0, #9
 8000cbe:	024e      	lsls	r6, r1, #9
 8000cc0:	004c      	lsls	r4, r1, #1
 8000cc2:	0fc3      	lsrs	r3, r0, #31
 8000cc4:	0a6d      	lsrs	r5, r5, #9
 8000cc6:	0e12      	lsrs	r2, r2, #24
 8000cc8:	0a76      	lsrs	r6, r6, #9
 8000cca:	0e24      	lsrs	r4, r4, #24
 8000ccc:	0fc9      	lsrs	r1, r1, #31
 8000cce:	2001      	movs	r0, #1
 8000cd0:	2aff      	cmp	r2, #255	; 0xff
 8000cd2:	d006      	beq.n	8000ce2 <__eqsf2+0x2a>
 8000cd4:	2cff      	cmp	r4, #255	; 0xff
 8000cd6:	d003      	beq.n	8000ce0 <__eqsf2+0x28>
 8000cd8:	42a2      	cmp	r2, r4
 8000cda:	d101      	bne.n	8000ce0 <__eqsf2+0x28>
 8000cdc:	42b5      	cmp	r5, r6
 8000cde:	d006      	beq.n	8000cee <__eqsf2+0x36>
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d1fc      	bne.n	8000ce0 <__eqsf2+0x28>
 8000ce6:	2cff      	cmp	r4, #255	; 0xff
 8000ce8:	d1fa      	bne.n	8000ce0 <__eqsf2+0x28>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d1f8      	bne.n	8000ce0 <__eqsf2+0x28>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d006      	beq.n	8000d00 <__eqsf2+0x48>
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	d1f3      	bne.n	8000ce0 <__eqsf2+0x28>
 8000cf8:	0028      	movs	r0, r5
 8000cfa:	1e45      	subs	r5, r0, #1
 8000cfc:	41a8      	sbcs	r0, r5
 8000cfe:	e7ef      	b.n	8000ce0 <__eqsf2+0x28>
 8000d00:	2000      	movs	r0, #0
 8000d02:	e7ed      	b.n	8000ce0 <__eqsf2+0x28>

08000d04 <__gesf2>:
 8000d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d06:	0042      	lsls	r2, r0, #1
 8000d08:	0245      	lsls	r5, r0, #9
 8000d0a:	024c      	lsls	r4, r1, #9
 8000d0c:	0fc3      	lsrs	r3, r0, #31
 8000d0e:	0048      	lsls	r0, r1, #1
 8000d10:	0a6d      	lsrs	r5, r5, #9
 8000d12:	0e12      	lsrs	r2, r2, #24
 8000d14:	0a64      	lsrs	r4, r4, #9
 8000d16:	0e00      	lsrs	r0, r0, #24
 8000d18:	0fc9      	lsrs	r1, r1, #31
 8000d1a:	2aff      	cmp	r2, #255	; 0xff
 8000d1c:	d01e      	beq.n	8000d5c <__gesf2+0x58>
 8000d1e:	28ff      	cmp	r0, #255	; 0xff
 8000d20:	d021      	beq.n	8000d66 <__gesf2+0x62>
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d10a      	bne.n	8000d3c <__gesf2+0x38>
 8000d26:	426e      	negs	r6, r5
 8000d28:	416e      	adcs	r6, r5
 8000d2a:	b2f6      	uxtb	r6, r6
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d10f      	bne.n	8000d50 <__gesf2+0x4c>
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d10d      	bne.n	8000d50 <__gesf2+0x4c>
 8000d34:	2000      	movs	r0, #0
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d009      	beq.n	8000d4e <__gesf2+0x4a>
 8000d3a:	e005      	b.n	8000d48 <__gesf2+0x44>
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	d101      	bne.n	8000d44 <__gesf2+0x40>
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	d001      	beq.n	8000d48 <__gesf2+0x44>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d011      	beq.n	8000d6c <__gesf2+0x68>
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4258      	negs	r0, r3
 8000d4c:	4308      	orrs	r0, r1
 8000d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0f7      	beq.n	8000d44 <__gesf2+0x40>
 8000d54:	2001      	movs	r0, #1
 8000d56:	3901      	subs	r1, #1
 8000d58:	4308      	orrs	r0, r1
 8000d5a:	e7f8      	b.n	8000d4e <__gesf2+0x4a>
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0de      	beq.n	8000d1e <__gesf2+0x1a>
 8000d60:	2002      	movs	r0, #2
 8000d62:	4240      	negs	r0, r0
 8000d64:	e7f3      	b.n	8000d4e <__gesf2+0x4a>
 8000d66:	2c00      	cmp	r4, #0
 8000d68:	d0db      	beq.n	8000d22 <__gesf2+0x1e>
 8000d6a:	e7f9      	b.n	8000d60 <__gesf2+0x5c>
 8000d6c:	4282      	cmp	r2, r0
 8000d6e:	dceb      	bgt.n	8000d48 <__gesf2+0x44>
 8000d70:	db04      	blt.n	8000d7c <__gesf2+0x78>
 8000d72:	42a5      	cmp	r5, r4
 8000d74:	d8e8      	bhi.n	8000d48 <__gesf2+0x44>
 8000d76:	2000      	movs	r0, #0
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	d2e8      	bcs.n	8000d4e <__gesf2+0x4a>
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	1e58      	subs	r0, r3, #1
 8000d80:	4308      	orrs	r0, r1
 8000d82:	e7e4      	b.n	8000d4e <__gesf2+0x4a>

08000d84 <__lesf2>:
 8000d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d86:	0042      	lsls	r2, r0, #1
 8000d88:	024d      	lsls	r5, r1, #9
 8000d8a:	004c      	lsls	r4, r1, #1
 8000d8c:	0246      	lsls	r6, r0, #9
 8000d8e:	0a76      	lsrs	r6, r6, #9
 8000d90:	0e12      	lsrs	r2, r2, #24
 8000d92:	0fc3      	lsrs	r3, r0, #31
 8000d94:	0a6d      	lsrs	r5, r5, #9
 8000d96:	0e24      	lsrs	r4, r4, #24
 8000d98:	0fc9      	lsrs	r1, r1, #31
 8000d9a:	2aff      	cmp	r2, #255	; 0xff
 8000d9c:	d016      	beq.n	8000dcc <__lesf2+0x48>
 8000d9e:	2cff      	cmp	r4, #255	; 0xff
 8000da0:	d018      	beq.n	8000dd4 <__lesf2+0x50>
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	d10a      	bne.n	8000dbc <__lesf2+0x38>
 8000da6:	4270      	negs	r0, r6
 8000da8:	4170      	adcs	r0, r6
 8000daa:	b2c0      	uxtb	r0, r0
 8000dac:	2c00      	cmp	r4, #0
 8000dae:	d015      	beq.n	8000ddc <__lesf2+0x58>
 8000db0:	2800      	cmp	r0, #0
 8000db2:	d005      	beq.n	8000dc0 <__lesf2+0x3c>
 8000db4:	2001      	movs	r0, #1
 8000db6:	3901      	subs	r1, #1
 8000db8:	4308      	orrs	r0, r1
 8000dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d013      	beq.n	8000de8 <__lesf2+0x64>
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d014      	beq.n	8000dee <__lesf2+0x6a>
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	4318      	orrs	r0, r3
 8000dca:	e7f6      	b.n	8000dba <__lesf2+0x36>
 8000dcc:	2002      	movs	r0, #2
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d1f3      	bne.n	8000dba <__lesf2+0x36>
 8000dd2:	e7e4      	b.n	8000d9e <__lesf2+0x1a>
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d1ef      	bne.n	8000dba <__lesf2+0x36>
 8000dda:	e7e2      	b.n	8000da2 <__lesf2+0x1e>
 8000ddc:	2d00      	cmp	r5, #0
 8000dde:	d1e7      	bne.n	8000db0 <__lesf2+0x2c>
 8000de0:	2000      	movs	r0, #0
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e9      	beq.n	8000dba <__lesf2+0x36>
 8000de6:	e7ed      	b.n	8000dc4 <__lesf2+0x40>
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d1e9      	bne.n	8000dc0 <__lesf2+0x3c>
 8000dec:	e7ea      	b.n	8000dc4 <__lesf2+0x40>
 8000dee:	42a2      	cmp	r2, r4
 8000df0:	dc06      	bgt.n	8000e00 <__lesf2+0x7c>
 8000df2:	dbdf      	blt.n	8000db4 <__lesf2+0x30>
 8000df4:	42ae      	cmp	r6, r5
 8000df6:	d803      	bhi.n	8000e00 <__lesf2+0x7c>
 8000df8:	2000      	movs	r0, #0
 8000dfa:	42ae      	cmp	r6, r5
 8000dfc:	d3da      	bcc.n	8000db4 <__lesf2+0x30>
 8000dfe:	e7dc      	b.n	8000dba <__lesf2+0x36>
 8000e00:	2001      	movs	r0, #1
 8000e02:	4249      	negs	r1, r1
 8000e04:	4308      	orrs	r0, r1
 8000e06:	e7d8      	b.n	8000dba <__lesf2+0x36>

08000e08 <__aeabi_fsub>:
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	464f      	mov	r7, r9
 8000e0c:	46d6      	mov	lr, sl
 8000e0e:	4646      	mov	r6, r8
 8000e10:	0044      	lsls	r4, r0, #1
 8000e12:	b5c0      	push	{r6, r7, lr}
 8000e14:	0fc2      	lsrs	r2, r0, #31
 8000e16:	0247      	lsls	r7, r0, #9
 8000e18:	0248      	lsls	r0, r1, #9
 8000e1a:	0a40      	lsrs	r0, r0, #9
 8000e1c:	4684      	mov	ip, r0
 8000e1e:	4666      	mov	r6, ip
 8000e20:	0a7b      	lsrs	r3, r7, #9
 8000e22:	0048      	lsls	r0, r1, #1
 8000e24:	0fc9      	lsrs	r1, r1, #31
 8000e26:	469a      	mov	sl, r3
 8000e28:	0e24      	lsrs	r4, r4, #24
 8000e2a:	0015      	movs	r5, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	0e00      	lsrs	r0, r0, #24
 8000e30:	4689      	mov	r9, r1
 8000e32:	00f6      	lsls	r6, r6, #3
 8000e34:	28ff      	cmp	r0, #255	; 0xff
 8000e36:	d100      	bne.n	8000e3a <__aeabi_fsub+0x32>
 8000e38:	e08f      	b.n	8000f5a <__aeabi_fsub+0x152>
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	464f      	mov	r7, r9
 8000e3e:	404f      	eors	r7, r1
 8000e40:	0039      	movs	r1, r7
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d066      	beq.n	8000f14 <__aeabi_fsub+0x10c>
 8000e46:	1a22      	subs	r2, r4, r0
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	dc00      	bgt.n	8000e4e <__aeabi_fsub+0x46>
 8000e4c:	e09d      	b.n	8000f8a <__aeabi_fsub+0x182>
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d13d      	bne.n	8000ece <__aeabi_fsub+0xc6>
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d100      	bne.n	8000e58 <__aeabi_fsub+0x50>
 8000e56:	e08b      	b.n	8000f70 <__aeabi_fsub+0x168>
 8000e58:	1e51      	subs	r1, r2, #1
 8000e5a:	2900      	cmp	r1, #0
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fsub+0x58>
 8000e5e:	e0b5      	b.n	8000fcc <__aeabi_fsub+0x1c4>
 8000e60:	2401      	movs	r4, #1
 8000e62:	1b9b      	subs	r3, r3, r6
 8000e64:	015a      	lsls	r2, r3, #5
 8000e66:	d544      	bpl.n	8000ef2 <__aeabi_fsub+0xea>
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	099f      	lsrs	r7, r3, #6
 8000e6c:	0038      	movs	r0, r7
 8000e6e:	f002 f801 	bl	8002e74 <__clzsi2>
 8000e72:	3805      	subs	r0, #5
 8000e74:	4087      	lsls	r7, r0
 8000e76:	4284      	cmp	r4, r0
 8000e78:	dd00      	ble.n	8000e7c <__aeabi_fsub+0x74>
 8000e7a:	e096      	b.n	8000faa <__aeabi_fsub+0x1a2>
 8000e7c:	1b04      	subs	r4, r0, r4
 8000e7e:	003a      	movs	r2, r7
 8000e80:	2020      	movs	r0, #32
 8000e82:	3401      	adds	r4, #1
 8000e84:	40e2      	lsrs	r2, r4
 8000e86:	1b04      	subs	r4, r0, r4
 8000e88:	40a7      	lsls	r7, r4
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	1e5f      	subs	r7, r3, #1
 8000e8e:	41bb      	sbcs	r3, r7
 8000e90:	2400      	movs	r4, #0
 8000e92:	4313      	orrs	r3, r2
 8000e94:	075a      	lsls	r2, r3, #29
 8000e96:	d004      	beq.n	8000ea2 <__aeabi_fsub+0x9a>
 8000e98:	220f      	movs	r2, #15
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	2a04      	cmp	r2, #4
 8000e9e:	d000      	beq.n	8000ea2 <__aeabi_fsub+0x9a>
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	015a      	lsls	r2, r3, #5
 8000ea4:	d527      	bpl.n	8000ef6 <__aeabi_fsub+0xee>
 8000ea6:	3401      	adds	r4, #1
 8000ea8:	2cff      	cmp	r4, #255	; 0xff
 8000eaa:	d100      	bne.n	8000eae <__aeabi_fsub+0xa6>
 8000eac:	e079      	b.n	8000fa2 <__aeabi_fsub+0x19a>
 8000eae:	2201      	movs	r2, #1
 8000eb0:	019b      	lsls	r3, r3, #6
 8000eb2:	0a5b      	lsrs	r3, r3, #9
 8000eb4:	b2e4      	uxtb	r4, r4
 8000eb6:	402a      	ands	r2, r5
 8000eb8:	025b      	lsls	r3, r3, #9
 8000eba:	05e4      	lsls	r4, r4, #23
 8000ebc:	0a58      	lsrs	r0, r3, #9
 8000ebe:	07d2      	lsls	r2, r2, #31
 8000ec0:	4320      	orrs	r0, r4
 8000ec2:	4310      	orrs	r0, r2
 8000ec4:	bc1c      	pop	{r2, r3, r4}
 8000ec6:	4690      	mov	r8, r2
 8000ec8:	4699      	mov	r9, r3
 8000eca:	46a2      	mov	sl, r4
 8000ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ece:	2cff      	cmp	r4, #255	; 0xff
 8000ed0:	d0e0      	beq.n	8000e94 <__aeabi_fsub+0x8c>
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	04c9      	lsls	r1, r1, #19
 8000ed6:	430e      	orrs	r6, r1
 8000ed8:	2a1b      	cmp	r2, #27
 8000eda:	dc7b      	bgt.n	8000fd4 <__aeabi_fsub+0x1cc>
 8000edc:	0031      	movs	r1, r6
 8000ede:	2020      	movs	r0, #32
 8000ee0:	40d1      	lsrs	r1, r2
 8000ee2:	1a82      	subs	r2, r0, r2
 8000ee4:	4096      	lsls	r6, r2
 8000ee6:	1e72      	subs	r2, r6, #1
 8000ee8:	4196      	sbcs	r6, r2
 8000eea:	430e      	orrs	r6, r1
 8000eec:	1b9b      	subs	r3, r3, r6
 8000eee:	015a      	lsls	r2, r3, #5
 8000ef0:	d4ba      	bmi.n	8000e68 <__aeabi_fsub+0x60>
 8000ef2:	075a      	lsls	r2, r3, #29
 8000ef4:	d1d0      	bne.n	8000e98 <__aeabi_fsub+0x90>
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	08df      	lsrs	r7, r3, #3
 8000efa:	402a      	ands	r2, r5
 8000efc:	2cff      	cmp	r4, #255	; 0xff
 8000efe:	d133      	bne.n	8000f68 <__aeabi_fsub+0x160>
 8000f00:	2f00      	cmp	r7, #0
 8000f02:	d100      	bne.n	8000f06 <__aeabi_fsub+0xfe>
 8000f04:	e0a8      	b.n	8001058 <__aeabi_fsub+0x250>
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	03db      	lsls	r3, r3, #15
 8000f0a:	433b      	orrs	r3, r7
 8000f0c:	025b      	lsls	r3, r3, #9
 8000f0e:	0a5b      	lsrs	r3, r3, #9
 8000f10:	24ff      	movs	r4, #255	; 0xff
 8000f12:	e7d1      	b.n	8000eb8 <__aeabi_fsub+0xb0>
 8000f14:	1a21      	subs	r1, r4, r0
 8000f16:	2900      	cmp	r1, #0
 8000f18:	dd4c      	ble.n	8000fb4 <__aeabi_fsub+0x1ac>
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d02a      	beq.n	8000f74 <__aeabi_fsub+0x16c>
 8000f1e:	2cff      	cmp	r4, #255	; 0xff
 8000f20:	d0b8      	beq.n	8000e94 <__aeabi_fsub+0x8c>
 8000f22:	2080      	movs	r0, #128	; 0x80
 8000f24:	04c0      	lsls	r0, r0, #19
 8000f26:	4306      	orrs	r6, r0
 8000f28:	291b      	cmp	r1, #27
 8000f2a:	dd00      	ble.n	8000f2e <__aeabi_fsub+0x126>
 8000f2c:	e0af      	b.n	800108e <__aeabi_fsub+0x286>
 8000f2e:	0030      	movs	r0, r6
 8000f30:	2720      	movs	r7, #32
 8000f32:	40c8      	lsrs	r0, r1
 8000f34:	1a79      	subs	r1, r7, r1
 8000f36:	408e      	lsls	r6, r1
 8000f38:	1e71      	subs	r1, r6, #1
 8000f3a:	418e      	sbcs	r6, r1
 8000f3c:	4306      	orrs	r6, r0
 8000f3e:	199b      	adds	r3, r3, r6
 8000f40:	0159      	lsls	r1, r3, #5
 8000f42:	d5d6      	bpl.n	8000ef2 <__aeabi_fsub+0xea>
 8000f44:	3401      	adds	r4, #1
 8000f46:	2cff      	cmp	r4, #255	; 0xff
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x144>
 8000f4a:	e085      	b.n	8001058 <__aeabi_fsub+0x250>
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	497a      	ldr	r1, [pc, #488]	; (8001138 <__aeabi_fsub+0x330>)
 8000f50:	401a      	ands	r2, r3
 8000f52:	085b      	lsrs	r3, r3, #1
 8000f54:	400b      	ands	r3, r1
 8000f56:	4313      	orrs	r3, r2
 8000f58:	e79c      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8000f5a:	2e00      	cmp	r6, #0
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_fsub+0x158>
 8000f5e:	e770      	b.n	8000e42 <__aeabi_fsub+0x3a>
 8000f60:	e76b      	b.n	8000e3a <__aeabi_fsub+0x32>
 8000f62:	1e3b      	subs	r3, r7, #0
 8000f64:	d1c5      	bne.n	8000ef2 <__aeabi_fsub+0xea>
 8000f66:	2200      	movs	r2, #0
 8000f68:	027b      	lsls	r3, r7, #9
 8000f6a:	0a5b      	lsrs	r3, r3, #9
 8000f6c:	b2e4      	uxtb	r4, r4
 8000f6e:	e7a3      	b.n	8000eb8 <__aeabi_fsub+0xb0>
 8000f70:	0014      	movs	r4, r2
 8000f72:	e78f      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8000f74:	2e00      	cmp	r6, #0
 8000f76:	d04d      	beq.n	8001014 <__aeabi_fsub+0x20c>
 8000f78:	1e48      	subs	r0, r1, #1
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	d157      	bne.n	800102e <__aeabi_fsub+0x226>
 8000f7e:	199b      	adds	r3, r3, r6
 8000f80:	2401      	movs	r4, #1
 8000f82:	015a      	lsls	r2, r3, #5
 8000f84:	d5b5      	bpl.n	8000ef2 <__aeabi_fsub+0xea>
 8000f86:	2402      	movs	r4, #2
 8000f88:	e7e0      	b.n	8000f4c <__aeabi_fsub+0x144>
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d125      	bne.n	8000fda <__aeabi_fsub+0x1d2>
 8000f8e:	1c62      	adds	r2, r4, #1
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	2a01      	cmp	r2, #1
 8000f94:	dd72      	ble.n	800107c <__aeabi_fsub+0x274>
 8000f96:	1b9f      	subs	r7, r3, r6
 8000f98:	017a      	lsls	r2, r7, #5
 8000f9a:	d535      	bpl.n	8001008 <__aeabi_fsub+0x200>
 8000f9c:	1af7      	subs	r7, r6, r3
 8000f9e:	000d      	movs	r5, r1
 8000fa0:	e764      	b.n	8000e6c <__aeabi_fsub+0x64>
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	402a      	ands	r2, r5
 8000fa8:	e786      	b.n	8000eb8 <__aeabi_fsub+0xb0>
 8000faa:	003b      	movs	r3, r7
 8000fac:	4a63      	ldr	r2, [pc, #396]	; (800113c <__aeabi_fsub+0x334>)
 8000fae:	1a24      	subs	r4, r4, r0
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	e76f      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8000fb4:	2900      	cmp	r1, #0
 8000fb6:	d16c      	bne.n	8001092 <__aeabi_fsub+0x28a>
 8000fb8:	1c61      	adds	r1, r4, #1
 8000fba:	b2c8      	uxtb	r0, r1
 8000fbc:	2801      	cmp	r0, #1
 8000fbe:	dd4e      	ble.n	800105e <__aeabi_fsub+0x256>
 8000fc0:	29ff      	cmp	r1, #255	; 0xff
 8000fc2:	d049      	beq.n	8001058 <__aeabi_fsub+0x250>
 8000fc4:	199b      	adds	r3, r3, r6
 8000fc6:	085b      	lsrs	r3, r3, #1
 8000fc8:	000c      	movs	r4, r1
 8000fca:	e763      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8000fcc:	2aff      	cmp	r2, #255	; 0xff
 8000fce:	d041      	beq.n	8001054 <__aeabi_fsub+0x24c>
 8000fd0:	000a      	movs	r2, r1
 8000fd2:	e781      	b.n	8000ed8 <__aeabi_fsub+0xd0>
 8000fd4:	2601      	movs	r6, #1
 8000fd6:	1b9b      	subs	r3, r3, r6
 8000fd8:	e789      	b.n	8000eee <__aeabi_fsub+0xe6>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d01c      	beq.n	8001018 <__aeabi_fsub+0x210>
 8000fde:	28ff      	cmp	r0, #255	; 0xff
 8000fe0:	d021      	beq.n	8001026 <__aeabi_fsub+0x21e>
 8000fe2:	2480      	movs	r4, #128	; 0x80
 8000fe4:	04e4      	lsls	r4, r4, #19
 8000fe6:	4252      	negs	r2, r2
 8000fe8:	4323      	orrs	r3, r4
 8000fea:	2a1b      	cmp	r2, #27
 8000fec:	dd00      	ble.n	8000ff0 <__aeabi_fsub+0x1e8>
 8000fee:	e096      	b.n	800111e <__aeabi_fsub+0x316>
 8000ff0:	001c      	movs	r4, r3
 8000ff2:	2520      	movs	r5, #32
 8000ff4:	40d4      	lsrs	r4, r2
 8000ff6:	1aaa      	subs	r2, r5, r2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	1e5a      	subs	r2, r3, #1
 8000ffc:	4193      	sbcs	r3, r2
 8000ffe:	4323      	orrs	r3, r4
 8001000:	1af3      	subs	r3, r6, r3
 8001002:	0004      	movs	r4, r0
 8001004:	000d      	movs	r5, r1
 8001006:	e72d      	b.n	8000e64 <__aeabi_fsub+0x5c>
 8001008:	2f00      	cmp	r7, #0
 800100a:	d000      	beq.n	800100e <__aeabi_fsub+0x206>
 800100c:	e72e      	b.n	8000e6c <__aeabi_fsub+0x64>
 800100e:	2200      	movs	r2, #0
 8001010:	2400      	movs	r4, #0
 8001012:	e7a9      	b.n	8000f68 <__aeabi_fsub+0x160>
 8001014:	000c      	movs	r4, r1
 8001016:	e73d      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8001018:	2b00      	cmp	r3, #0
 800101a:	d058      	beq.n	80010ce <__aeabi_fsub+0x2c6>
 800101c:	43d2      	mvns	r2, r2
 800101e:	2a00      	cmp	r2, #0
 8001020:	d0ee      	beq.n	8001000 <__aeabi_fsub+0x1f8>
 8001022:	28ff      	cmp	r0, #255	; 0xff
 8001024:	d1e1      	bne.n	8000fea <__aeabi_fsub+0x1e2>
 8001026:	0033      	movs	r3, r6
 8001028:	24ff      	movs	r4, #255	; 0xff
 800102a:	000d      	movs	r5, r1
 800102c:	e732      	b.n	8000e94 <__aeabi_fsub+0x8c>
 800102e:	29ff      	cmp	r1, #255	; 0xff
 8001030:	d010      	beq.n	8001054 <__aeabi_fsub+0x24c>
 8001032:	0001      	movs	r1, r0
 8001034:	e778      	b.n	8000f28 <__aeabi_fsub+0x120>
 8001036:	2b00      	cmp	r3, #0
 8001038:	d06e      	beq.n	8001118 <__aeabi_fsub+0x310>
 800103a:	24ff      	movs	r4, #255	; 0xff
 800103c:	2e00      	cmp	r6, #0
 800103e:	d100      	bne.n	8001042 <__aeabi_fsub+0x23a>
 8001040:	e728      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	4651      	mov	r1, sl
 8001046:	03d2      	lsls	r2, r2, #15
 8001048:	4211      	tst	r1, r2
 800104a:	d003      	beq.n	8001054 <__aeabi_fsub+0x24c>
 800104c:	4661      	mov	r1, ip
 800104e:	4211      	tst	r1, r2
 8001050:	d100      	bne.n	8001054 <__aeabi_fsub+0x24c>
 8001052:	0033      	movs	r3, r6
 8001054:	24ff      	movs	r4, #255	; 0xff
 8001056:	e71d      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8001058:	24ff      	movs	r4, #255	; 0xff
 800105a:	2300      	movs	r3, #0
 800105c:	e72c      	b.n	8000eb8 <__aeabi_fsub+0xb0>
 800105e:	2c00      	cmp	r4, #0
 8001060:	d1e9      	bne.n	8001036 <__aeabi_fsub+0x22e>
 8001062:	2b00      	cmp	r3, #0
 8001064:	d063      	beq.n	800112e <__aeabi_fsub+0x326>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d100      	bne.n	800106c <__aeabi_fsub+0x264>
 800106a:	e713      	b.n	8000e94 <__aeabi_fsub+0x8c>
 800106c:	199b      	adds	r3, r3, r6
 800106e:	015a      	lsls	r2, r3, #5
 8001070:	d400      	bmi.n	8001074 <__aeabi_fsub+0x26c>
 8001072:	e73e      	b.n	8000ef2 <__aeabi_fsub+0xea>
 8001074:	4a31      	ldr	r2, [pc, #196]	; (800113c <__aeabi_fsub+0x334>)
 8001076:	000c      	movs	r4, r1
 8001078:	4013      	ands	r3, r2
 800107a:	e70b      	b.n	8000e94 <__aeabi_fsub+0x8c>
 800107c:	2c00      	cmp	r4, #0
 800107e:	d11e      	bne.n	80010be <__aeabi_fsub+0x2b6>
 8001080:	2b00      	cmp	r3, #0
 8001082:	d12f      	bne.n	80010e4 <__aeabi_fsub+0x2dc>
 8001084:	2e00      	cmp	r6, #0
 8001086:	d04f      	beq.n	8001128 <__aeabi_fsub+0x320>
 8001088:	0033      	movs	r3, r6
 800108a:	000d      	movs	r5, r1
 800108c:	e702      	b.n	8000e94 <__aeabi_fsub+0x8c>
 800108e:	2601      	movs	r6, #1
 8001090:	e755      	b.n	8000f3e <__aeabi_fsub+0x136>
 8001092:	2c00      	cmp	r4, #0
 8001094:	d11f      	bne.n	80010d6 <__aeabi_fsub+0x2ce>
 8001096:	2b00      	cmp	r3, #0
 8001098:	d043      	beq.n	8001122 <__aeabi_fsub+0x31a>
 800109a:	43c9      	mvns	r1, r1
 800109c:	2900      	cmp	r1, #0
 800109e:	d00b      	beq.n	80010b8 <__aeabi_fsub+0x2b0>
 80010a0:	28ff      	cmp	r0, #255	; 0xff
 80010a2:	d039      	beq.n	8001118 <__aeabi_fsub+0x310>
 80010a4:	291b      	cmp	r1, #27
 80010a6:	dc44      	bgt.n	8001132 <__aeabi_fsub+0x32a>
 80010a8:	001c      	movs	r4, r3
 80010aa:	2720      	movs	r7, #32
 80010ac:	40cc      	lsrs	r4, r1
 80010ae:	1a79      	subs	r1, r7, r1
 80010b0:	408b      	lsls	r3, r1
 80010b2:	1e59      	subs	r1, r3, #1
 80010b4:	418b      	sbcs	r3, r1
 80010b6:	4323      	orrs	r3, r4
 80010b8:	199b      	adds	r3, r3, r6
 80010ba:	0004      	movs	r4, r0
 80010bc:	e740      	b.n	8000f40 <__aeabi_fsub+0x138>
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11a      	bne.n	80010f8 <__aeabi_fsub+0x2f0>
 80010c2:	2e00      	cmp	r6, #0
 80010c4:	d124      	bne.n	8001110 <__aeabi_fsub+0x308>
 80010c6:	2780      	movs	r7, #128	; 0x80
 80010c8:	2200      	movs	r2, #0
 80010ca:	03ff      	lsls	r7, r7, #15
 80010cc:	e71b      	b.n	8000f06 <__aeabi_fsub+0xfe>
 80010ce:	0033      	movs	r3, r6
 80010d0:	0004      	movs	r4, r0
 80010d2:	000d      	movs	r5, r1
 80010d4:	e6de      	b.n	8000e94 <__aeabi_fsub+0x8c>
 80010d6:	28ff      	cmp	r0, #255	; 0xff
 80010d8:	d01e      	beq.n	8001118 <__aeabi_fsub+0x310>
 80010da:	2480      	movs	r4, #128	; 0x80
 80010dc:	04e4      	lsls	r4, r4, #19
 80010de:	4249      	negs	r1, r1
 80010e0:	4323      	orrs	r3, r4
 80010e2:	e7df      	b.n	80010a4 <__aeabi_fsub+0x29c>
 80010e4:	2e00      	cmp	r6, #0
 80010e6:	d100      	bne.n	80010ea <__aeabi_fsub+0x2e2>
 80010e8:	e6d4      	b.n	8000e94 <__aeabi_fsub+0x8c>
 80010ea:	1b9f      	subs	r7, r3, r6
 80010ec:	017a      	lsls	r2, r7, #5
 80010ee:	d400      	bmi.n	80010f2 <__aeabi_fsub+0x2ea>
 80010f0:	e737      	b.n	8000f62 <__aeabi_fsub+0x15a>
 80010f2:	1af3      	subs	r3, r6, r3
 80010f4:	000d      	movs	r5, r1
 80010f6:	e6cd      	b.n	8000e94 <__aeabi_fsub+0x8c>
 80010f8:	24ff      	movs	r4, #255	; 0xff
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_fsub+0x2f8>
 80010fe:	e6c9      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	4650      	mov	r0, sl
 8001104:	03d2      	lsls	r2, r2, #15
 8001106:	4210      	tst	r0, r2
 8001108:	d0a4      	beq.n	8001054 <__aeabi_fsub+0x24c>
 800110a:	4660      	mov	r0, ip
 800110c:	4210      	tst	r0, r2
 800110e:	d1a1      	bne.n	8001054 <__aeabi_fsub+0x24c>
 8001110:	0033      	movs	r3, r6
 8001112:	000d      	movs	r5, r1
 8001114:	24ff      	movs	r4, #255	; 0xff
 8001116:	e6bd      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8001118:	0033      	movs	r3, r6
 800111a:	24ff      	movs	r4, #255	; 0xff
 800111c:	e6ba      	b.n	8000e94 <__aeabi_fsub+0x8c>
 800111e:	2301      	movs	r3, #1
 8001120:	e76e      	b.n	8001000 <__aeabi_fsub+0x1f8>
 8001122:	0033      	movs	r3, r6
 8001124:	0004      	movs	r4, r0
 8001126:	e6b5      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8001128:	2700      	movs	r7, #0
 800112a:	2200      	movs	r2, #0
 800112c:	e71c      	b.n	8000f68 <__aeabi_fsub+0x160>
 800112e:	0033      	movs	r3, r6
 8001130:	e6b0      	b.n	8000e94 <__aeabi_fsub+0x8c>
 8001132:	2301      	movs	r3, #1
 8001134:	e7c0      	b.n	80010b8 <__aeabi_fsub+0x2b0>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	7dffffff 	.word	0x7dffffff
 800113c:	fbffffff 	.word	0xfbffffff

08001140 <__aeabi_fcmpun>:
 8001140:	0242      	lsls	r2, r0, #9
 8001142:	024b      	lsls	r3, r1, #9
 8001144:	0040      	lsls	r0, r0, #1
 8001146:	0049      	lsls	r1, r1, #1
 8001148:	0a52      	lsrs	r2, r2, #9
 800114a:	0e00      	lsrs	r0, r0, #24
 800114c:	0a5b      	lsrs	r3, r3, #9
 800114e:	0e09      	lsrs	r1, r1, #24
 8001150:	28ff      	cmp	r0, #255	; 0xff
 8001152:	d003      	beq.n	800115c <__aeabi_fcmpun+0x1c>
 8001154:	2000      	movs	r0, #0
 8001156:	29ff      	cmp	r1, #255	; 0xff
 8001158:	d006      	beq.n	8001168 <__aeabi_fcmpun+0x28>
 800115a:	4770      	bx	lr
 800115c:	38fe      	subs	r0, #254	; 0xfe
 800115e:	2a00      	cmp	r2, #0
 8001160:	d1fb      	bne.n	800115a <__aeabi_fcmpun+0x1a>
 8001162:	2000      	movs	r0, #0
 8001164:	29ff      	cmp	r1, #255	; 0xff
 8001166:	d1f8      	bne.n	800115a <__aeabi_fcmpun+0x1a>
 8001168:	0018      	movs	r0, r3
 800116a:	1e43      	subs	r3, r0, #1
 800116c:	4198      	sbcs	r0, r3
 800116e:	e7f4      	b.n	800115a <__aeabi_fcmpun+0x1a>

08001170 <__aeabi_i2f>:
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	2800      	cmp	r0, #0
 8001174:	d030      	beq.n	80011d8 <__aeabi_i2f+0x68>
 8001176:	17c3      	asrs	r3, r0, #31
 8001178:	18c4      	adds	r4, r0, r3
 800117a:	405c      	eors	r4, r3
 800117c:	0fc5      	lsrs	r5, r0, #31
 800117e:	0020      	movs	r0, r4
 8001180:	f001 fe78 	bl	8002e74 <__clzsi2>
 8001184:	239e      	movs	r3, #158	; 0x9e
 8001186:	1a1b      	subs	r3, r3, r0
 8001188:	2b96      	cmp	r3, #150	; 0x96
 800118a:	dc0d      	bgt.n	80011a8 <__aeabi_i2f+0x38>
 800118c:	2296      	movs	r2, #150	; 0x96
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	4094      	lsls	r4, r2
 8001192:	002a      	movs	r2, r5
 8001194:	0264      	lsls	r4, r4, #9
 8001196:	0a64      	lsrs	r4, r4, #9
 8001198:	b2db      	uxtb	r3, r3
 800119a:	0264      	lsls	r4, r4, #9
 800119c:	05db      	lsls	r3, r3, #23
 800119e:	0a60      	lsrs	r0, r4, #9
 80011a0:	07d2      	lsls	r2, r2, #31
 80011a2:	4318      	orrs	r0, r3
 80011a4:	4310      	orrs	r0, r2
 80011a6:	bd70      	pop	{r4, r5, r6, pc}
 80011a8:	2b99      	cmp	r3, #153	; 0x99
 80011aa:	dc19      	bgt.n	80011e0 <__aeabi_i2f+0x70>
 80011ac:	2299      	movs	r2, #153	; 0x99
 80011ae:	1ad2      	subs	r2, r2, r3
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	dd29      	ble.n	8001208 <__aeabi_i2f+0x98>
 80011b4:	4094      	lsls	r4, r2
 80011b6:	0022      	movs	r2, r4
 80011b8:	4c14      	ldr	r4, [pc, #80]	; (800120c <__aeabi_i2f+0x9c>)
 80011ba:	4014      	ands	r4, r2
 80011bc:	0751      	lsls	r1, r2, #29
 80011be:	d004      	beq.n	80011ca <__aeabi_i2f+0x5a>
 80011c0:	210f      	movs	r1, #15
 80011c2:	400a      	ands	r2, r1
 80011c4:	2a04      	cmp	r2, #4
 80011c6:	d000      	beq.n	80011ca <__aeabi_i2f+0x5a>
 80011c8:	3404      	adds	r4, #4
 80011ca:	0162      	lsls	r2, r4, #5
 80011cc:	d413      	bmi.n	80011f6 <__aeabi_i2f+0x86>
 80011ce:	01a4      	lsls	r4, r4, #6
 80011d0:	0a64      	lsrs	r4, r4, #9
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	002a      	movs	r2, r5
 80011d6:	e7e0      	b.n	800119a <__aeabi_i2f+0x2a>
 80011d8:	2200      	movs	r2, #0
 80011da:	2300      	movs	r3, #0
 80011dc:	2400      	movs	r4, #0
 80011de:	e7dc      	b.n	800119a <__aeabi_i2f+0x2a>
 80011e0:	2205      	movs	r2, #5
 80011e2:	0021      	movs	r1, r4
 80011e4:	1a12      	subs	r2, r2, r0
 80011e6:	40d1      	lsrs	r1, r2
 80011e8:	22b9      	movs	r2, #185	; 0xb9
 80011ea:	1ad2      	subs	r2, r2, r3
 80011ec:	4094      	lsls	r4, r2
 80011ee:	1e62      	subs	r2, r4, #1
 80011f0:	4194      	sbcs	r4, r2
 80011f2:	430c      	orrs	r4, r1
 80011f4:	e7da      	b.n	80011ac <__aeabi_i2f+0x3c>
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <__aeabi_i2f+0x9c>)
 80011f8:	002a      	movs	r2, r5
 80011fa:	401c      	ands	r4, r3
 80011fc:	239f      	movs	r3, #159	; 0x9f
 80011fe:	01a4      	lsls	r4, r4, #6
 8001200:	1a1b      	subs	r3, r3, r0
 8001202:	0a64      	lsrs	r4, r4, #9
 8001204:	b2db      	uxtb	r3, r3
 8001206:	e7c8      	b.n	800119a <__aeabi_i2f+0x2a>
 8001208:	0022      	movs	r2, r4
 800120a:	e7d5      	b.n	80011b8 <__aeabi_i2f+0x48>
 800120c:	fbffffff 	.word	0xfbffffff

08001210 <__aeabi_dadd>:
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001212:	4645      	mov	r5, r8
 8001214:	46de      	mov	lr, fp
 8001216:	4657      	mov	r7, sl
 8001218:	464e      	mov	r6, r9
 800121a:	030c      	lsls	r4, r1, #12
 800121c:	b5e0      	push	{r5, r6, r7, lr}
 800121e:	004e      	lsls	r6, r1, #1
 8001220:	0fc9      	lsrs	r1, r1, #31
 8001222:	4688      	mov	r8, r1
 8001224:	000d      	movs	r5, r1
 8001226:	0a61      	lsrs	r1, r4, #9
 8001228:	0f44      	lsrs	r4, r0, #29
 800122a:	430c      	orrs	r4, r1
 800122c:	00c7      	lsls	r7, r0, #3
 800122e:	0319      	lsls	r1, r3, #12
 8001230:	0058      	lsls	r0, r3, #1
 8001232:	0fdb      	lsrs	r3, r3, #31
 8001234:	469b      	mov	fp, r3
 8001236:	0a4b      	lsrs	r3, r1, #9
 8001238:	0f51      	lsrs	r1, r2, #29
 800123a:	430b      	orrs	r3, r1
 800123c:	0d76      	lsrs	r6, r6, #21
 800123e:	0d40      	lsrs	r0, r0, #21
 8001240:	0019      	movs	r1, r3
 8001242:	00d2      	lsls	r2, r2, #3
 8001244:	45d8      	cmp	r8, fp
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x3a>
 8001248:	e0ae      	b.n	80013a8 <__aeabi_dadd+0x198>
 800124a:	1a35      	subs	r5, r6, r0
 800124c:	2d00      	cmp	r5, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_dadd+0x42>
 8001250:	e0f6      	b.n	8001440 <__aeabi_dadd+0x230>
 8001252:	2800      	cmp	r0, #0
 8001254:	d10f      	bne.n	8001276 <__aeabi_dadd+0x66>
 8001256:	4313      	orrs	r3, r2
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0x4c>
 800125a:	e0db      	b.n	8001414 <__aeabi_dadd+0x204>
 800125c:	1e6b      	subs	r3, r5, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_dadd+0x54>
 8001262:	e137      	b.n	80014d4 <__aeabi_dadd+0x2c4>
 8001264:	1aba      	subs	r2, r7, r2
 8001266:	4297      	cmp	r7, r2
 8001268:	41bf      	sbcs	r7, r7
 800126a:	1a64      	subs	r4, r4, r1
 800126c:	427f      	negs	r7, r7
 800126e:	1be4      	subs	r4, r4, r7
 8001270:	2601      	movs	r6, #1
 8001272:	0017      	movs	r7, r2
 8001274:	e024      	b.n	80012c0 <__aeabi_dadd+0xb0>
 8001276:	4bc6      	ldr	r3, [pc, #792]	; (8001590 <__aeabi_dadd+0x380>)
 8001278:	429e      	cmp	r6, r3
 800127a:	d04d      	beq.n	8001318 <__aeabi_dadd+0x108>
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	4319      	orrs	r1, r3
 8001282:	2d38      	cmp	r5, #56	; 0x38
 8001284:	dd00      	ble.n	8001288 <__aeabi_dadd+0x78>
 8001286:	e107      	b.n	8001498 <__aeabi_dadd+0x288>
 8001288:	2d1f      	cmp	r5, #31
 800128a:	dd00      	ble.n	800128e <__aeabi_dadd+0x7e>
 800128c:	e138      	b.n	8001500 <__aeabi_dadd+0x2f0>
 800128e:	2020      	movs	r0, #32
 8001290:	1b43      	subs	r3, r0, r5
 8001292:	469a      	mov	sl, r3
 8001294:	000b      	movs	r3, r1
 8001296:	4650      	mov	r0, sl
 8001298:	4083      	lsls	r3, r0
 800129a:	4699      	mov	r9, r3
 800129c:	0013      	movs	r3, r2
 800129e:	4648      	mov	r0, r9
 80012a0:	40eb      	lsrs	r3, r5
 80012a2:	4318      	orrs	r0, r3
 80012a4:	0003      	movs	r3, r0
 80012a6:	4650      	mov	r0, sl
 80012a8:	4082      	lsls	r2, r0
 80012aa:	1e50      	subs	r0, r2, #1
 80012ac:	4182      	sbcs	r2, r0
 80012ae:	40e9      	lsrs	r1, r5
 80012b0:	431a      	orrs	r2, r3
 80012b2:	1aba      	subs	r2, r7, r2
 80012b4:	1a61      	subs	r1, r4, r1
 80012b6:	4297      	cmp	r7, r2
 80012b8:	41a4      	sbcs	r4, r4
 80012ba:	0017      	movs	r7, r2
 80012bc:	4264      	negs	r4, r4
 80012be:	1b0c      	subs	r4, r1, r4
 80012c0:	0223      	lsls	r3, r4, #8
 80012c2:	d562      	bpl.n	800138a <__aeabi_dadd+0x17a>
 80012c4:	0264      	lsls	r4, r4, #9
 80012c6:	0a65      	lsrs	r5, r4, #9
 80012c8:	2d00      	cmp	r5, #0
 80012ca:	d100      	bne.n	80012ce <__aeabi_dadd+0xbe>
 80012cc:	e0df      	b.n	800148e <__aeabi_dadd+0x27e>
 80012ce:	0028      	movs	r0, r5
 80012d0:	f001 fdd0 	bl	8002e74 <__clzsi2>
 80012d4:	0003      	movs	r3, r0
 80012d6:	3b08      	subs	r3, #8
 80012d8:	2b1f      	cmp	r3, #31
 80012da:	dd00      	ble.n	80012de <__aeabi_dadd+0xce>
 80012dc:	e0d2      	b.n	8001484 <__aeabi_dadd+0x274>
 80012de:	2220      	movs	r2, #32
 80012e0:	003c      	movs	r4, r7
 80012e2:	1ad2      	subs	r2, r2, r3
 80012e4:	409d      	lsls	r5, r3
 80012e6:	40d4      	lsrs	r4, r2
 80012e8:	409f      	lsls	r7, r3
 80012ea:	4325      	orrs	r5, r4
 80012ec:	429e      	cmp	r6, r3
 80012ee:	dd00      	ble.n	80012f2 <__aeabi_dadd+0xe2>
 80012f0:	e0c4      	b.n	800147c <__aeabi_dadd+0x26c>
 80012f2:	1b9e      	subs	r6, r3, r6
 80012f4:	1c73      	adds	r3, r6, #1
 80012f6:	2b1f      	cmp	r3, #31
 80012f8:	dd00      	ble.n	80012fc <__aeabi_dadd+0xec>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x2d0>
 80012fc:	2220      	movs	r2, #32
 80012fe:	0038      	movs	r0, r7
 8001300:	0029      	movs	r1, r5
 8001302:	1ad2      	subs	r2, r2, r3
 8001304:	40d8      	lsrs	r0, r3
 8001306:	4091      	lsls	r1, r2
 8001308:	4097      	lsls	r7, r2
 800130a:	002c      	movs	r4, r5
 800130c:	4301      	orrs	r1, r0
 800130e:	1e78      	subs	r0, r7, #1
 8001310:	4187      	sbcs	r7, r0
 8001312:	40dc      	lsrs	r4, r3
 8001314:	2600      	movs	r6, #0
 8001316:	430f      	orrs	r7, r1
 8001318:	077b      	lsls	r3, r7, #29
 800131a:	d009      	beq.n	8001330 <__aeabi_dadd+0x120>
 800131c:	230f      	movs	r3, #15
 800131e:	403b      	ands	r3, r7
 8001320:	2b04      	cmp	r3, #4
 8001322:	d005      	beq.n	8001330 <__aeabi_dadd+0x120>
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	42bb      	cmp	r3, r7
 8001328:	41bf      	sbcs	r7, r7
 800132a:	427f      	negs	r7, r7
 800132c:	19e4      	adds	r4, r4, r7
 800132e:	001f      	movs	r7, r3
 8001330:	0223      	lsls	r3, r4, #8
 8001332:	d52c      	bpl.n	800138e <__aeabi_dadd+0x17e>
 8001334:	4b96      	ldr	r3, [pc, #600]	; (8001590 <__aeabi_dadd+0x380>)
 8001336:	3601      	adds	r6, #1
 8001338:	429e      	cmp	r6, r3
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x12e>
 800133c:	e09a      	b.n	8001474 <__aeabi_dadd+0x264>
 800133e:	4645      	mov	r5, r8
 8001340:	4b94      	ldr	r3, [pc, #592]	; (8001594 <__aeabi_dadd+0x384>)
 8001342:	08ff      	lsrs	r7, r7, #3
 8001344:	401c      	ands	r4, r3
 8001346:	0760      	lsls	r0, r4, #29
 8001348:	0576      	lsls	r6, r6, #21
 800134a:	0264      	lsls	r4, r4, #9
 800134c:	4307      	orrs	r7, r0
 800134e:	0b24      	lsrs	r4, r4, #12
 8001350:	0d76      	lsrs	r6, r6, #21
 8001352:	2100      	movs	r1, #0
 8001354:	0324      	lsls	r4, r4, #12
 8001356:	0b23      	lsrs	r3, r4, #12
 8001358:	0d0c      	lsrs	r4, r1, #20
 800135a:	4a8f      	ldr	r2, [pc, #572]	; (8001598 <__aeabi_dadd+0x388>)
 800135c:	0524      	lsls	r4, r4, #20
 800135e:	431c      	orrs	r4, r3
 8001360:	4014      	ands	r4, r2
 8001362:	0533      	lsls	r3, r6, #20
 8001364:	4323      	orrs	r3, r4
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	07ed      	lsls	r5, r5, #31
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	432b      	orrs	r3, r5
 800136e:	0038      	movs	r0, r7
 8001370:	0019      	movs	r1, r3
 8001372:	bc3c      	pop	{r2, r3, r4, r5}
 8001374:	4690      	mov	r8, r2
 8001376:	4699      	mov	r9, r3
 8001378:	46a2      	mov	sl, r4
 800137a:	46ab      	mov	fp, r5
 800137c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800137e:	4664      	mov	r4, ip
 8001380:	4304      	orrs	r4, r0
 8001382:	d100      	bne.n	8001386 <__aeabi_dadd+0x176>
 8001384:	e211      	b.n	80017aa <__aeabi_dadd+0x59a>
 8001386:	0004      	movs	r4, r0
 8001388:	4667      	mov	r7, ip
 800138a:	077b      	lsls	r3, r7, #29
 800138c:	d1c6      	bne.n	800131c <__aeabi_dadd+0x10c>
 800138e:	4645      	mov	r5, r8
 8001390:	0760      	lsls	r0, r4, #29
 8001392:	08ff      	lsrs	r7, r7, #3
 8001394:	4307      	orrs	r7, r0
 8001396:	08e4      	lsrs	r4, r4, #3
 8001398:	4b7d      	ldr	r3, [pc, #500]	; (8001590 <__aeabi_dadd+0x380>)
 800139a:	429e      	cmp	r6, r3
 800139c:	d030      	beq.n	8001400 <__aeabi_dadd+0x1f0>
 800139e:	0324      	lsls	r4, r4, #12
 80013a0:	0576      	lsls	r6, r6, #21
 80013a2:	0b24      	lsrs	r4, r4, #12
 80013a4:	0d76      	lsrs	r6, r6, #21
 80013a6:	e7d4      	b.n	8001352 <__aeabi_dadd+0x142>
 80013a8:	1a33      	subs	r3, r6, r0
 80013aa:	469a      	mov	sl, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd78      	ble.n	80014a2 <__aeabi_dadd+0x292>
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d031      	beq.n	8001418 <__aeabi_dadd+0x208>
 80013b4:	4876      	ldr	r0, [pc, #472]	; (8001590 <__aeabi_dadd+0x380>)
 80013b6:	4286      	cmp	r6, r0
 80013b8:	d0ae      	beq.n	8001318 <__aeabi_dadd+0x108>
 80013ba:	2080      	movs	r0, #128	; 0x80
 80013bc:	0400      	lsls	r0, r0, #16
 80013be:	4301      	orrs	r1, r0
 80013c0:	4653      	mov	r3, sl
 80013c2:	2b38      	cmp	r3, #56	; 0x38
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_dadd+0x1b8>
 80013c6:	e0e9      	b.n	800159c <__aeabi_dadd+0x38c>
 80013c8:	430a      	orrs	r2, r1
 80013ca:	1e51      	subs	r1, r2, #1
 80013cc:	418a      	sbcs	r2, r1
 80013ce:	2100      	movs	r1, #0
 80013d0:	19d2      	adds	r2, r2, r7
 80013d2:	42ba      	cmp	r2, r7
 80013d4:	41bf      	sbcs	r7, r7
 80013d6:	1909      	adds	r1, r1, r4
 80013d8:	427c      	negs	r4, r7
 80013da:	0017      	movs	r7, r2
 80013dc:	190c      	adds	r4, r1, r4
 80013de:	0223      	lsls	r3, r4, #8
 80013e0:	d5d3      	bpl.n	800138a <__aeabi_dadd+0x17a>
 80013e2:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <__aeabi_dadd+0x380>)
 80013e4:	3601      	adds	r6, #1
 80013e6:	429e      	cmp	r6, r3
 80013e8:	d100      	bne.n	80013ec <__aeabi_dadd+0x1dc>
 80013ea:	e13a      	b.n	8001662 <__aeabi_dadd+0x452>
 80013ec:	2001      	movs	r0, #1
 80013ee:	4b69      	ldr	r3, [pc, #420]	; (8001594 <__aeabi_dadd+0x384>)
 80013f0:	401c      	ands	r4, r3
 80013f2:	087b      	lsrs	r3, r7, #1
 80013f4:	4007      	ands	r7, r0
 80013f6:	431f      	orrs	r7, r3
 80013f8:	07e0      	lsls	r0, r4, #31
 80013fa:	4307      	orrs	r7, r0
 80013fc:	0864      	lsrs	r4, r4, #1
 80013fe:	e78b      	b.n	8001318 <__aeabi_dadd+0x108>
 8001400:	0023      	movs	r3, r4
 8001402:	433b      	orrs	r3, r7
 8001404:	d100      	bne.n	8001408 <__aeabi_dadd+0x1f8>
 8001406:	e1cb      	b.n	80017a0 <__aeabi_dadd+0x590>
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	0312      	lsls	r2, r2, #12
 800140c:	4314      	orrs	r4, r2
 800140e:	0324      	lsls	r4, r4, #12
 8001410:	0b24      	lsrs	r4, r4, #12
 8001412:	e79e      	b.n	8001352 <__aeabi_dadd+0x142>
 8001414:	002e      	movs	r6, r5
 8001416:	e77f      	b.n	8001318 <__aeabi_dadd+0x108>
 8001418:	0008      	movs	r0, r1
 800141a:	4310      	orrs	r0, r2
 800141c:	d100      	bne.n	8001420 <__aeabi_dadd+0x210>
 800141e:	e0b4      	b.n	800158a <__aeabi_dadd+0x37a>
 8001420:	1e58      	subs	r0, r3, #1
 8001422:	2800      	cmp	r0, #0
 8001424:	d000      	beq.n	8001428 <__aeabi_dadd+0x218>
 8001426:	e0de      	b.n	80015e6 <__aeabi_dadd+0x3d6>
 8001428:	18ba      	adds	r2, r7, r2
 800142a:	42ba      	cmp	r2, r7
 800142c:	419b      	sbcs	r3, r3
 800142e:	1864      	adds	r4, r4, r1
 8001430:	425b      	negs	r3, r3
 8001432:	18e4      	adds	r4, r4, r3
 8001434:	0017      	movs	r7, r2
 8001436:	2601      	movs	r6, #1
 8001438:	0223      	lsls	r3, r4, #8
 800143a:	d5a6      	bpl.n	800138a <__aeabi_dadd+0x17a>
 800143c:	2602      	movs	r6, #2
 800143e:	e7d5      	b.n	80013ec <__aeabi_dadd+0x1dc>
 8001440:	2d00      	cmp	r5, #0
 8001442:	d16e      	bne.n	8001522 <__aeabi_dadd+0x312>
 8001444:	1c70      	adds	r0, r6, #1
 8001446:	0540      	lsls	r0, r0, #21
 8001448:	0d40      	lsrs	r0, r0, #21
 800144a:	2801      	cmp	r0, #1
 800144c:	dc00      	bgt.n	8001450 <__aeabi_dadd+0x240>
 800144e:	e0f9      	b.n	8001644 <__aeabi_dadd+0x434>
 8001450:	1ab8      	subs	r0, r7, r2
 8001452:	4684      	mov	ip, r0
 8001454:	4287      	cmp	r7, r0
 8001456:	4180      	sbcs	r0, r0
 8001458:	1ae5      	subs	r5, r4, r3
 800145a:	4240      	negs	r0, r0
 800145c:	1a2d      	subs	r5, r5, r0
 800145e:	0228      	lsls	r0, r5, #8
 8001460:	d400      	bmi.n	8001464 <__aeabi_dadd+0x254>
 8001462:	e089      	b.n	8001578 <__aeabi_dadd+0x368>
 8001464:	1bd7      	subs	r7, r2, r7
 8001466:	42ba      	cmp	r2, r7
 8001468:	4192      	sbcs	r2, r2
 800146a:	1b1c      	subs	r4, r3, r4
 800146c:	4252      	negs	r2, r2
 800146e:	1aa5      	subs	r5, r4, r2
 8001470:	46d8      	mov	r8, fp
 8001472:	e729      	b.n	80012c8 <__aeabi_dadd+0xb8>
 8001474:	4645      	mov	r5, r8
 8001476:	2400      	movs	r4, #0
 8001478:	2700      	movs	r7, #0
 800147a:	e76a      	b.n	8001352 <__aeabi_dadd+0x142>
 800147c:	4c45      	ldr	r4, [pc, #276]	; (8001594 <__aeabi_dadd+0x384>)
 800147e:	1af6      	subs	r6, r6, r3
 8001480:	402c      	ands	r4, r5
 8001482:	e749      	b.n	8001318 <__aeabi_dadd+0x108>
 8001484:	003d      	movs	r5, r7
 8001486:	3828      	subs	r0, #40	; 0x28
 8001488:	4085      	lsls	r5, r0
 800148a:	2700      	movs	r7, #0
 800148c:	e72e      	b.n	80012ec <__aeabi_dadd+0xdc>
 800148e:	0038      	movs	r0, r7
 8001490:	f001 fcf0 	bl	8002e74 <__clzsi2>
 8001494:	3020      	adds	r0, #32
 8001496:	e71d      	b.n	80012d4 <__aeabi_dadd+0xc4>
 8001498:	430a      	orrs	r2, r1
 800149a:	1e51      	subs	r1, r2, #1
 800149c:	418a      	sbcs	r2, r1
 800149e:	2100      	movs	r1, #0
 80014a0:	e707      	b.n	80012b2 <__aeabi_dadd+0xa2>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d000      	beq.n	80014a8 <__aeabi_dadd+0x298>
 80014a6:	e0f3      	b.n	8001690 <__aeabi_dadd+0x480>
 80014a8:	1c70      	adds	r0, r6, #1
 80014aa:	0543      	lsls	r3, r0, #21
 80014ac:	0d5b      	lsrs	r3, r3, #21
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	dc00      	bgt.n	80014b4 <__aeabi_dadd+0x2a4>
 80014b2:	e0ad      	b.n	8001610 <__aeabi_dadd+0x400>
 80014b4:	4b36      	ldr	r3, [pc, #216]	; (8001590 <__aeabi_dadd+0x380>)
 80014b6:	4298      	cmp	r0, r3
 80014b8:	d100      	bne.n	80014bc <__aeabi_dadd+0x2ac>
 80014ba:	e0d1      	b.n	8001660 <__aeabi_dadd+0x450>
 80014bc:	18ba      	adds	r2, r7, r2
 80014be:	42ba      	cmp	r2, r7
 80014c0:	41bf      	sbcs	r7, r7
 80014c2:	1864      	adds	r4, r4, r1
 80014c4:	427f      	negs	r7, r7
 80014c6:	19e4      	adds	r4, r4, r7
 80014c8:	07e7      	lsls	r7, r4, #31
 80014ca:	0852      	lsrs	r2, r2, #1
 80014cc:	4317      	orrs	r7, r2
 80014ce:	0864      	lsrs	r4, r4, #1
 80014d0:	0006      	movs	r6, r0
 80014d2:	e721      	b.n	8001318 <__aeabi_dadd+0x108>
 80014d4:	482e      	ldr	r0, [pc, #184]	; (8001590 <__aeabi_dadd+0x380>)
 80014d6:	4285      	cmp	r5, r0
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0x2cc>
 80014da:	e093      	b.n	8001604 <__aeabi_dadd+0x3f4>
 80014dc:	001d      	movs	r5, r3
 80014de:	e6d0      	b.n	8001282 <__aeabi_dadd+0x72>
 80014e0:	0029      	movs	r1, r5
 80014e2:	3e1f      	subs	r6, #31
 80014e4:	40f1      	lsrs	r1, r6
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x2dc>
 80014ea:	e08d      	b.n	8001608 <__aeabi_dadd+0x3f8>
 80014ec:	2240      	movs	r2, #64	; 0x40
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	409d      	lsls	r5, r3
 80014f2:	432f      	orrs	r7, r5
 80014f4:	1e7d      	subs	r5, r7, #1
 80014f6:	41af      	sbcs	r7, r5
 80014f8:	2400      	movs	r4, #0
 80014fa:	430f      	orrs	r7, r1
 80014fc:	2600      	movs	r6, #0
 80014fe:	e744      	b.n	800138a <__aeabi_dadd+0x17a>
 8001500:	002b      	movs	r3, r5
 8001502:	0008      	movs	r0, r1
 8001504:	3b20      	subs	r3, #32
 8001506:	40d8      	lsrs	r0, r3
 8001508:	0003      	movs	r3, r0
 800150a:	2d20      	cmp	r5, #32
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x300>
 800150e:	e07d      	b.n	800160c <__aeabi_dadd+0x3fc>
 8001510:	2040      	movs	r0, #64	; 0x40
 8001512:	1b45      	subs	r5, r0, r5
 8001514:	40a9      	lsls	r1, r5
 8001516:	430a      	orrs	r2, r1
 8001518:	1e51      	subs	r1, r2, #1
 800151a:	418a      	sbcs	r2, r1
 800151c:	2100      	movs	r1, #0
 800151e:	431a      	orrs	r2, r3
 8001520:	e6c7      	b.n	80012b2 <__aeabi_dadd+0xa2>
 8001522:	2e00      	cmp	r6, #0
 8001524:	d050      	beq.n	80015c8 <__aeabi_dadd+0x3b8>
 8001526:	4e1a      	ldr	r6, [pc, #104]	; (8001590 <__aeabi_dadd+0x380>)
 8001528:	42b0      	cmp	r0, r6
 800152a:	d057      	beq.n	80015dc <__aeabi_dadd+0x3cc>
 800152c:	2680      	movs	r6, #128	; 0x80
 800152e:	426b      	negs	r3, r5
 8001530:	4699      	mov	r9, r3
 8001532:	0436      	lsls	r6, r6, #16
 8001534:	4334      	orrs	r4, r6
 8001536:	464b      	mov	r3, r9
 8001538:	2b38      	cmp	r3, #56	; 0x38
 800153a:	dd00      	ble.n	800153e <__aeabi_dadd+0x32e>
 800153c:	e0d6      	b.n	80016ec <__aeabi_dadd+0x4dc>
 800153e:	2b1f      	cmp	r3, #31
 8001540:	dd00      	ble.n	8001544 <__aeabi_dadd+0x334>
 8001542:	e135      	b.n	80017b0 <__aeabi_dadd+0x5a0>
 8001544:	2620      	movs	r6, #32
 8001546:	1af5      	subs	r5, r6, r3
 8001548:	0026      	movs	r6, r4
 800154a:	40ae      	lsls	r6, r5
 800154c:	46b2      	mov	sl, r6
 800154e:	003e      	movs	r6, r7
 8001550:	40de      	lsrs	r6, r3
 8001552:	46ac      	mov	ip, r5
 8001554:	0035      	movs	r5, r6
 8001556:	4656      	mov	r6, sl
 8001558:	432e      	orrs	r6, r5
 800155a:	4665      	mov	r5, ip
 800155c:	40af      	lsls	r7, r5
 800155e:	1e7d      	subs	r5, r7, #1
 8001560:	41af      	sbcs	r7, r5
 8001562:	40dc      	lsrs	r4, r3
 8001564:	4337      	orrs	r7, r6
 8001566:	1bd7      	subs	r7, r2, r7
 8001568:	42ba      	cmp	r2, r7
 800156a:	4192      	sbcs	r2, r2
 800156c:	1b0c      	subs	r4, r1, r4
 800156e:	4252      	negs	r2, r2
 8001570:	1aa4      	subs	r4, r4, r2
 8001572:	0006      	movs	r6, r0
 8001574:	46d8      	mov	r8, fp
 8001576:	e6a3      	b.n	80012c0 <__aeabi_dadd+0xb0>
 8001578:	4664      	mov	r4, ip
 800157a:	4667      	mov	r7, ip
 800157c:	432c      	orrs	r4, r5
 800157e:	d000      	beq.n	8001582 <__aeabi_dadd+0x372>
 8001580:	e6a2      	b.n	80012c8 <__aeabi_dadd+0xb8>
 8001582:	2500      	movs	r5, #0
 8001584:	2600      	movs	r6, #0
 8001586:	2700      	movs	r7, #0
 8001588:	e706      	b.n	8001398 <__aeabi_dadd+0x188>
 800158a:	001e      	movs	r6, r3
 800158c:	e6c4      	b.n	8001318 <__aeabi_dadd+0x108>
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	000007ff 	.word	0x000007ff
 8001594:	ff7fffff 	.word	0xff7fffff
 8001598:	800fffff 	.word	0x800fffff
 800159c:	2b1f      	cmp	r3, #31
 800159e:	dc63      	bgt.n	8001668 <__aeabi_dadd+0x458>
 80015a0:	2020      	movs	r0, #32
 80015a2:	1ac3      	subs	r3, r0, r3
 80015a4:	0008      	movs	r0, r1
 80015a6:	4098      	lsls	r0, r3
 80015a8:	469c      	mov	ip, r3
 80015aa:	4683      	mov	fp, r0
 80015ac:	4653      	mov	r3, sl
 80015ae:	0010      	movs	r0, r2
 80015b0:	40d8      	lsrs	r0, r3
 80015b2:	0003      	movs	r3, r0
 80015b4:	4658      	mov	r0, fp
 80015b6:	4318      	orrs	r0, r3
 80015b8:	4663      	mov	r3, ip
 80015ba:	409a      	lsls	r2, r3
 80015bc:	1e53      	subs	r3, r2, #1
 80015be:	419a      	sbcs	r2, r3
 80015c0:	4653      	mov	r3, sl
 80015c2:	4302      	orrs	r2, r0
 80015c4:	40d9      	lsrs	r1, r3
 80015c6:	e703      	b.n	80013d0 <__aeabi_dadd+0x1c0>
 80015c8:	0026      	movs	r6, r4
 80015ca:	433e      	orrs	r6, r7
 80015cc:	d006      	beq.n	80015dc <__aeabi_dadd+0x3cc>
 80015ce:	43eb      	mvns	r3, r5
 80015d0:	4699      	mov	r9, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0c7      	beq.n	8001566 <__aeabi_dadd+0x356>
 80015d6:	4e94      	ldr	r6, [pc, #592]	; (8001828 <__aeabi_dadd+0x618>)
 80015d8:	42b0      	cmp	r0, r6
 80015da:	d1ac      	bne.n	8001536 <__aeabi_dadd+0x326>
 80015dc:	000c      	movs	r4, r1
 80015de:	0017      	movs	r7, r2
 80015e0:	0006      	movs	r6, r0
 80015e2:	46d8      	mov	r8, fp
 80015e4:	e698      	b.n	8001318 <__aeabi_dadd+0x108>
 80015e6:	4b90      	ldr	r3, [pc, #576]	; (8001828 <__aeabi_dadd+0x618>)
 80015e8:	459a      	cmp	sl, r3
 80015ea:	d00b      	beq.n	8001604 <__aeabi_dadd+0x3f4>
 80015ec:	4682      	mov	sl, r0
 80015ee:	e6e7      	b.n	80013c0 <__aeabi_dadd+0x1b0>
 80015f0:	2800      	cmp	r0, #0
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x3e6>
 80015f4:	e09e      	b.n	8001734 <__aeabi_dadd+0x524>
 80015f6:	0018      	movs	r0, r3
 80015f8:	4310      	orrs	r0, r2
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x3ee>
 80015fc:	e0e9      	b.n	80017d2 <__aeabi_dadd+0x5c2>
 80015fe:	001c      	movs	r4, r3
 8001600:	0017      	movs	r7, r2
 8001602:	46d8      	mov	r8, fp
 8001604:	4e88      	ldr	r6, [pc, #544]	; (8001828 <__aeabi_dadd+0x618>)
 8001606:	e687      	b.n	8001318 <__aeabi_dadd+0x108>
 8001608:	2500      	movs	r5, #0
 800160a:	e772      	b.n	80014f2 <__aeabi_dadd+0x2e2>
 800160c:	2100      	movs	r1, #0
 800160e:	e782      	b.n	8001516 <__aeabi_dadd+0x306>
 8001610:	0023      	movs	r3, r4
 8001612:	433b      	orrs	r3, r7
 8001614:	2e00      	cmp	r6, #0
 8001616:	d000      	beq.n	800161a <__aeabi_dadd+0x40a>
 8001618:	e0ab      	b.n	8001772 <__aeabi_dadd+0x562>
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_dadd+0x410>
 800161e:	e0e7      	b.n	80017f0 <__aeabi_dadd+0x5e0>
 8001620:	000b      	movs	r3, r1
 8001622:	4313      	orrs	r3, r2
 8001624:	d100      	bne.n	8001628 <__aeabi_dadd+0x418>
 8001626:	e677      	b.n	8001318 <__aeabi_dadd+0x108>
 8001628:	18ba      	adds	r2, r7, r2
 800162a:	42ba      	cmp	r2, r7
 800162c:	41bf      	sbcs	r7, r7
 800162e:	1864      	adds	r4, r4, r1
 8001630:	427f      	negs	r7, r7
 8001632:	19e4      	adds	r4, r4, r7
 8001634:	0223      	lsls	r3, r4, #8
 8001636:	d400      	bmi.n	800163a <__aeabi_dadd+0x42a>
 8001638:	e0f2      	b.n	8001820 <__aeabi_dadd+0x610>
 800163a:	4b7c      	ldr	r3, [pc, #496]	; (800182c <__aeabi_dadd+0x61c>)
 800163c:	0017      	movs	r7, r2
 800163e:	401c      	ands	r4, r3
 8001640:	0006      	movs	r6, r0
 8001642:	e669      	b.n	8001318 <__aeabi_dadd+0x108>
 8001644:	0020      	movs	r0, r4
 8001646:	4338      	orrs	r0, r7
 8001648:	2e00      	cmp	r6, #0
 800164a:	d1d1      	bne.n	80015f0 <__aeabi_dadd+0x3e0>
 800164c:	2800      	cmp	r0, #0
 800164e:	d15b      	bne.n	8001708 <__aeabi_dadd+0x4f8>
 8001650:	001c      	movs	r4, r3
 8001652:	4314      	orrs	r4, r2
 8001654:	d100      	bne.n	8001658 <__aeabi_dadd+0x448>
 8001656:	e0a8      	b.n	80017aa <__aeabi_dadd+0x59a>
 8001658:	001c      	movs	r4, r3
 800165a:	0017      	movs	r7, r2
 800165c:	46d8      	mov	r8, fp
 800165e:	e65b      	b.n	8001318 <__aeabi_dadd+0x108>
 8001660:	0006      	movs	r6, r0
 8001662:	2400      	movs	r4, #0
 8001664:	2700      	movs	r7, #0
 8001666:	e697      	b.n	8001398 <__aeabi_dadd+0x188>
 8001668:	4650      	mov	r0, sl
 800166a:	000b      	movs	r3, r1
 800166c:	3820      	subs	r0, #32
 800166e:	40c3      	lsrs	r3, r0
 8001670:	4699      	mov	r9, r3
 8001672:	4653      	mov	r3, sl
 8001674:	2b20      	cmp	r3, #32
 8001676:	d100      	bne.n	800167a <__aeabi_dadd+0x46a>
 8001678:	e095      	b.n	80017a6 <__aeabi_dadd+0x596>
 800167a:	2340      	movs	r3, #64	; 0x40
 800167c:	4650      	mov	r0, sl
 800167e:	1a1b      	subs	r3, r3, r0
 8001680:	4099      	lsls	r1, r3
 8001682:	430a      	orrs	r2, r1
 8001684:	1e51      	subs	r1, r2, #1
 8001686:	418a      	sbcs	r2, r1
 8001688:	464b      	mov	r3, r9
 800168a:	2100      	movs	r1, #0
 800168c:	431a      	orrs	r2, r3
 800168e:	e69f      	b.n	80013d0 <__aeabi_dadd+0x1c0>
 8001690:	2e00      	cmp	r6, #0
 8001692:	d130      	bne.n	80016f6 <__aeabi_dadd+0x4e6>
 8001694:	0026      	movs	r6, r4
 8001696:	433e      	orrs	r6, r7
 8001698:	d067      	beq.n	800176a <__aeabi_dadd+0x55a>
 800169a:	43db      	mvns	r3, r3
 800169c:	469a      	mov	sl, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d01c      	beq.n	80016dc <__aeabi_dadd+0x4cc>
 80016a2:	4e61      	ldr	r6, [pc, #388]	; (8001828 <__aeabi_dadd+0x618>)
 80016a4:	42b0      	cmp	r0, r6
 80016a6:	d060      	beq.n	800176a <__aeabi_dadd+0x55a>
 80016a8:	4653      	mov	r3, sl
 80016aa:	2b38      	cmp	r3, #56	; 0x38
 80016ac:	dd00      	ble.n	80016b0 <__aeabi_dadd+0x4a0>
 80016ae:	e096      	b.n	80017de <__aeabi_dadd+0x5ce>
 80016b0:	2b1f      	cmp	r3, #31
 80016b2:	dd00      	ble.n	80016b6 <__aeabi_dadd+0x4a6>
 80016b4:	e09f      	b.n	80017f6 <__aeabi_dadd+0x5e6>
 80016b6:	2620      	movs	r6, #32
 80016b8:	1af3      	subs	r3, r6, r3
 80016ba:	0026      	movs	r6, r4
 80016bc:	409e      	lsls	r6, r3
 80016be:	469c      	mov	ip, r3
 80016c0:	46b3      	mov	fp, r6
 80016c2:	4653      	mov	r3, sl
 80016c4:	003e      	movs	r6, r7
 80016c6:	40de      	lsrs	r6, r3
 80016c8:	0033      	movs	r3, r6
 80016ca:	465e      	mov	r6, fp
 80016cc:	431e      	orrs	r6, r3
 80016ce:	4663      	mov	r3, ip
 80016d0:	409f      	lsls	r7, r3
 80016d2:	1e7b      	subs	r3, r7, #1
 80016d4:	419f      	sbcs	r7, r3
 80016d6:	4653      	mov	r3, sl
 80016d8:	40dc      	lsrs	r4, r3
 80016da:	4337      	orrs	r7, r6
 80016dc:	18bf      	adds	r7, r7, r2
 80016de:	4297      	cmp	r7, r2
 80016e0:	4192      	sbcs	r2, r2
 80016e2:	1864      	adds	r4, r4, r1
 80016e4:	4252      	negs	r2, r2
 80016e6:	18a4      	adds	r4, r4, r2
 80016e8:	0006      	movs	r6, r0
 80016ea:	e678      	b.n	80013de <__aeabi_dadd+0x1ce>
 80016ec:	4327      	orrs	r7, r4
 80016ee:	1e7c      	subs	r4, r7, #1
 80016f0:	41a7      	sbcs	r7, r4
 80016f2:	2400      	movs	r4, #0
 80016f4:	e737      	b.n	8001566 <__aeabi_dadd+0x356>
 80016f6:	4e4c      	ldr	r6, [pc, #304]	; (8001828 <__aeabi_dadd+0x618>)
 80016f8:	42b0      	cmp	r0, r6
 80016fa:	d036      	beq.n	800176a <__aeabi_dadd+0x55a>
 80016fc:	2680      	movs	r6, #128	; 0x80
 80016fe:	425b      	negs	r3, r3
 8001700:	0436      	lsls	r6, r6, #16
 8001702:	469a      	mov	sl, r3
 8001704:	4334      	orrs	r4, r6
 8001706:	e7cf      	b.n	80016a8 <__aeabi_dadd+0x498>
 8001708:	0018      	movs	r0, r3
 800170a:	4310      	orrs	r0, r2
 800170c:	d100      	bne.n	8001710 <__aeabi_dadd+0x500>
 800170e:	e603      	b.n	8001318 <__aeabi_dadd+0x108>
 8001710:	1ab8      	subs	r0, r7, r2
 8001712:	4684      	mov	ip, r0
 8001714:	4567      	cmp	r7, ip
 8001716:	41ad      	sbcs	r5, r5
 8001718:	1ae0      	subs	r0, r4, r3
 800171a:	426d      	negs	r5, r5
 800171c:	1b40      	subs	r0, r0, r5
 800171e:	0205      	lsls	r5, r0, #8
 8001720:	d400      	bmi.n	8001724 <__aeabi_dadd+0x514>
 8001722:	e62c      	b.n	800137e <__aeabi_dadd+0x16e>
 8001724:	1bd7      	subs	r7, r2, r7
 8001726:	42ba      	cmp	r2, r7
 8001728:	4192      	sbcs	r2, r2
 800172a:	1b1c      	subs	r4, r3, r4
 800172c:	4252      	negs	r2, r2
 800172e:	1aa4      	subs	r4, r4, r2
 8001730:	46d8      	mov	r8, fp
 8001732:	e5f1      	b.n	8001318 <__aeabi_dadd+0x108>
 8001734:	0018      	movs	r0, r3
 8001736:	4310      	orrs	r0, r2
 8001738:	d100      	bne.n	800173c <__aeabi_dadd+0x52c>
 800173a:	e763      	b.n	8001604 <__aeabi_dadd+0x3f4>
 800173c:	08f8      	lsrs	r0, r7, #3
 800173e:	0767      	lsls	r7, r4, #29
 8001740:	4307      	orrs	r7, r0
 8001742:	2080      	movs	r0, #128	; 0x80
 8001744:	08e4      	lsrs	r4, r4, #3
 8001746:	0300      	lsls	r0, r0, #12
 8001748:	4204      	tst	r4, r0
 800174a:	d008      	beq.n	800175e <__aeabi_dadd+0x54e>
 800174c:	08dd      	lsrs	r5, r3, #3
 800174e:	4205      	tst	r5, r0
 8001750:	d105      	bne.n	800175e <__aeabi_dadd+0x54e>
 8001752:	08d2      	lsrs	r2, r2, #3
 8001754:	0759      	lsls	r1, r3, #29
 8001756:	4311      	orrs	r1, r2
 8001758:	000f      	movs	r7, r1
 800175a:	002c      	movs	r4, r5
 800175c:	46d8      	mov	r8, fp
 800175e:	0f7b      	lsrs	r3, r7, #29
 8001760:	00e4      	lsls	r4, r4, #3
 8001762:	431c      	orrs	r4, r3
 8001764:	00ff      	lsls	r7, r7, #3
 8001766:	4e30      	ldr	r6, [pc, #192]	; (8001828 <__aeabi_dadd+0x618>)
 8001768:	e5d6      	b.n	8001318 <__aeabi_dadd+0x108>
 800176a:	000c      	movs	r4, r1
 800176c:	0017      	movs	r7, r2
 800176e:	0006      	movs	r6, r0
 8001770:	e5d2      	b.n	8001318 <__aeabi_dadd+0x108>
 8001772:	2b00      	cmp	r3, #0
 8001774:	d038      	beq.n	80017e8 <__aeabi_dadd+0x5d8>
 8001776:	000b      	movs	r3, r1
 8001778:	4313      	orrs	r3, r2
 800177a:	d100      	bne.n	800177e <__aeabi_dadd+0x56e>
 800177c:	e742      	b.n	8001604 <__aeabi_dadd+0x3f4>
 800177e:	08f8      	lsrs	r0, r7, #3
 8001780:	0767      	lsls	r7, r4, #29
 8001782:	4307      	orrs	r7, r0
 8001784:	2080      	movs	r0, #128	; 0x80
 8001786:	08e4      	lsrs	r4, r4, #3
 8001788:	0300      	lsls	r0, r0, #12
 800178a:	4204      	tst	r4, r0
 800178c:	d0e7      	beq.n	800175e <__aeabi_dadd+0x54e>
 800178e:	08cb      	lsrs	r3, r1, #3
 8001790:	4203      	tst	r3, r0
 8001792:	d1e4      	bne.n	800175e <__aeabi_dadd+0x54e>
 8001794:	08d2      	lsrs	r2, r2, #3
 8001796:	0749      	lsls	r1, r1, #29
 8001798:	4311      	orrs	r1, r2
 800179a:	000f      	movs	r7, r1
 800179c:	001c      	movs	r4, r3
 800179e:	e7de      	b.n	800175e <__aeabi_dadd+0x54e>
 80017a0:	2700      	movs	r7, #0
 80017a2:	2400      	movs	r4, #0
 80017a4:	e5d5      	b.n	8001352 <__aeabi_dadd+0x142>
 80017a6:	2100      	movs	r1, #0
 80017a8:	e76b      	b.n	8001682 <__aeabi_dadd+0x472>
 80017aa:	2500      	movs	r5, #0
 80017ac:	2700      	movs	r7, #0
 80017ae:	e5f3      	b.n	8001398 <__aeabi_dadd+0x188>
 80017b0:	464e      	mov	r6, r9
 80017b2:	0025      	movs	r5, r4
 80017b4:	3e20      	subs	r6, #32
 80017b6:	40f5      	lsrs	r5, r6
 80017b8:	464b      	mov	r3, r9
 80017ba:	002e      	movs	r6, r5
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d02d      	beq.n	800181c <__aeabi_dadd+0x60c>
 80017c0:	2540      	movs	r5, #64	; 0x40
 80017c2:	1aed      	subs	r5, r5, r3
 80017c4:	40ac      	lsls	r4, r5
 80017c6:	4327      	orrs	r7, r4
 80017c8:	1e7c      	subs	r4, r7, #1
 80017ca:	41a7      	sbcs	r7, r4
 80017cc:	2400      	movs	r4, #0
 80017ce:	4337      	orrs	r7, r6
 80017d0:	e6c9      	b.n	8001566 <__aeabi_dadd+0x356>
 80017d2:	2480      	movs	r4, #128	; 0x80
 80017d4:	2500      	movs	r5, #0
 80017d6:	0324      	lsls	r4, r4, #12
 80017d8:	4e13      	ldr	r6, [pc, #76]	; (8001828 <__aeabi_dadd+0x618>)
 80017da:	2700      	movs	r7, #0
 80017dc:	e5dc      	b.n	8001398 <__aeabi_dadd+0x188>
 80017de:	4327      	orrs	r7, r4
 80017e0:	1e7c      	subs	r4, r7, #1
 80017e2:	41a7      	sbcs	r7, r4
 80017e4:	2400      	movs	r4, #0
 80017e6:	e779      	b.n	80016dc <__aeabi_dadd+0x4cc>
 80017e8:	000c      	movs	r4, r1
 80017ea:	0017      	movs	r7, r2
 80017ec:	4e0e      	ldr	r6, [pc, #56]	; (8001828 <__aeabi_dadd+0x618>)
 80017ee:	e593      	b.n	8001318 <__aeabi_dadd+0x108>
 80017f0:	000c      	movs	r4, r1
 80017f2:	0017      	movs	r7, r2
 80017f4:	e590      	b.n	8001318 <__aeabi_dadd+0x108>
 80017f6:	4656      	mov	r6, sl
 80017f8:	0023      	movs	r3, r4
 80017fa:	3e20      	subs	r6, #32
 80017fc:	40f3      	lsrs	r3, r6
 80017fe:	4699      	mov	r9, r3
 8001800:	4653      	mov	r3, sl
 8001802:	2b20      	cmp	r3, #32
 8001804:	d00e      	beq.n	8001824 <__aeabi_dadd+0x614>
 8001806:	2340      	movs	r3, #64	; 0x40
 8001808:	4656      	mov	r6, sl
 800180a:	1b9b      	subs	r3, r3, r6
 800180c:	409c      	lsls	r4, r3
 800180e:	4327      	orrs	r7, r4
 8001810:	1e7c      	subs	r4, r7, #1
 8001812:	41a7      	sbcs	r7, r4
 8001814:	464b      	mov	r3, r9
 8001816:	2400      	movs	r4, #0
 8001818:	431f      	orrs	r7, r3
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0x4cc>
 800181c:	2400      	movs	r4, #0
 800181e:	e7d2      	b.n	80017c6 <__aeabi_dadd+0x5b6>
 8001820:	0017      	movs	r7, r2
 8001822:	e5b2      	b.n	800138a <__aeabi_dadd+0x17a>
 8001824:	2400      	movs	r4, #0
 8001826:	e7f2      	b.n	800180e <__aeabi_dadd+0x5fe>
 8001828:	000007ff 	.word	0x000007ff
 800182c:	ff7fffff 	.word	0xff7fffff

08001830 <__aeabi_ddiv>:
 8001830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001832:	4657      	mov	r7, sl
 8001834:	4645      	mov	r5, r8
 8001836:	46de      	mov	lr, fp
 8001838:	464e      	mov	r6, r9
 800183a:	b5e0      	push	{r5, r6, r7, lr}
 800183c:	004c      	lsls	r4, r1, #1
 800183e:	030e      	lsls	r6, r1, #12
 8001840:	b087      	sub	sp, #28
 8001842:	4683      	mov	fp, r0
 8001844:	4692      	mov	sl, r2
 8001846:	001d      	movs	r5, r3
 8001848:	4680      	mov	r8, r0
 800184a:	0b36      	lsrs	r6, r6, #12
 800184c:	0d64      	lsrs	r4, r4, #21
 800184e:	0fcf      	lsrs	r7, r1, #31
 8001850:	2c00      	cmp	r4, #0
 8001852:	d04f      	beq.n	80018f4 <__aeabi_ddiv+0xc4>
 8001854:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <__aeabi_ddiv+0x1e4>)
 8001856:	429c      	cmp	r4, r3
 8001858:	d035      	beq.n	80018c6 <__aeabi_ddiv+0x96>
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	0f42      	lsrs	r2, r0, #29
 800185e:	041b      	lsls	r3, r3, #16
 8001860:	00f6      	lsls	r6, r6, #3
 8001862:	4313      	orrs	r3, r2
 8001864:	4333      	orrs	r3, r6
 8001866:	4699      	mov	r9, r3
 8001868:	00c3      	lsls	r3, r0, #3
 800186a:	4698      	mov	r8, r3
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <__aeabi_ddiv+0x1e8>)
 800186e:	2600      	movs	r6, #0
 8001870:	469c      	mov	ip, r3
 8001872:	2300      	movs	r3, #0
 8001874:	4464      	add	r4, ip
 8001876:	9303      	str	r3, [sp, #12]
 8001878:	032b      	lsls	r3, r5, #12
 800187a:	0b1b      	lsrs	r3, r3, #12
 800187c:	469b      	mov	fp, r3
 800187e:	006b      	lsls	r3, r5, #1
 8001880:	0fed      	lsrs	r5, r5, #31
 8001882:	4650      	mov	r0, sl
 8001884:	0d5b      	lsrs	r3, r3, #21
 8001886:	9501      	str	r5, [sp, #4]
 8001888:	d05e      	beq.n	8001948 <__aeabi_ddiv+0x118>
 800188a:	4a62      	ldr	r2, [pc, #392]	; (8001a14 <__aeabi_ddiv+0x1e4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d053      	beq.n	8001938 <__aeabi_ddiv+0x108>
 8001890:	465a      	mov	r2, fp
 8001892:	00d1      	lsls	r1, r2, #3
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	0f40      	lsrs	r0, r0, #29
 8001898:	0412      	lsls	r2, r2, #16
 800189a:	4302      	orrs	r2, r0
 800189c:	430a      	orrs	r2, r1
 800189e:	4693      	mov	fp, r2
 80018a0:	4652      	mov	r2, sl
 80018a2:	00d1      	lsls	r1, r2, #3
 80018a4:	4a5c      	ldr	r2, [pc, #368]	; (8001a18 <__aeabi_ddiv+0x1e8>)
 80018a6:	4694      	mov	ip, r2
 80018a8:	2200      	movs	r2, #0
 80018aa:	4463      	add	r3, ip
 80018ac:	0038      	movs	r0, r7
 80018ae:	4068      	eors	r0, r5
 80018b0:	4684      	mov	ip, r0
 80018b2:	9002      	str	r0, [sp, #8]
 80018b4:	1ae4      	subs	r4, r4, r3
 80018b6:	4316      	orrs	r6, r2
 80018b8:	2e0f      	cmp	r6, #15
 80018ba:	d900      	bls.n	80018be <__aeabi_ddiv+0x8e>
 80018bc:	e0b4      	b.n	8001a28 <__aeabi_ddiv+0x1f8>
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <__aeabi_ddiv+0x1ec>)
 80018c0:	00b6      	lsls	r6, r6, #2
 80018c2:	599b      	ldr	r3, [r3, r6]
 80018c4:	469f      	mov	pc, r3
 80018c6:	0003      	movs	r3, r0
 80018c8:	4333      	orrs	r3, r6
 80018ca:	4699      	mov	r9, r3
 80018cc:	d16c      	bne.n	80019a8 <__aeabi_ddiv+0x178>
 80018ce:	2300      	movs	r3, #0
 80018d0:	4698      	mov	r8, r3
 80018d2:	3302      	adds	r3, #2
 80018d4:	2608      	movs	r6, #8
 80018d6:	9303      	str	r3, [sp, #12]
 80018d8:	e7ce      	b.n	8001878 <__aeabi_ddiv+0x48>
 80018da:	46cb      	mov	fp, r9
 80018dc:	4641      	mov	r1, r8
 80018de:	9a03      	ldr	r2, [sp, #12]
 80018e0:	9701      	str	r7, [sp, #4]
 80018e2:	2a02      	cmp	r2, #2
 80018e4:	d165      	bne.n	80019b2 <__aeabi_ddiv+0x182>
 80018e6:	9b01      	ldr	r3, [sp, #4]
 80018e8:	4c4a      	ldr	r4, [pc, #296]	; (8001a14 <__aeabi_ddiv+0x1e4>)
 80018ea:	469c      	mov	ip, r3
 80018ec:	2300      	movs	r3, #0
 80018ee:	2200      	movs	r2, #0
 80018f0:	4698      	mov	r8, r3
 80018f2:	e06b      	b.n	80019cc <__aeabi_ddiv+0x19c>
 80018f4:	0003      	movs	r3, r0
 80018f6:	4333      	orrs	r3, r6
 80018f8:	4699      	mov	r9, r3
 80018fa:	d04e      	beq.n	800199a <__aeabi_ddiv+0x16a>
 80018fc:	2e00      	cmp	r6, #0
 80018fe:	d100      	bne.n	8001902 <__aeabi_ddiv+0xd2>
 8001900:	e1bc      	b.n	8001c7c <__aeabi_ddiv+0x44c>
 8001902:	0030      	movs	r0, r6
 8001904:	f001 fab6 	bl	8002e74 <__clzsi2>
 8001908:	0003      	movs	r3, r0
 800190a:	3b0b      	subs	r3, #11
 800190c:	2b1c      	cmp	r3, #28
 800190e:	dd00      	ble.n	8001912 <__aeabi_ddiv+0xe2>
 8001910:	e1ac      	b.n	8001c6c <__aeabi_ddiv+0x43c>
 8001912:	221d      	movs	r2, #29
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	465a      	mov	r2, fp
 8001918:	0001      	movs	r1, r0
 800191a:	40da      	lsrs	r2, r3
 800191c:	3908      	subs	r1, #8
 800191e:	408e      	lsls	r6, r1
 8001920:	0013      	movs	r3, r2
 8001922:	4333      	orrs	r3, r6
 8001924:	4699      	mov	r9, r3
 8001926:	465b      	mov	r3, fp
 8001928:	408b      	lsls	r3, r1
 800192a:	4698      	mov	r8, r3
 800192c:	2300      	movs	r3, #0
 800192e:	4c3c      	ldr	r4, [pc, #240]	; (8001a20 <__aeabi_ddiv+0x1f0>)
 8001930:	2600      	movs	r6, #0
 8001932:	1a24      	subs	r4, r4, r0
 8001934:	9303      	str	r3, [sp, #12]
 8001936:	e79f      	b.n	8001878 <__aeabi_ddiv+0x48>
 8001938:	4651      	mov	r1, sl
 800193a:	465a      	mov	r2, fp
 800193c:	4311      	orrs	r1, r2
 800193e:	d129      	bne.n	8001994 <__aeabi_ddiv+0x164>
 8001940:	2200      	movs	r2, #0
 8001942:	4693      	mov	fp, r2
 8001944:	3202      	adds	r2, #2
 8001946:	e7b1      	b.n	80018ac <__aeabi_ddiv+0x7c>
 8001948:	4659      	mov	r1, fp
 800194a:	4301      	orrs	r1, r0
 800194c:	d01e      	beq.n	800198c <__aeabi_ddiv+0x15c>
 800194e:	465b      	mov	r3, fp
 8001950:	2b00      	cmp	r3, #0
 8001952:	d100      	bne.n	8001956 <__aeabi_ddiv+0x126>
 8001954:	e19e      	b.n	8001c94 <__aeabi_ddiv+0x464>
 8001956:	4658      	mov	r0, fp
 8001958:	f001 fa8c 	bl	8002e74 <__clzsi2>
 800195c:	0003      	movs	r3, r0
 800195e:	3b0b      	subs	r3, #11
 8001960:	2b1c      	cmp	r3, #28
 8001962:	dd00      	ble.n	8001966 <__aeabi_ddiv+0x136>
 8001964:	e18f      	b.n	8001c86 <__aeabi_ddiv+0x456>
 8001966:	0002      	movs	r2, r0
 8001968:	4659      	mov	r1, fp
 800196a:	3a08      	subs	r2, #8
 800196c:	4091      	lsls	r1, r2
 800196e:	468b      	mov	fp, r1
 8001970:	211d      	movs	r1, #29
 8001972:	1acb      	subs	r3, r1, r3
 8001974:	4651      	mov	r1, sl
 8001976:	40d9      	lsrs	r1, r3
 8001978:	000b      	movs	r3, r1
 800197a:	4659      	mov	r1, fp
 800197c:	430b      	orrs	r3, r1
 800197e:	4651      	mov	r1, sl
 8001980:	469b      	mov	fp, r3
 8001982:	4091      	lsls	r1, r2
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <__aeabi_ddiv+0x1f0>)
 8001986:	2200      	movs	r2, #0
 8001988:	1a1b      	subs	r3, r3, r0
 800198a:	e78f      	b.n	80018ac <__aeabi_ddiv+0x7c>
 800198c:	2300      	movs	r3, #0
 800198e:	2201      	movs	r2, #1
 8001990:	469b      	mov	fp, r3
 8001992:	e78b      	b.n	80018ac <__aeabi_ddiv+0x7c>
 8001994:	4651      	mov	r1, sl
 8001996:	2203      	movs	r2, #3
 8001998:	e788      	b.n	80018ac <__aeabi_ddiv+0x7c>
 800199a:	2300      	movs	r3, #0
 800199c:	4698      	mov	r8, r3
 800199e:	3301      	adds	r3, #1
 80019a0:	2604      	movs	r6, #4
 80019a2:	2400      	movs	r4, #0
 80019a4:	9303      	str	r3, [sp, #12]
 80019a6:	e767      	b.n	8001878 <__aeabi_ddiv+0x48>
 80019a8:	2303      	movs	r3, #3
 80019aa:	46b1      	mov	r9, r6
 80019ac:	9303      	str	r3, [sp, #12]
 80019ae:	260c      	movs	r6, #12
 80019b0:	e762      	b.n	8001878 <__aeabi_ddiv+0x48>
 80019b2:	2a03      	cmp	r2, #3
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x188>
 80019b6:	e25c      	b.n	8001e72 <__aeabi_ddiv+0x642>
 80019b8:	9b01      	ldr	r3, [sp, #4]
 80019ba:	2a01      	cmp	r2, #1
 80019bc:	d000      	beq.n	80019c0 <__aeabi_ddiv+0x190>
 80019be:	e1e4      	b.n	8001d8a <__aeabi_ddiv+0x55a>
 80019c0:	4013      	ands	r3, r2
 80019c2:	469c      	mov	ip, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	2400      	movs	r4, #0
 80019c8:	2200      	movs	r2, #0
 80019ca:	4698      	mov	r8, r3
 80019cc:	2100      	movs	r1, #0
 80019ce:	0312      	lsls	r2, r2, #12
 80019d0:	0b13      	lsrs	r3, r2, #12
 80019d2:	0d0a      	lsrs	r2, r1, #20
 80019d4:	0512      	lsls	r2, r2, #20
 80019d6:	431a      	orrs	r2, r3
 80019d8:	0523      	lsls	r3, r4, #20
 80019da:	4c12      	ldr	r4, [pc, #72]	; (8001a24 <__aeabi_ddiv+0x1f4>)
 80019dc:	4640      	mov	r0, r8
 80019de:	4022      	ands	r2, r4
 80019e0:	4313      	orrs	r3, r2
 80019e2:	4662      	mov	r2, ip
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	07d2      	lsls	r2, r2, #31
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	4313      	orrs	r3, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	b007      	add	sp, #28
 80019f0:	bc3c      	pop	{r2, r3, r4, r5}
 80019f2:	4690      	mov	r8, r2
 80019f4:	4699      	mov	r9, r3
 80019f6:	46a2      	mov	sl, r4
 80019f8:	46ab      	mov	fp, r5
 80019fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fc:	2300      	movs	r3, #0
 80019fe:	2280      	movs	r2, #128	; 0x80
 8001a00:	469c      	mov	ip, r3
 8001a02:	0312      	lsls	r2, r2, #12
 8001a04:	4698      	mov	r8, r3
 8001a06:	4c03      	ldr	r4, [pc, #12]	; (8001a14 <__aeabi_ddiv+0x1e4>)
 8001a08:	e7e0      	b.n	80019cc <__aeabi_ddiv+0x19c>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	4c01      	ldr	r4, [pc, #4]	; (8001a14 <__aeabi_ddiv+0x1e4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4698      	mov	r8, r3
 8001a12:	e7db      	b.n	80019cc <__aeabi_ddiv+0x19c>
 8001a14:	000007ff 	.word	0x000007ff
 8001a18:	fffffc01 	.word	0xfffffc01
 8001a1c:	080096f0 	.word	0x080096f0
 8001a20:	fffffc0d 	.word	0xfffffc0d
 8001a24:	800fffff 	.word	0x800fffff
 8001a28:	45d9      	cmp	r9, fp
 8001a2a:	d900      	bls.n	8001a2e <__aeabi_ddiv+0x1fe>
 8001a2c:	e139      	b.n	8001ca2 <__aeabi_ddiv+0x472>
 8001a2e:	d100      	bne.n	8001a32 <__aeabi_ddiv+0x202>
 8001a30:	e134      	b.n	8001c9c <__aeabi_ddiv+0x46c>
 8001a32:	2300      	movs	r3, #0
 8001a34:	4646      	mov	r6, r8
 8001a36:	464d      	mov	r5, r9
 8001a38:	469a      	mov	sl, r3
 8001a3a:	3c01      	subs	r4, #1
 8001a3c:	465b      	mov	r3, fp
 8001a3e:	0e0a      	lsrs	r2, r1, #24
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	431a      	orrs	r2, r3
 8001a44:	020b      	lsls	r3, r1, #8
 8001a46:	0c17      	lsrs	r7, r2, #16
 8001a48:	9303      	str	r3, [sp, #12]
 8001a4a:	0413      	lsls	r3, r2, #16
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	0039      	movs	r1, r7
 8001a50:	0028      	movs	r0, r5
 8001a52:	4690      	mov	r8, r2
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	f7fe fb69 	bl	800012c <__udivsi3>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	9b01      	ldr	r3, [sp, #4]
 8001a5e:	4683      	mov	fp, r0
 8001a60:	435a      	muls	r2, r3
 8001a62:	0028      	movs	r0, r5
 8001a64:	0039      	movs	r1, r7
 8001a66:	4691      	mov	r9, r2
 8001a68:	f7fe fbe6 	bl	8000238 <__aeabi_uidivmod>
 8001a6c:	0c35      	lsrs	r5, r6, #16
 8001a6e:	0409      	lsls	r1, r1, #16
 8001a70:	430d      	orrs	r5, r1
 8001a72:	45a9      	cmp	r9, r5
 8001a74:	d90d      	bls.n	8001a92 <__aeabi_ddiv+0x262>
 8001a76:	465b      	mov	r3, fp
 8001a78:	4445      	add	r5, r8
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	45a8      	cmp	r8, r5
 8001a7e:	d900      	bls.n	8001a82 <__aeabi_ddiv+0x252>
 8001a80:	e13a      	b.n	8001cf8 <__aeabi_ddiv+0x4c8>
 8001a82:	45a9      	cmp	r9, r5
 8001a84:	d800      	bhi.n	8001a88 <__aeabi_ddiv+0x258>
 8001a86:	e137      	b.n	8001cf8 <__aeabi_ddiv+0x4c8>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	425b      	negs	r3, r3
 8001a8c:	469c      	mov	ip, r3
 8001a8e:	4445      	add	r5, r8
 8001a90:	44e3      	add	fp, ip
 8001a92:	464b      	mov	r3, r9
 8001a94:	1aeb      	subs	r3, r5, r3
 8001a96:	0039      	movs	r1, r7
 8001a98:	0018      	movs	r0, r3
 8001a9a:	9304      	str	r3, [sp, #16]
 8001a9c:	f7fe fb46 	bl	800012c <__udivsi3>
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	0005      	movs	r5, r0
 8001aa4:	4343      	muls	r3, r0
 8001aa6:	0039      	movs	r1, r7
 8001aa8:	9804      	ldr	r0, [sp, #16]
 8001aaa:	4699      	mov	r9, r3
 8001aac:	f7fe fbc4 	bl	8000238 <__aeabi_uidivmod>
 8001ab0:	0433      	lsls	r3, r6, #16
 8001ab2:	0409      	lsls	r1, r1, #16
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	4599      	cmp	r9, r3
 8001aba:	d909      	bls.n	8001ad0 <__aeabi_ddiv+0x2a0>
 8001abc:	4443      	add	r3, r8
 8001abe:	1e6a      	subs	r2, r5, #1
 8001ac0:	4598      	cmp	r8, r3
 8001ac2:	d900      	bls.n	8001ac6 <__aeabi_ddiv+0x296>
 8001ac4:	e11a      	b.n	8001cfc <__aeabi_ddiv+0x4cc>
 8001ac6:	4599      	cmp	r9, r3
 8001ac8:	d800      	bhi.n	8001acc <__aeabi_ddiv+0x29c>
 8001aca:	e117      	b.n	8001cfc <__aeabi_ddiv+0x4cc>
 8001acc:	3d02      	subs	r5, #2
 8001ace:	4443      	add	r3, r8
 8001ad0:	464a      	mov	r2, r9
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	465a      	mov	r2, fp
 8001ad6:	0412      	lsls	r2, r2, #16
 8001ad8:	432a      	orrs	r2, r5
 8001ada:	9903      	ldr	r1, [sp, #12]
 8001adc:	4693      	mov	fp, r2
 8001ade:	0c10      	lsrs	r0, r2, #16
 8001ae0:	0c0a      	lsrs	r2, r1, #16
 8001ae2:	4691      	mov	r9, r2
 8001ae4:	0409      	lsls	r1, r1, #16
 8001ae6:	465a      	mov	r2, fp
 8001ae8:	0c09      	lsrs	r1, r1, #16
 8001aea:	464e      	mov	r6, r9
 8001aec:	000d      	movs	r5, r1
 8001aee:	0412      	lsls	r2, r2, #16
 8001af0:	0c12      	lsrs	r2, r2, #16
 8001af2:	4345      	muls	r5, r0
 8001af4:	9105      	str	r1, [sp, #20]
 8001af6:	4351      	muls	r1, r2
 8001af8:	4372      	muls	r2, r6
 8001afa:	4370      	muls	r0, r6
 8001afc:	1952      	adds	r2, r2, r5
 8001afe:	0c0e      	lsrs	r6, r1, #16
 8001b00:	18b2      	adds	r2, r6, r2
 8001b02:	4295      	cmp	r5, r2
 8001b04:	d903      	bls.n	8001b0e <__aeabi_ddiv+0x2de>
 8001b06:	2580      	movs	r5, #128	; 0x80
 8001b08:	026d      	lsls	r5, r5, #9
 8001b0a:	46ac      	mov	ip, r5
 8001b0c:	4460      	add	r0, ip
 8001b0e:	0c15      	lsrs	r5, r2, #16
 8001b10:	0409      	lsls	r1, r1, #16
 8001b12:	0412      	lsls	r2, r2, #16
 8001b14:	0c09      	lsrs	r1, r1, #16
 8001b16:	1828      	adds	r0, r5, r0
 8001b18:	1852      	adds	r2, r2, r1
 8001b1a:	4283      	cmp	r3, r0
 8001b1c:	d200      	bcs.n	8001b20 <__aeabi_ddiv+0x2f0>
 8001b1e:	e0ce      	b.n	8001cbe <__aeabi_ddiv+0x48e>
 8001b20:	d100      	bne.n	8001b24 <__aeabi_ddiv+0x2f4>
 8001b22:	e0c8      	b.n	8001cb6 <__aeabi_ddiv+0x486>
 8001b24:	1a1d      	subs	r5, r3, r0
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a9e      	subs	r6, r3, r2
 8001b2a:	45b2      	cmp	sl, r6
 8001b2c:	4192      	sbcs	r2, r2
 8001b2e:	4252      	negs	r2, r2
 8001b30:	1aab      	subs	r3, r5, r2
 8001b32:	469a      	mov	sl, r3
 8001b34:	4598      	cmp	r8, r3
 8001b36:	d100      	bne.n	8001b3a <__aeabi_ddiv+0x30a>
 8001b38:	e117      	b.n	8001d6a <__aeabi_ddiv+0x53a>
 8001b3a:	0039      	movs	r1, r7
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f7fe faf5 	bl	800012c <__udivsi3>
 8001b42:	9b01      	ldr	r3, [sp, #4]
 8001b44:	0005      	movs	r5, r0
 8001b46:	4343      	muls	r3, r0
 8001b48:	0039      	movs	r1, r7
 8001b4a:	4650      	mov	r0, sl
 8001b4c:	9304      	str	r3, [sp, #16]
 8001b4e:	f7fe fb73 	bl	8000238 <__aeabi_uidivmod>
 8001b52:	9804      	ldr	r0, [sp, #16]
 8001b54:	040b      	lsls	r3, r1, #16
 8001b56:	0c31      	lsrs	r1, r6, #16
 8001b58:	4319      	orrs	r1, r3
 8001b5a:	4288      	cmp	r0, r1
 8001b5c:	d909      	bls.n	8001b72 <__aeabi_ddiv+0x342>
 8001b5e:	4441      	add	r1, r8
 8001b60:	1e6b      	subs	r3, r5, #1
 8001b62:	4588      	cmp	r8, r1
 8001b64:	d900      	bls.n	8001b68 <__aeabi_ddiv+0x338>
 8001b66:	e107      	b.n	8001d78 <__aeabi_ddiv+0x548>
 8001b68:	4288      	cmp	r0, r1
 8001b6a:	d800      	bhi.n	8001b6e <__aeabi_ddiv+0x33e>
 8001b6c:	e104      	b.n	8001d78 <__aeabi_ddiv+0x548>
 8001b6e:	3d02      	subs	r5, #2
 8001b70:	4441      	add	r1, r8
 8001b72:	9b04      	ldr	r3, [sp, #16]
 8001b74:	1acb      	subs	r3, r1, r3
 8001b76:	0018      	movs	r0, r3
 8001b78:	0039      	movs	r1, r7
 8001b7a:	9304      	str	r3, [sp, #16]
 8001b7c:	f7fe fad6 	bl	800012c <__udivsi3>
 8001b80:	9b01      	ldr	r3, [sp, #4]
 8001b82:	4682      	mov	sl, r0
 8001b84:	4343      	muls	r3, r0
 8001b86:	0039      	movs	r1, r7
 8001b88:	9804      	ldr	r0, [sp, #16]
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	f7fe fb54 	bl	8000238 <__aeabi_uidivmod>
 8001b90:	9801      	ldr	r0, [sp, #4]
 8001b92:	040b      	lsls	r3, r1, #16
 8001b94:	0431      	lsls	r1, r6, #16
 8001b96:	0c09      	lsrs	r1, r1, #16
 8001b98:	4319      	orrs	r1, r3
 8001b9a:	4288      	cmp	r0, r1
 8001b9c:	d90d      	bls.n	8001bba <__aeabi_ddiv+0x38a>
 8001b9e:	4653      	mov	r3, sl
 8001ba0:	4441      	add	r1, r8
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	4588      	cmp	r8, r1
 8001ba6:	d900      	bls.n	8001baa <__aeabi_ddiv+0x37a>
 8001ba8:	e0e8      	b.n	8001d7c <__aeabi_ddiv+0x54c>
 8001baa:	4288      	cmp	r0, r1
 8001bac:	d800      	bhi.n	8001bb0 <__aeabi_ddiv+0x380>
 8001bae:	e0e5      	b.n	8001d7c <__aeabi_ddiv+0x54c>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	469c      	mov	ip, r3
 8001bb6:	4441      	add	r1, r8
 8001bb8:	44e2      	add	sl, ip
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	042d      	lsls	r5, r5, #16
 8001bbe:	1ace      	subs	r6, r1, r3
 8001bc0:	4651      	mov	r1, sl
 8001bc2:	4329      	orrs	r1, r5
 8001bc4:	9d05      	ldr	r5, [sp, #20]
 8001bc6:	464f      	mov	r7, r9
 8001bc8:	002a      	movs	r2, r5
 8001bca:	040b      	lsls	r3, r1, #16
 8001bcc:	0c08      	lsrs	r0, r1, #16
 8001bce:	0c1b      	lsrs	r3, r3, #16
 8001bd0:	435a      	muls	r2, r3
 8001bd2:	4345      	muls	r5, r0
 8001bd4:	437b      	muls	r3, r7
 8001bd6:	4378      	muls	r0, r7
 8001bd8:	195b      	adds	r3, r3, r5
 8001bda:	0c17      	lsrs	r7, r2, #16
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	429d      	cmp	r5, r3
 8001be0:	d903      	bls.n	8001bea <__aeabi_ddiv+0x3ba>
 8001be2:	2580      	movs	r5, #128	; 0x80
 8001be4:	026d      	lsls	r5, r5, #9
 8001be6:	46ac      	mov	ip, r5
 8001be8:	4460      	add	r0, ip
 8001bea:	0c1d      	lsrs	r5, r3, #16
 8001bec:	0412      	lsls	r2, r2, #16
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	0c12      	lsrs	r2, r2, #16
 8001bf2:	1828      	adds	r0, r5, r0
 8001bf4:	189b      	adds	r3, r3, r2
 8001bf6:	4286      	cmp	r6, r0
 8001bf8:	d200      	bcs.n	8001bfc <__aeabi_ddiv+0x3cc>
 8001bfa:	e093      	b.n	8001d24 <__aeabi_ddiv+0x4f4>
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_ddiv+0x3d0>
 8001bfe:	e08e      	b.n	8001d1e <__aeabi_ddiv+0x4ee>
 8001c00:	2301      	movs	r3, #1
 8001c02:	4319      	orrs	r1, r3
 8001c04:	4ba0      	ldr	r3, [pc, #640]	; (8001e88 <__aeabi_ddiv+0x658>)
 8001c06:	18e3      	adds	r3, r4, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	dc00      	bgt.n	8001c0e <__aeabi_ddiv+0x3de>
 8001c0c:	e099      	b.n	8001d42 <__aeabi_ddiv+0x512>
 8001c0e:	074a      	lsls	r2, r1, #29
 8001c10:	d000      	beq.n	8001c14 <__aeabi_ddiv+0x3e4>
 8001c12:	e09e      	b.n	8001d52 <__aeabi_ddiv+0x522>
 8001c14:	465a      	mov	r2, fp
 8001c16:	01d2      	lsls	r2, r2, #7
 8001c18:	d506      	bpl.n	8001c28 <__aeabi_ddiv+0x3f8>
 8001c1a:	465a      	mov	r2, fp
 8001c1c:	4b9b      	ldr	r3, [pc, #620]	; (8001e8c <__aeabi_ddiv+0x65c>)
 8001c1e:	401a      	ands	r2, r3
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	4693      	mov	fp, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	18e3      	adds	r3, r4, r3
 8001c28:	4a99      	ldr	r2, [pc, #612]	; (8001e90 <__aeabi_ddiv+0x660>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	dd68      	ble.n	8001d00 <__aeabi_ddiv+0x4d0>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	9a02      	ldr	r2, [sp, #8]
 8001c32:	4c98      	ldr	r4, [pc, #608]	; (8001e94 <__aeabi_ddiv+0x664>)
 8001c34:	401a      	ands	r2, r3
 8001c36:	2300      	movs	r3, #0
 8001c38:	4694      	mov	ip, r2
 8001c3a:	4698      	mov	r8, r3
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	e6c5      	b.n	80019cc <__aeabi_ddiv+0x19c>
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	464b      	mov	r3, r9
 8001c44:	0312      	lsls	r2, r2, #12
 8001c46:	4213      	tst	r3, r2
 8001c48:	d00a      	beq.n	8001c60 <__aeabi_ddiv+0x430>
 8001c4a:	465b      	mov	r3, fp
 8001c4c:	4213      	tst	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <__aeabi_ddiv+0x42e>
 8001c50:	431a      	orrs	r2, r3
 8001c52:	0312      	lsls	r2, r2, #12
 8001c54:	0b12      	lsrs	r2, r2, #12
 8001c56:	46ac      	mov	ip, r5
 8001c58:	4688      	mov	r8, r1
 8001c5a:	4c8e      	ldr	r4, [pc, #568]	; (8001e94 <__aeabi_ddiv+0x664>)
 8001c5c:	e6b6      	b.n	80019cc <__aeabi_ddiv+0x19c>
 8001c5e:	464b      	mov	r3, r9
 8001c60:	431a      	orrs	r2, r3
 8001c62:	0312      	lsls	r2, r2, #12
 8001c64:	0b12      	lsrs	r2, r2, #12
 8001c66:	46bc      	mov	ip, r7
 8001c68:	4c8a      	ldr	r4, [pc, #552]	; (8001e94 <__aeabi_ddiv+0x664>)
 8001c6a:	e6af      	b.n	80019cc <__aeabi_ddiv+0x19c>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	465a      	mov	r2, fp
 8001c70:	3b28      	subs	r3, #40	; 0x28
 8001c72:	409a      	lsls	r2, r3
 8001c74:	2300      	movs	r3, #0
 8001c76:	4691      	mov	r9, r2
 8001c78:	4698      	mov	r8, r3
 8001c7a:	e657      	b.n	800192c <__aeabi_ddiv+0xfc>
 8001c7c:	4658      	mov	r0, fp
 8001c7e:	f001 f8f9 	bl	8002e74 <__clzsi2>
 8001c82:	3020      	adds	r0, #32
 8001c84:	e640      	b.n	8001908 <__aeabi_ddiv+0xd8>
 8001c86:	0003      	movs	r3, r0
 8001c88:	4652      	mov	r2, sl
 8001c8a:	3b28      	subs	r3, #40	; 0x28
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4693      	mov	fp, r2
 8001c92:	e677      	b.n	8001984 <__aeabi_ddiv+0x154>
 8001c94:	f001 f8ee 	bl	8002e74 <__clzsi2>
 8001c98:	3020      	adds	r0, #32
 8001c9a:	e65f      	b.n	800195c <__aeabi_ddiv+0x12c>
 8001c9c:	4588      	cmp	r8, r1
 8001c9e:	d200      	bcs.n	8001ca2 <__aeabi_ddiv+0x472>
 8001ca0:	e6c7      	b.n	8001a32 <__aeabi_ddiv+0x202>
 8001ca2:	464b      	mov	r3, r9
 8001ca4:	07de      	lsls	r6, r3, #31
 8001ca6:	085d      	lsrs	r5, r3, #1
 8001ca8:	4643      	mov	r3, r8
 8001caa:	085b      	lsrs	r3, r3, #1
 8001cac:	431e      	orrs	r6, r3
 8001cae:	4643      	mov	r3, r8
 8001cb0:	07db      	lsls	r3, r3, #31
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	e6c2      	b.n	8001a3c <__aeabi_ddiv+0x20c>
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	4592      	cmp	sl, r2
 8001cba:	d300      	bcc.n	8001cbe <__aeabi_ddiv+0x48e>
 8001cbc:	e733      	b.n	8001b26 <__aeabi_ddiv+0x2f6>
 8001cbe:	9e03      	ldr	r6, [sp, #12]
 8001cc0:	4659      	mov	r1, fp
 8001cc2:	46b4      	mov	ip, r6
 8001cc4:	44e2      	add	sl, ip
 8001cc6:	45b2      	cmp	sl, r6
 8001cc8:	41ad      	sbcs	r5, r5
 8001cca:	426d      	negs	r5, r5
 8001ccc:	4445      	add	r5, r8
 8001cce:	18eb      	adds	r3, r5, r3
 8001cd0:	3901      	subs	r1, #1
 8001cd2:	4598      	cmp	r8, r3
 8001cd4:	d207      	bcs.n	8001ce6 <__aeabi_ddiv+0x4b6>
 8001cd6:	4298      	cmp	r0, r3
 8001cd8:	d900      	bls.n	8001cdc <__aeabi_ddiv+0x4ac>
 8001cda:	e07f      	b.n	8001ddc <__aeabi_ddiv+0x5ac>
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x4b0>
 8001cde:	e0bc      	b.n	8001e5a <__aeabi_ddiv+0x62a>
 8001ce0:	1a1d      	subs	r5, r3, r0
 8001ce2:	468b      	mov	fp, r1
 8001ce4:	e71f      	b.n	8001b26 <__aeabi_ddiv+0x2f6>
 8001ce6:	4598      	cmp	r8, r3
 8001ce8:	d1fa      	bne.n	8001ce0 <__aeabi_ddiv+0x4b0>
 8001cea:	9d03      	ldr	r5, [sp, #12]
 8001cec:	4555      	cmp	r5, sl
 8001cee:	d9f2      	bls.n	8001cd6 <__aeabi_ddiv+0x4a6>
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	468b      	mov	fp, r1
 8001cf4:	1a1d      	subs	r5, r3, r0
 8001cf6:	e716      	b.n	8001b26 <__aeabi_ddiv+0x2f6>
 8001cf8:	469b      	mov	fp, r3
 8001cfa:	e6ca      	b.n	8001a92 <__aeabi_ddiv+0x262>
 8001cfc:	0015      	movs	r5, r2
 8001cfe:	e6e7      	b.n	8001ad0 <__aeabi_ddiv+0x2a0>
 8001d00:	465a      	mov	r2, fp
 8001d02:	08c9      	lsrs	r1, r1, #3
 8001d04:	0752      	lsls	r2, r2, #29
 8001d06:	430a      	orrs	r2, r1
 8001d08:	055b      	lsls	r3, r3, #21
 8001d0a:	4690      	mov	r8, r2
 8001d0c:	0d5c      	lsrs	r4, r3, #21
 8001d0e:	465a      	mov	r2, fp
 8001d10:	2301      	movs	r3, #1
 8001d12:	9902      	ldr	r1, [sp, #8]
 8001d14:	0252      	lsls	r2, r2, #9
 8001d16:	4019      	ands	r1, r3
 8001d18:	0b12      	lsrs	r2, r2, #12
 8001d1a:	468c      	mov	ip, r1
 8001d1c:	e656      	b.n	80019cc <__aeabi_ddiv+0x19c>
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d100      	bne.n	8001d24 <__aeabi_ddiv+0x4f4>
 8001d22:	e76f      	b.n	8001c04 <__aeabi_ddiv+0x3d4>
 8001d24:	4446      	add	r6, r8
 8001d26:	1e4a      	subs	r2, r1, #1
 8001d28:	45b0      	cmp	r8, r6
 8001d2a:	d929      	bls.n	8001d80 <__aeabi_ddiv+0x550>
 8001d2c:	0011      	movs	r1, r2
 8001d2e:	4286      	cmp	r6, r0
 8001d30:	d000      	beq.n	8001d34 <__aeabi_ddiv+0x504>
 8001d32:	e765      	b.n	8001c00 <__aeabi_ddiv+0x3d0>
 8001d34:	9a03      	ldr	r2, [sp, #12]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d000      	beq.n	8001d3c <__aeabi_ddiv+0x50c>
 8001d3a:	e761      	b.n	8001c00 <__aeabi_ddiv+0x3d0>
 8001d3c:	e762      	b.n	8001c04 <__aeabi_ddiv+0x3d4>
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4249      	negs	r1, r1
 8001d42:	2001      	movs	r0, #1
 8001d44:	1ac2      	subs	r2, r0, r3
 8001d46:	2a38      	cmp	r2, #56	; 0x38
 8001d48:	dd21      	ble.n	8001d8e <__aeabi_ddiv+0x55e>
 8001d4a:	9b02      	ldr	r3, [sp, #8]
 8001d4c:	4003      	ands	r3, r0
 8001d4e:	469c      	mov	ip, r3
 8001d50:	e638      	b.n	80019c4 <__aeabi_ddiv+0x194>
 8001d52:	220f      	movs	r2, #15
 8001d54:	400a      	ands	r2, r1
 8001d56:	2a04      	cmp	r2, #4
 8001d58:	d100      	bne.n	8001d5c <__aeabi_ddiv+0x52c>
 8001d5a:	e75b      	b.n	8001c14 <__aeabi_ddiv+0x3e4>
 8001d5c:	000a      	movs	r2, r1
 8001d5e:	1d11      	adds	r1, r2, #4
 8001d60:	4291      	cmp	r1, r2
 8001d62:	4192      	sbcs	r2, r2
 8001d64:	4252      	negs	r2, r2
 8001d66:	4493      	add	fp, r2
 8001d68:	e754      	b.n	8001c14 <__aeabi_ddiv+0x3e4>
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <__aeabi_ddiv+0x658>)
 8001d6c:	18e3      	adds	r3, r4, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	dde5      	ble.n	8001d3e <__aeabi_ddiv+0x50e>
 8001d72:	2201      	movs	r2, #1
 8001d74:	4252      	negs	r2, r2
 8001d76:	e7f2      	b.n	8001d5e <__aeabi_ddiv+0x52e>
 8001d78:	001d      	movs	r5, r3
 8001d7a:	e6fa      	b.n	8001b72 <__aeabi_ddiv+0x342>
 8001d7c:	469a      	mov	sl, r3
 8001d7e:	e71c      	b.n	8001bba <__aeabi_ddiv+0x38a>
 8001d80:	42b0      	cmp	r0, r6
 8001d82:	d839      	bhi.n	8001df8 <__aeabi_ddiv+0x5c8>
 8001d84:	d06e      	beq.n	8001e64 <__aeabi_ddiv+0x634>
 8001d86:	0011      	movs	r1, r2
 8001d88:	e73a      	b.n	8001c00 <__aeabi_ddiv+0x3d0>
 8001d8a:	9302      	str	r3, [sp, #8]
 8001d8c:	e73a      	b.n	8001c04 <__aeabi_ddiv+0x3d4>
 8001d8e:	2a1f      	cmp	r2, #31
 8001d90:	dc3c      	bgt.n	8001e0c <__aeabi_ddiv+0x5dc>
 8001d92:	2320      	movs	r3, #32
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	000c      	movs	r4, r1
 8001d98:	4658      	mov	r0, fp
 8001d9a:	4099      	lsls	r1, r3
 8001d9c:	4098      	lsls	r0, r3
 8001d9e:	1e4b      	subs	r3, r1, #1
 8001da0:	4199      	sbcs	r1, r3
 8001da2:	465b      	mov	r3, fp
 8001da4:	40d4      	lsrs	r4, r2
 8001da6:	40d3      	lsrs	r3, r2
 8001da8:	4320      	orrs	r0, r4
 8001daa:	4308      	orrs	r0, r1
 8001dac:	001a      	movs	r2, r3
 8001dae:	0743      	lsls	r3, r0, #29
 8001db0:	d009      	beq.n	8001dc6 <__aeabi_ddiv+0x596>
 8001db2:	230f      	movs	r3, #15
 8001db4:	4003      	ands	r3, r0
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d005      	beq.n	8001dc6 <__aeabi_ddiv+0x596>
 8001dba:	0001      	movs	r1, r0
 8001dbc:	1d08      	adds	r0, r1, #4
 8001dbe:	4288      	cmp	r0, r1
 8001dc0:	419b      	sbcs	r3, r3
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	18d2      	adds	r2, r2, r3
 8001dc6:	0213      	lsls	r3, r2, #8
 8001dc8:	d53a      	bpl.n	8001e40 <__aeabi_ddiv+0x610>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	9a02      	ldr	r2, [sp, #8]
 8001dce:	2401      	movs	r4, #1
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	4694      	mov	ip, r2
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	2200      	movs	r2, #0
 8001dda:	e5f7      	b.n	80019cc <__aeabi_ddiv+0x19c>
 8001ddc:	2102      	movs	r1, #2
 8001dde:	4249      	negs	r1, r1
 8001de0:	468c      	mov	ip, r1
 8001de2:	9d03      	ldr	r5, [sp, #12]
 8001de4:	44e3      	add	fp, ip
 8001de6:	46ac      	mov	ip, r5
 8001de8:	44e2      	add	sl, ip
 8001dea:	45aa      	cmp	sl, r5
 8001dec:	41ad      	sbcs	r5, r5
 8001dee:	426d      	negs	r5, r5
 8001df0:	4445      	add	r5, r8
 8001df2:	18ed      	adds	r5, r5, r3
 8001df4:	1a2d      	subs	r5, r5, r0
 8001df6:	e696      	b.n	8001b26 <__aeabi_ddiv+0x2f6>
 8001df8:	1e8a      	subs	r2, r1, #2
 8001dfa:	9903      	ldr	r1, [sp, #12]
 8001dfc:	004d      	lsls	r5, r1, #1
 8001dfe:	428d      	cmp	r5, r1
 8001e00:	4189      	sbcs	r1, r1
 8001e02:	4249      	negs	r1, r1
 8001e04:	4441      	add	r1, r8
 8001e06:	1876      	adds	r6, r6, r1
 8001e08:	9503      	str	r5, [sp, #12]
 8001e0a:	e78f      	b.n	8001d2c <__aeabi_ddiv+0x4fc>
 8001e0c:	201f      	movs	r0, #31
 8001e0e:	4240      	negs	r0, r0
 8001e10:	1ac3      	subs	r3, r0, r3
 8001e12:	4658      	mov	r0, fp
 8001e14:	40d8      	lsrs	r0, r3
 8001e16:	0003      	movs	r3, r0
 8001e18:	2a20      	cmp	r2, #32
 8001e1a:	d028      	beq.n	8001e6e <__aeabi_ddiv+0x63e>
 8001e1c:	2040      	movs	r0, #64	; 0x40
 8001e1e:	465d      	mov	r5, fp
 8001e20:	1a82      	subs	r2, r0, r2
 8001e22:	4095      	lsls	r5, r2
 8001e24:	4329      	orrs	r1, r5
 8001e26:	1e4a      	subs	r2, r1, #1
 8001e28:	4191      	sbcs	r1, r2
 8001e2a:	4319      	orrs	r1, r3
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	2200      	movs	r2, #0
 8001e30:	400b      	ands	r3, r1
 8001e32:	d009      	beq.n	8001e48 <__aeabi_ddiv+0x618>
 8001e34:	230f      	movs	r3, #15
 8001e36:	2200      	movs	r2, #0
 8001e38:	400b      	ands	r3, r1
 8001e3a:	0008      	movs	r0, r1
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d1bd      	bne.n	8001dbc <__aeabi_ddiv+0x58c>
 8001e40:	0001      	movs	r1, r0
 8001e42:	0753      	lsls	r3, r2, #29
 8001e44:	0252      	lsls	r2, r2, #9
 8001e46:	0b12      	lsrs	r2, r2, #12
 8001e48:	08c9      	lsrs	r1, r1, #3
 8001e4a:	4319      	orrs	r1, r3
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	4688      	mov	r8, r1
 8001e50:	9902      	ldr	r1, [sp, #8]
 8001e52:	2400      	movs	r4, #0
 8001e54:	4019      	ands	r1, r3
 8001e56:	468c      	mov	ip, r1
 8001e58:	e5b8      	b.n	80019cc <__aeabi_ddiv+0x19c>
 8001e5a:	4552      	cmp	r2, sl
 8001e5c:	d8be      	bhi.n	8001ddc <__aeabi_ddiv+0x5ac>
 8001e5e:	468b      	mov	fp, r1
 8001e60:	2500      	movs	r5, #0
 8001e62:	e660      	b.n	8001b26 <__aeabi_ddiv+0x2f6>
 8001e64:	9d03      	ldr	r5, [sp, #12]
 8001e66:	429d      	cmp	r5, r3
 8001e68:	d3c6      	bcc.n	8001df8 <__aeabi_ddiv+0x5c8>
 8001e6a:	0011      	movs	r1, r2
 8001e6c:	e762      	b.n	8001d34 <__aeabi_ddiv+0x504>
 8001e6e:	2500      	movs	r5, #0
 8001e70:	e7d8      	b.n	8001e24 <__aeabi_ddiv+0x5f4>
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	465b      	mov	r3, fp
 8001e76:	0312      	lsls	r2, r2, #12
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	9b01      	ldr	r3, [sp, #4]
 8001e7c:	0312      	lsls	r2, r2, #12
 8001e7e:	0b12      	lsrs	r2, r2, #12
 8001e80:	469c      	mov	ip, r3
 8001e82:	4688      	mov	r8, r1
 8001e84:	4c03      	ldr	r4, [pc, #12]	; (8001e94 <__aeabi_ddiv+0x664>)
 8001e86:	e5a1      	b.n	80019cc <__aeabi_ddiv+0x19c>
 8001e88:	000003ff 	.word	0x000003ff
 8001e8c:	feffffff 	.word	0xfeffffff
 8001e90:	000007fe 	.word	0x000007fe
 8001e94:	000007ff 	.word	0x000007ff

08001e98 <__eqdf2>:
 8001e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9a:	464f      	mov	r7, r9
 8001e9c:	4646      	mov	r6, r8
 8001e9e:	46d6      	mov	lr, sl
 8001ea0:	005c      	lsls	r4, r3, #1
 8001ea2:	b5c0      	push	{r6, r7, lr}
 8001ea4:	031f      	lsls	r7, r3, #12
 8001ea6:	0fdb      	lsrs	r3, r3, #31
 8001ea8:	469a      	mov	sl, r3
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <__eqdf2+0x70>)
 8001eac:	030e      	lsls	r6, r1, #12
 8001eae:	004d      	lsls	r5, r1, #1
 8001eb0:	4684      	mov	ip, r0
 8001eb2:	4680      	mov	r8, r0
 8001eb4:	0b36      	lsrs	r6, r6, #12
 8001eb6:	0d6d      	lsrs	r5, r5, #21
 8001eb8:	0fc9      	lsrs	r1, r1, #31
 8001eba:	4691      	mov	r9, r2
 8001ebc:	0b3f      	lsrs	r7, r7, #12
 8001ebe:	0d64      	lsrs	r4, r4, #21
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	429d      	cmp	r5, r3
 8001ec4:	d008      	beq.n	8001ed8 <__eqdf2+0x40>
 8001ec6:	429c      	cmp	r4, r3
 8001ec8:	d001      	beq.n	8001ece <__eqdf2+0x36>
 8001eca:	42a5      	cmp	r5, r4
 8001ecc:	d00b      	beq.n	8001ee6 <__eqdf2+0x4e>
 8001ece:	bc1c      	pop	{r2, r3, r4}
 8001ed0:	4690      	mov	r8, r2
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	46a2      	mov	sl, r4
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed8:	4663      	mov	r3, ip
 8001eda:	4333      	orrs	r3, r6
 8001edc:	d1f7      	bne.n	8001ece <__eqdf2+0x36>
 8001ede:	42ac      	cmp	r4, r5
 8001ee0:	d1f5      	bne.n	8001ece <__eqdf2+0x36>
 8001ee2:	433a      	orrs	r2, r7
 8001ee4:	d1f3      	bne.n	8001ece <__eqdf2+0x36>
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	42be      	cmp	r6, r7
 8001eea:	d1f0      	bne.n	8001ece <__eqdf2+0x36>
 8001eec:	45c8      	cmp	r8, r9
 8001eee:	d1ee      	bne.n	8001ece <__eqdf2+0x36>
 8001ef0:	4551      	cmp	r1, sl
 8001ef2:	d007      	beq.n	8001f04 <__eqdf2+0x6c>
 8001ef4:	2d00      	cmp	r5, #0
 8001ef6:	d1ea      	bne.n	8001ece <__eqdf2+0x36>
 8001ef8:	4663      	mov	r3, ip
 8001efa:	431e      	orrs	r6, r3
 8001efc:	0030      	movs	r0, r6
 8001efe:	1e46      	subs	r6, r0, #1
 8001f00:	41b0      	sbcs	r0, r6
 8001f02:	e7e4      	b.n	8001ece <__eqdf2+0x36>
 8001f04:	2000      	movs	r0, #0
 8001f06:	e7e2      	b.n	8001ece <__eqdf2+0x36>
 8001f08:	000007ff 	.word	0x000007ff

08001f0c <__gedf2>:
 8001f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0e:	4645      	mov	r5, r8
 8001f10:	46de      	mov	lr, fp
 8001f12:	4657      	mov	r7, sl
 8001f14:	464e      	mov	r6, r9
 8001f16:	b5e0      	push	{r5, r6, r7, lr}
 8001f18:	031f      	lsls	r7, r3, #12
 8001f1a:	0b3d      	lsrs	r5, r7, #12
 8001f1c:	4f2c      	ldr	r7, [pc, #176]	; (8001fd0 <__gedf2+0xc4>)
 8001f1e:	030e      	lsls	r6, r1, #12
 8001f20:	004c      	lsls	r4, r1, #1
 8001f22:	46ab      	mov	fp, r5
 8001f24:	005d      	lsls	r5, r3, #1
 8001f26:	4684      	mov	ip, r0
 8001f28:	0b36      	lsrs	r6, r6, #12
 8001f2a:	0d64      	lsrs	r4, r4, #21
 8001f2c:	0fc9      	lsrs	r1, r1, #31
 8001f2e:	4690      	mov	r8, r2
 8001f30:	0d6d      	lsrs	r5, r5, #21
 8001f32:	0fdb      	lsrs	r3, r3, #31
 8001f34:	42bc      	cmp	r4, r7
 8001f36:	d02a      	beq.n	8001f8e <__gedf2+0x82>
 8001f38:	4f25      	ldr	r7, [pc, #148]	; (8001fd0 <__gedf2+0xc4>)
 8001f3a:	42bd      	cmp	r5, r7
 8001f3c:	d02d      	beq.n	8001f9a <__gedf2+0x8e>
 8001f3e:	2c00      	cmp	r4, #0
 8001f40:	d10f      	bne.n	8001f62 <__gedf2+0x56>
 8001f42:	4330      	orrs	r0, r6
 8001f44:	0007      	movs	r7, r0
 8001f46:	4681      	mov	r9, r0
 8001f48:	4278      	negs	r0, r7
 8001f4a:	4178      	adcs	r0, r7
 8001f4c:	b2c0      	uxtb	r0, r0
 8001f4e:	2d00      	cmp	r5, #0
 8001f50:	d117      	bne.n	8001f82 <__gedf2+0x76>
 8001f52:	465f      	mov	r7, fp
 8001f54:	433a      	orrs	r2, r7
 8001f56:	d114      	bne.n	8001f82 <__gedf2+0x76>
 8001f58:	464b      	mov	r3, r9
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <__gedf2+0x6a>
 8001f60:	e006      	b.n	8001f70 <__gedf2+0x64>
 8001f62:	2d00      	cmp	r5, #0
 8001f64:	d102      	bne.n	8001f6c <__gedf2+0x60>
 8001f66:	4658      	mov	r0, fp
 8001f68:	4302      	orrs	r2, r0
 8001f6a:	d001      	beq.n	8001f70 <__gedf2+0x64>
 8001f6c:	4299      	cmp	r1, r3
 8001f6e:	d018      	beq.n	8001fa2 <__gedf2+0x96>
 8001f70:	4248      	negs	r0, r1
 8001f72:	2101      	movs	r1, #1
 8001f74:	4308      	orrs	r0, r1
 8001f76:	bc3c      	pop	{r2, r3, r4, r5}
 8001f78:	4690      	mov	r8, r2
 8001f7a:	4699      	mov	r9, r3
 8001f7c:	46a2      	mov	sl, r4
 8001f7e:	46ab      	mov	fp, r5
 8001f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d0f2      	beq.n	8001f6c <__gedf2+0x60>
 8001f86:	2001      	movs	r0, #1
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	4318      	orrs	r0, r3
 8001f8c:	e7f3      	b.n	8001f76 <__gedf2+0x6a>
 8001f8e:	0037      	movs	r7, r6
 8001f90:	4307      	orrs	r7, r0
 8001f92:	d0d1      	beq.n	8001f38 <__gedf2+0x2c>
 8001f94:	2002      	movs	r0, #2
 8001f96:	4240      	negs	r0, r0
 8001f98:	e7ed      	b.n	8001f76 <__gedf2+0x6a>
 8001f9a:	465f      	mov	r7, fp
 8001f9c:	4317      	orrs	r7, r2
 8001f9e:	d0ce      	beq.n	8001f3e <__gedf2+0x32>
 8001fa0:	e7f8      	b.n	8001f94 <__gedf2+0x88>
 8001fa2:	42ac      	cmp	r4, r5
 8001fa4:	dce4      	bgt.n	8001f70 <__gedf2+0x64>
 8001fa6:	da03      	bge.n	8001fb0 <__gedf2+0xa4>
 8001fa8:	1e48      	subs	r0, r1, #1
 8001faa:	2101      	movs	r1, #1
 8001fac:	4308      	orrs	r0, r1
 8001fae:	e7e2      	b.n	8001f76 <__gedf2+0x6a>
 8001fb0:	455e      	cmp	r6, fp
 8001fb2:	d8dd      	bhi.n	8001f70 <__gedf2+0x64>
 8001fb4:	d006      	beq.n	8001fc4 <__gedf2+0xb8>
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	455e      	cmp	r6, fp
 8001fba:	d2dc      	bcs.n	8001f76 <__gedf2+0x6a>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	1e48      	subs	r0, r1, #1
 8001fc0:	4318      	orrs	r0, r3
 8001fc2:	e7d8      	b.n	8001f76 <__gedf2+0x6a>
 8001fc4:	45c4      	cmp	ip, r8
 8001fc6:	d8d3      	bhi.n	8001f70 <__gedf2+0x64>
 8001fc8:	2000      	movs	r0, #0
 8001fca:	45c4      	cmp	ip, r8
 8001fcc:	d3f6      	bcc.n	8001fbc <__gedf2+0xb0>
 8001fce:	e7d2      	b.n	8001f76 <__gedf2+0x6a>
 8001fd0:	000007ff 	.word	0x000007ff

08001fd4 <__ledf2>:
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd6:	464e      	mov	r6, r9
 8001fd8:	4645      	mov	r5, r8
 8001fda:	46de      	mov	lr, fp
 8001fdc:	4657      	mov	r7, sl
 8001fde:	005c      	lsls	r4, r3, #1
 8001fe0:	b5e0      	push	{r5, r6, r7, lr}
 8001fe2:	031f      	lsls	r7, r3, #12
 8001fe4:	0fdb      	lsrs	r3, r3, #31
 8001fe6:	4699      	mov	r9, r3
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <__ledf2+0xc0>)
 8001fea:	030e      	lsls	r6, r1, #12
 8001fec:	004d      	lsls	r5, r1, #1
 8001fee:	0fc9      	lsrs	r1, r1, #31
 8001ff0:	4684      	mov	ip, r0
 8001ff2:	0b36      	lsrs	r6, r6, #12
 8001ff4:	0d6d      	lsrs	r5, r5, #21
 8001ff6:	468b      	mov	fp, r1
 8001ff8:	4690      	mov	r8, r2
 8001ffa:	0b3f      	lsrs	r7, r7, #12
 8001ffc:	0d64      	lsrs	r4, r4, #21
 8001ffe:	429d      	cmp	r5, r3
 8002000:	d020      	beq.n	8002044 <__ledf2+0x70>
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <__ledf2+0xc0>)
 8002004:	429c      	cmp	r4, r3
 8002006:	d022      	beq.n	800204e <__ledf2+0x7a>
 8002008:	2d00      	cmp	r5, #0
 800200a:	d112      	bne.n	8002032 <__ledf2+0x5e>
 800200c:	4330      	orrs	r0, r6
 800200e:	4243      	negs	r3, r0
 8002010:	4143      	adcs	r3, r0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2c00      	cmp	r4, #0
 8002016:	d01f      	beq.n	8002058 <__ledf2+0x84>
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00c      	beq.n	8002036 <__ledf2+0x62>
 800201c:	464b      	mov	r3, r9
 800201e:	2001      	movs	r0, #1
 8002020:	3b01      	subs	r3, #1
 8002022:	4303      	orrs	r3, r0
 8002024:	0018      	movs	r0, r3
 8002026:	bc3c      	pop	{r2, r3, r4, r5}
 8002028:	4690      	mov	r8, r2
 800202a:	4699      	mov	r9, r3
 800202c:	46a2      	mov	sl, r4
 800202e:	46ab      	mov	fp, r5
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002032:	2c00      	cmp	r4, #0
 8002034:	d016      	beq.n	8002064 <__ledf2+0x90>
 8002036:	45cb      	cmp	fp, r9
 8002038:	d017      	beq.n	800206a <__ledf2+0x96>
 800203a:	465b      	mov	r3, fp
 800203c:	4259      	negs	r1, r3
 800203e:	2301      	movs	r3, #1
 8002040:	430b      	orrs	r3, r1
 8002042:	e7ef      	b.n	8002024 <__ledf2+0x50>
 8002044:	0031      	movs	r1, r6
 8002046:	2302      	movs	r3, #2
 8002048:	4301      	orrs	r1, r0
 800204a:	d1eb      	bne.n	8002024 <__ledf2+0x50>
 800204c:	e7d9      	b.n	8002002 <__ledf2+0x2e>
 800204e:	0039      	movs	r1, r7
 8002050:	2302      	movs	r3, #2
 8002052:	4311      	orrs	r1, r2
 8002054:	d1e6      	bne.n	8002024 <__ledf2+0x50>
 8002056:	e7d7      	b.n	8002008 <__ledf2+0x34>
 8002058:	433a      	orrs	r2, r7
 800205a:	d1dd      	bne.n	8002018 <__ledf2+0x44>
 800205c:	2300      	movs	r3, #0
 800205e:	2800      	cmp	r0, #0
 8002060:	d0e0      	beq.n	8002024 <__ledf2+0x50>
 8002062:	e7ea      	b.n	800203a <__ledf2+0x66>
 8002064:	433a      	orrs	r2, r7
 8002066:	d1e6      	bne.n	8002036 <__ledf2+0x62>
 8002068:	e7e7      	b.n	800203a <__ledf2+0x66>
 800206a:	42a5      	cmp	r5, r4
 800206c:	dce5      	bgt.n	800203a <__ledf2+0x66>
 800206e:	db05      	blt.n	800207c <__ledf2+0xa8>
 8002070:	42be      	cmp	r6, r7
 8002072:	d8e2      	bhi.n	800203a <__ledf2+0x66>
 8002074:	d007      	beq.n	8002086 <__ledf2+0xb2>
 8002076:	2300      	movs	r3, #0
 8002078:	42be      	cmp	r6, r7
 800207a:	d2d3      	bcs.n	8002024 <__ledf2+0x50>
 800207c:	4659      	mov	r1, fp
 800207e:	2301      	movs	r3, #1
 8002080:	3901      	subs	r1, #1
 8002082:	430b      	orrs	r3, r1
 8002084:	e7ce      	b.n	8002024 <__ledf2+0x50>
 8002086:	45c4      	cmp	ip, r8
 8002088:	d8d7      	bhi.n	800203a <__ledf2+0x66>
 800208a:	2300      	movs	r3, #0
 800208c:	45c4      	cmp	ip, r8
 800208e:	d3f5      	bcc.n	800207c <__ledf2+0xa8>
 8002090:	e7c8      	b.n	8002024 <__ledf2+0x50>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	000007ff 	.word	0x000007ff

08002098 <__aeabi_dmul>:
 8002098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209a:	4657      	mov	r7, sl
 800209c:	4645      	mov	r5, r8
 800209e:	46de      	mov	lr, fp
 80020a0:	464e      	mov	r6, r9
 80020a2:	b5e0      	push	{r5, r6, r7, lr}
 80020a4:	030c      	lsls	r4, r1, #12
 80020a6:	4698      	mov	r8, r3
 80020a8:	004e      	lsls	r6, r1, #1
 80020aa:	0b23      	lsrs	r3, r4, #12
 80020ac:	b087      	sub	sp, #28
 80020ae:	0007      	movs	r7, r0
 80020b0:	4692      	mov	sl, r2
 80020b2:	469b      	mov	fp, r3
 80020b4:	0d76      	lsrs	r6, r6, #21
 80020b6:	0fcd      	lsrs	r5, r1, #31
 80020b8:	2e00      	cmp	r6, #0
 80020ba:	d06b      	beq.n	8002194 <__aeabi_dmul+0xfc>
 80020bc:	4b6d      	ldr	r3, [pc, #436]	; (8002274 <__aeabi_dmul+0x1dc>)
 80020be:	429e      	cmp	r6, r3
 80020c0:	d035      	beq.n	800212e <__aeabi_dmul+0x96>
 80020c2:	2480      	movs	r4, #128	; 0x80
 80020c4:	465b      	mov	r3, fp
 80020c6:	0f42      	lsrs	r2, r0, #29
 80020c8:	0424      	lsls	r4, r4, #16
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4314      	orrs	r4, r2
 80020ce:	431c      	orrs	r4, r3
 80020d0:	00c3      	lsls	r3, r0, #3
 80020d2:	4699      	mov	r9, r3
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <__aeabi_dmul+0x1e0>)
 80020d6:	46a3      	mov	fp, r4
 80020d8:	469c      	mov	ip, r3
 80020da:	2300      	movs	r3, #0
 80020dc:	2700      	movs	r7, #0
 80020de:	4466      	add	r6, ip
 80020e0:	9302      	str	r3, [sp, #8]
 80020e2:	4643      	mov	r3, r8
 80020e4:	031c      	lsls	r4, r3, #12
 80020e6:	005a      	lsls	r2, r3, #1
 80020e8:	0fdb      	lsrs	r3, r3, #31
 80020ea:	4650      	mov	r0, sl
 80020ec:	0b24      	lsrs	r4, r4, #12
 80020ee:	0d52      	lsrs	r2, r2, #21
 80020f0:	4698      	mov	r8, r3
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dmul+0x5e>
 80020f4:	e076      	b.n	80021e4 <__aeabi_dmul+0x14c>
 80020f6:	4b5f      	ldr	r3, [pc, #380]	; (8002274 <__aeabi_dmul+0x1dc>)
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d06d      	beq.n	80021d8 <__aeabi_dmul+0x140>
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	0f41      	lsrs	r1, r0, #29
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	430b      	orrs	r3, r1
 8002104:	495c      	ldr	r1, [pc, #368]	; (8002278 <__aeabi_dmul+0x1e0>)
 8002106:	00e4      	lsls	r4, r4, #3
 8002108:	468c      	mov	ip, r1
 800210a:	431c      	orrs	r4, r3
 800210c:	00c3      	lsls	r3, r0, #3
 800210e:	2000      	movs	r0, #0
 8002110:	4462      	add	r2, ip
 8002112:	4641      	mov	r1, r8
 8002114:	18b6      	adds	r6, r6, r2
 8002116:	4069      	eors	r1, r5
 8002118:	1c72      	adds	r2, r6, #1
 800211a:	9101      	str	r1, [sp, #4]
 800211c:	4694      	mov	ip, r2
 800211e:	4307      	orrs	r7, r0
 8002120:	2f0f      	cmp	r7, #15
 8002122:	d900      	bls.n	8002126 <__aeabi_dmul+0x8e>
 8002124:	e0b0      	b.n	8002288 <__aeabi_dmul+0x1f0>
 8002126:	4a55      	ldr	r2, [pc, #340]	; (800227c <__aeabi_dmul+0x1e4>)
 8002128:	00bf      	lsls	r7, r7, #2
 800212a:	59d2      	ldr	r2, [r2, r7]
 800212c:	4697      	mov	pc, r2
 800212e:	465b      	mov	r3, fp
 8002130:	4303      	orrs	r3, r0
 8002132:	4699      	mov	r9, r3
 8002134:	d000      	beq.n	8002138 <__aeabi_dmul+0xa0>
 8002136:	e087      	b.n	8002248 <__aeabi_dmul+0x1b0>
 8002138:	2300      	movs	r3, #0
 800213a:	469b      	mov	fp, r3
 800213c:	3302      	adds	r3, #2
 800213e:	2708      	movs	r7, #8
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	e7ce      	b.n	80020e2 <__aeabi_dmul+0x4a>
 8002144:	4642      	mov	r2, r8
 8002146:	9201      	str	r2, [sp, #4]
 8002148:	2802      	cmp	r0, #2
 800214a:	d067      	beq.n	800221c <__aeabi_dmul+0x184>
 800214c:	2803      	cmp	r0, #3
 800214e:	d100      	bne.n	8002152 <__aeabi_dmul+0xba>
 8002150:	e20e      	b.n	8002570 <__aeabi_dmul+0x4d8>
 8002152:	2801      	cmp	r0, #1
 8002154:	d000      	beq.n	8002158 <__aeabi_dmul+0xc0>
 8002156:	e162      	b.n	800241e <__aeabi_dmul+0x386>
 8002158:	2300      	movs	r3, #0
 800215a:	2400      	movs	r4, #0
 800215c:	2200      	movs	r2, #0
 800215e:	4699      	mov	r9, r3
 8002160:	9901      	ldr	r1, [sp, #4]
 8002162:	4001      	ands	r1, r0
 8002164:	b2cd      	uxtb	r5, r1
 8002166:	2100      	movs	r1, #0
 8002168:	0312      	lsls	r2, r2, #12
 800216a:	0d0b      	lsrs	r3, r1, #20
 800216c:	0b12      	lsrs	r2, r2, #12
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	4313      	orrs	r3, r2
 8002172:	4a43      	ldr	r2, [pc, #268]	; (8002280 <__aeabi_dmul+0x1e8>)
 8002174:	0524      	lsls	r4, r4, #20
 8002176:	4013      	ands	r3, r2
 8002178:	431c      	orrs	r4, r3
 800217a:	0064      	lsls	r4, r4, #1
 800217c:	07ed      	lsls	r5, r5, #31
 800217e:	0864      	lsrs	r4, r4, #1
 8002180:	432c      	orrs	r4, r5
 8002182:	4648      	mov	r0, r9
 8002184:	0021      	movs	r1, r4
 8002186:	b007      	add	sp, #28
 8002188:	bc3c      	pop	{r2, r3, r4, r5}
 800218a:	4690      	mov	r8, r2
 800218c:	4699      	mov	r9, r3
 800218e:	46a2      	mov	sl, r4
 8002190:	46ab      	mov	fp, r5
 8002192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002194:	4303      	orrs	r3, r0
 8002196:	4699      	mov	r9, r3
 8002198:	d04f      	beq.n	800223a <__aeabi_dmul+0x1a2>
 800219a:	465b      	mov	r3, fp
 800219c:	2b00      	cmp	r3, #0
 800219e:	d100      	bne.n	80021a2 <__aeabi_dmul+0x10a>
 80021a0:	e189      	b.n	80024b6 <__aeabi_dmul+0x41e>
 80021a2:	4658      	mov	r0, fp
 80021a4:	f000 fe66 	bl	8002e74 <__clzsi2>
 80021a8:	0003      	movs	r3, r0
 80021aa:	3b0b      	subs	r3, #11
 80021ac:	2b1c      	cmp	r3, #28
 80021ae:	dd00      	ble.n	80021b2 <__aeabi_dmul+0x11a>
 80021b0:	e17a      	b.n	80024a8 <__aeabi_dmul+0x410>
 80021b2:	221d      	movs	r2, #29
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	003a      	movs	r2, r7
 80021b8:	0001      	movs	r1, r0
 80021ba:	465c      	mov	r4, fp
 80021bc:	40da      	lsrs	r2, r3
 80021be:	3908      	subs	r1, #8
 80021c0:	408c      	lsls	r4, r1
 80021c2:	0013      	movs	r3, r2
 80021c4:	408f      	lsls	r7, r1
 80021c6:	4323      	orrs	r3, r4
 80021c8:	469b      	mov	fp, r3
 80021ca:	46b9      	mov	r9, r7
 80021cc:	2300      	movs	r3, #0
 80021ce:	4e2d      	ldr	r6, [pc, #180]	; (8002284 <__aeabi_dmul+0x1ec>)
 80021d0:	2700      	movs	r7, #0
 80021d2:	1a36      	subs	r6, r6, r0
 80021d4:	9302      	str	r3, [sp, #8]
 80021d6:	e784      	b.n	80020e2 <__aeabi_dmul+0x4a>
 80021d8:	4653      	mov	r3, sl
 80021da:	4323      	orrs	r3, r4
 80021dc:	d12a      	bne.n	8002234 <__aeabi_dmul+0x19c>
 80021de:	2400      	movs	r4, #0
 80021e0:	2002      	movs	r0, #2
 80021e2:	e796      	b.n	8002112 <__aeabi_dmul+0x7a>
 80021e4:	4653      	mov	r3, sl
 80021e6:	4323      	orrs	r3, r4
 80021e8:	d020      	beq.n	800222c <__aeabi_dmul+0x194>
 80021ea:	2c00      	cmp	r4, #0
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dmul+0x158>
 80021ee:	e157      	b.n	80024a0 <__aeabi_dmul+0x408>
 80021f0:	0020      	movs	r0, r4
 80021f2:	f000 fe3f 	bl	8002e74 <__clzsi2>
 80021f6:	0003      	movs	r3, r0
 80021f8:	3b0b      	subs	r3, #11
 80021fa:	2b1c      	cmp	r3, #28
 80021fc:	dd00      	ble.n	8002200 <__aeabi_dmul+0x168>
 80021fe:	e149      	b.n	8002494 <__aeabi_dmul+0x3fc>
 8002200:	211d      	movs	r1, #29
 8002202:	1acb      	subs	r3, r1, r3
 8002204:	4651      	mov	r1, sl
 8002206:	0002      	movs	r2, r0
 8002208:	40d9      	lsrs	r1, r3
 800220a:	4653      	mov	r3, sl
 800220c:	3a08      	subs	r2, #8
 800220e:	4094      	lsls	r4, r2
 8002210:	4093      	lsls	r3, r2
 8002212:	430c      	orrs	r4, r1
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <__aeabi_dmul+0x1ec>)
 8002216:	1a12      	subs	r2, r2, r0
 8002218:	2000      	movs	r0, #0
 800221a:	e77a      	b.n	8002112 <__aeabi_dmul+0x7a>
 800221c:	2501      	movs	r5, #1
 800221e:	9b01      	ldr	r3, [sp, #4]
 8002220:	4c14      	ldr	r4, [pc, #80]	; (8002274 <__aeabi_dmul+0x1dc>)
 8002222:	401d      	ands	r5, r3
 8002224:	2300      	movs	r3, #0
 8002226:	2200      	movs	r2, #0
 8002228:	4699      	mov	r9, r3
 800222a:	e79c      	b.n	8002166 <__aeabi_dmul+0xce>
 800222c:	2400      	movs	r4, #0
 800222e:	2200      	movs	r2, #0
 8002230:	2001      	movs	r0, #1
 8002232:	e76e      	b.n	8002112 <__aeabi_dmul+0x7a>
 8002234:	4653      	mov	r3, sl
 8002236:	2003      	movs	r0, #3
 8002238:	e76b      	b.n	8002112 <__aeabi_dmul+0x7a>
 800223a:	2300      	movs	r3, #0
 800223c:	469b      	mov	fp, r3
 800223e:	3301      	adds	r3, #1
 8002240:	2704      	movs	r7, #4
 8002242:	2600      	movs	r6, #0
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	e74c      	b.n	80020e2 <__aeabi_dmul+0x4a>
 8002248:	2303      	movs	r3, #3
 800224a:	4681      	mov	r9, r0
 800224c:	270c      	movs	r7, #12
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	e747      	b.n	80020e2 <__aeabi_dmul+0x4a>
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	2300      	movs	r3, #0
 8002256:	2500      	movs	r5, #0
 8002258:	0312      	lsls	r2, r2, #12
 800225a:	4699      	mov	r9, r3
 800225c:	4c05      	ldr	r4, [pc, #20]	; (8002274 <__aeabi_dmul+0x1dc>)
 800225e:	e782      	b.n	8002166 <__aeabi_dmul+0xce>
 8002260:	465c      	mov	r4, fp
 8002262:	464b      	mov	r3, r9
 8002264:	9802      	ldr	r0, [sp, #8]
 8002266:	e76f      	b.n	8002148 <__aeabi_dmul+0xb0>
 8002268:	465c      	mov	r4, fp
 800226a:	464b      	mov	r3, r9
 800226c:	9501      	str	r5, [sp, #4]
 800226e:	9802      	ldr	r0, [sp, #8]
 8002270:	e76a      	b.n	8002148 <__aeabi_dmul+0xb0>
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	000007ff 	.word	0x000007ff
 8002278:	fffffc01 	.word	0xfffffc01
 800227c:	08009730 	.word	0x08009730
 8002280:	800fffff 	.word	0x800fffff
 8002284:	fffffc0d 	.word	0xfffffc0d
 8002288:	464a      	mov	r2, r9
 800228a:	4649      	mov	r1, r9
 800228c:	0c17      	lsrs	r7, r2, #16
 800228e:	0c1a      	lsrs	r2, r3, #16
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	0c1b      	lsrs	r3, r3, #16
 8002294:	0408      	lsls	r0, r1, #16
 8002296:	0019      	movs	r1, r3
 8002298:	0c00      	lsrs	r0, r0, #16
 800229a:	4341      	muls	r1, r0
 800229c:	0015      	movs	r5, r2
 800229e:	4688      	mov	r8, r1
 80022a0:	0019      	movs	r1, r3
 80022a2:	437d      	muls	r5, r7
 80022a4:	4379      	muls	r1, r7
 80022a6:	9503      	str	r5, [sp, #12]
 80022a8:	4689      	mov	r9, r1
 80022aa:	0029      	movs	r1, r5
 80022ac:	0015      	movs	r5, r2
 80022ae:	4345      	muls	r5, r0
 80022b0:	444d      	add	r5, r9
 80022b2:	9502      	str	r5, [sp, #8]
 80022b4:	4645      	mov	r5, r8
 80022b6:	0c2d      	lsrs	r5, r5, #16
 80022b8:	46aa      	mov	sl, r5
 80022ba:	9d02      	ldr	r5, [sp, #8]
 80022bc:	4455      	add	r5, sl
 80022be:	45a9      	cmp	r9, r5
 80022c0:	d906      	bls.n	80022d0 <__aeabi_dmul+0x238>
 80022c2:	468a      	mov	sl, r1
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0249      	lsls	r1, r1, #9
 80022c8:	4689      	mov	r9, r1
 80022ca:	44ca      	add	sl, r9
 80022cc:	4651      	mov	r1, sl
 80022ce:	9103      	str	r1, [sp, #12]
 80022d0:	0c29      	lsrs	r1, r5, #16
 80022d2:	9104      	str	r1, [sp, #16]
 80022d4:	4641      	mov	r1, r8
 80022d6:	0409      	lsls	r1, r1, #16
 80022d8:	042d      	lsls	r5, r5, #16
 80022da:	0c09      	lsrs	r1, r1, #16
 80022dc:	4688      	mov	r8, r1
 80022de:	0029      	movs	r1, r5
 80022e0:	0c25      	lsrs	r5, r4, #16
 80022e2:	0424      	lsls	r4, r4, #16
 80022e4:	4441      	add	r1, r8
 80022e6:	0c24      	lsrs	r4, r4, #16
 80022e8:	9105      	str	r1, [sp, #20]
 80022ea:	0021      	movs	r1, r4
 80022ec:	4341      	muls	r1, r0
 80022ee:	4688      	mov	r8, r1
 80022f0:	0021      	movs	r1, r4
 80022f2:	4379      	muls	r1, r7
 80022f4:	468a      	mov	sl, r1
 80022f6:	4368      	muls	r0, r5
 80022f8:	4641      	mov	r1, r8
 80022fa:	4450      	add	r0, sl
 80022fc:	4681      	mov	r9, r0
 80022fe:	0c08      	lsrs	r0, r1, #16
 8002300:	4448      	add	r0, r9
 8002302:	436f      	muls	r7, r5
 8002304:	4582      	cmp	sl, r0
 8002306:	d903      	bls.n	8002310 <__aeabi_dmul+0x278>
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0249      	lsls	r1, r1, #9
 800230c:	4689      	mov	r9, r1
 800230e:	444f      	add	r7, r9
 8002310:	0c01      	lsrs	r1, r0, #16
 8002312:	4689      	mov	r9, r1
 8002314:	0039      	movs	r1, r7
 8002316:	4449      	add	r1, r9
 8002318:	9102      	str	r1, [sp, #8]
 800231a:	4641      	mov	r1, r8
 800231c:	040f      	lsls	r7, r1, #16
 800231e:	9904      	ldr	r1, [sp, #16]
 8002320:	0c3f      	lsrs	r7, r7, #16
 8002322:	4688      	mov	r8, r1
 8002324:	0400      	lsls	r0, r0, #16
 8002326:	19c0      	adds	r0, r0, r7
 8002328:	4480      	add	r8, r0
 800232a:	4641      	mov	r1, r8
 800232c:	9104      	str	r1, [sp, #16]
 800232e:	4659      	mov	r1, fp
 8002330:	0c0f      	lsrs	r7, r1, #16
 8002332:	0409      	lsls	r1, r1, #16
 8002334:	0c09      	lsrs	r1, r1, #16
 8002336:	4688      	mov	r8, r1
 8002338:	4359      	muls	r1, r3
 800233a:	468a      	mov	sl, r1
 800233c:	0039      	movs	r1, r7
 800233e:	4351      	muls	r1, r2
 8002340:	4689      	mov	r9, r1
 8002342:	4641      	mov	r1, r8
 8002344:	434a      	muls	r2, r1
 8002346:	4651      	mov	r1, sl
 8002348:	0c09      	lsrs	r1, r1, #16
 800234a:	468b      	mov	fp, r1
 800234c:	437b      	muls	r3, r7
 800234e:	18d2      	adds	r2, r2, r3
 8002350:	445a      	add	r2, fp
 8002352:	4293      	cmp	r3, r2
 8002354:	d903      	bls.n	800235e <__aeabi_dmul+0x2c6>
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	025b      	lsls	r3, r3, #9
 800235a:	469b      	mov	fp, r3
 800235c:	44d9      	add	r9, fp
 800235e:	4651      	mov	r1, sl
 8002360:	0409      	lsls	r1, r1, #16
 8002362:	0c09      	lsrs	r1, r1, #16
 8002364:	468a      	mov	sl, r1
 8002366:	4641      	mov	r1, r8
 8002368:	4361      	muls	r1, r4
 800236a:	437c      	muls	r4, r7
 800236c:	0c13      	lsrs	r3, r2, #16
 800236e:	0412      	lsls	r2, r2, #16
 8002370:	444b      	add	r3, r9
 8002372:	4452      	add	r2, sl
 8002374:	46a1      	mov	r9, r4
 8002376:	468a      	mov	sl, r1
 8002378:	003c      	movs	r4, r7
 800237a:	4641      	mov	r1, r8
 800237c:	436c      	muls	r4, r5
 800237e:	434d      	muls	r5, r1
 8002380:	4651      	mov	r1, sl
 8002382:	444d      	add	r5, r9
 8002384:	0c0f      	lsrs	r7, r1, #16
 8002386:	197d      	adds	r5, r7, r5
 8002388:	45a9      	cmp	r9, r5
 800238a:	d903      	bls.n	8002394 <__aeabi_dmul+0x2fc>
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	0249      	lsls	r1, r1, #9
 8002390:	4688      	mov	r8, r1
 8002392:	4444      	add	r4, r8
 8002394:	9f04      	ldr	r7, [sp, #16]
 8002396:	9903      	ldr	r1, [sp, #12]
 8002398:	46b8      	mov	r8, r7
 800239a:	4441      	add	r1, r8
 800239c:	468b      	mov	fp, r1
 800239e:	4583      	cmp	fp, r0
 80023a0:	4180      	sbcs	r0, r0
 80023a2:	4241      	negs	r1, r0
 80023a4:	4688      	mov	r8, r1
 80023a6:	4651      	mov	r1, sl
 80023a8:	0408      	lsls	r0, r1, #16
 80023aa:	042f      	lsls	r7, r5, #16
 80023ac:	0c00      	lsrs	r0, r0, #16
 80023ae:	183f      	adds	r7, r7, r0
 80023b0:	4658      	mov	r0, fp
 80023b2:	9902      	ldr	r1, [sp, #8]
 80023b4:	1810      	adds	r0, r2, r0
 80023b6:	4689      	mov	r9, r1
 80023b8:	4290      	cmp	r0, r2
 80023ba:	4192      	sbcs	r2, r2
 80023bc:	444f      	add	r7, r9
 80023be:	46ba      	mov	sl, r7
 80023c0:	4252      	negs	r2, r2
 80023c2:	4699      	mov	r9, r3
 80023c4:	4693      	mov	fp, r2
 80023c6:	44c2      	add	sl, r8
 80023c8:	44d1      	add	r9, sl
 80023ca:	44cb      	add	fp, r9
 80023cc:	428f      	cmp	r7, r1
 80023ce:	41bf      	sbcs	r7, r7
 80023d0:	45c2      	cmp	sl, r8
 80023d2:	4189      	sbcs	r1, r1
 80023d4:	4599      	cmp	r9, r3
 80023d6:	419b      	sbcs	r3, r3
 80023d8:	4593      	cmp	fp, r2
 80023da:	4192      	sbcs	r2, r2
 80023dc:	427f      	negs	r7, r7
 80023de:	4249      	negs	r1, r1
 80023e0:	0c2d      	lsrs	r5, r5, #16
 80023e2:	4252      	negs	r2, r2
 80023e4:	430f      	orrs	r7, r1
 80023e6:	425b      	negs	r3, r3
 80023e8:	4313      	orrs	r3, r2
 80023ea:	197f      	adds	r7, r7, r5
 80023ec:	18ff      	adds	r7, r7, r3
 80023ee:	465b      	mov	r3, fp
 80023f0:	193c      	adds	r4, r7, r4
 80023f2:	0ddb      	lsrs	r3, r3, #23
 80023f4:	9a05      	ldr	r2, [sp, #20]
 80023f6:	0264      	lsls	r4, r4, #9
 80023f8:	431c      	orrs	r4, r3
 80023fa:	0243      	lsls	r3, r0, #9
 80023fc:	4313      	orrs	r3, r2
 80023fe:	1e5d      	subs	r5, r3, #1
 8002400:	41ab      	sbcs	r3, r5
 8002402:	465a      	mov	r2, fp
 8002404:	0dc0      	lsrs	r0, r0, #23
 8002406:	4303      	orrs	r3, r0
 8002408:	0252      	lsls	r2, r2, #9
 800240a:	4313      	orrs	r3, r2
 800240c:	01e2      	lsls	r2, r4, #7
 800240e:	d556      	bpl.n	80024be <__aeabi_dmul+0x426>
 8002410:	2001      	movs	r0, #1
 8002412:	085a      	lsrs	r2, r3, #1
 8002414:	4003      	ands	r3, r0
 8002416:	4313      	orrs	r3, r2
 8002418:	07e2      	lsls	r2, r4, #31
 800241a:	4313      	orrs	r3, r2
 800241c:	0864      	lsrs	r4, r4, #1
 800241e:	485a      	ldr	r0, [pc, #360]	; (8002588 <__aeabi_dmul+0x4f0>)
 8002420:	4460      	add	r0, ip
 8002422:	2800      	cmp	r0, #0
 8002424:	dd4d      	ble.n	80024c2 <__aeabi_dmul+0x42a>
 8002426:	075a      	lsls	r2, r3, #29
 8002428:	d009      	beq.n	800243e <__aeabi_dmul+0x3a6>
 800242a:	220f      	movs	r2, #15
 800242c:	401a      	ands	r2, r3
 800242e:	2a04      	cmp	r2, #4
 8002430:	d005      	beq.n	800243e <__aeabi_dmul+0x3a6>
 8002432:	1d1a      	adds	r2, r3, #4
 8002434:	429a      	cmp	r2, r3
 8002436:	419b      	sbcs	r3, r3
 8002438:	425b      	negs	r3, r3
 800243a:	18e4      	adds	r4, r4, r3
 800243c:	0013      	movs	r3, r2
 800243e:	01e2      	lsls	r2, r4, #7
 8002440:	d504      	bpl.n	800244c <__aeabi_dmul+0x3b4>
 8002442:	2080      	movs	r0, #128	; 0x80
 8002444:	4a51      	ldr	r2, [pc, #324]	; (800258c <__aeabi_dmul+0x4f4>)
 8002446:	00c0      	lsls	r0, r0, #3
 8002448:	4014      	ands	r4, r2
 800244a:	4460      	add	r0, ip
 800244c:	4a50      	ldr	r2, [pc, #320]	; (8002590 <__aeabi_dmul+0x4f8>)
 800244e:	4290      	cmp	r0, r2
 8002450:	dd00      	ble.n	8002454 <__aeabi_dmul+0x3bc>
 8002452:	e6e3      	b.n	800221c <__aeabi_dmul+0x184>
 8002454:	2501      	movs	r5, #1
 8002456:	08db      	lsrs	r3, r3, #3
 8002458:	0762      	lsls	r2, r4, #29
 800245a:	431a      	orrs	r2, r3
 800245c:	0264      	lsls	r4, r4, #9
 800245e:	9b01      	ldr	r3, [sp, #4]
 8002460:	4691      	mov	r9, r2
 8002462:	0b22      	lsrs	r2, r4, #12
 8002464:	0544      	lsls	r4, r0, #21
 8002466:	0d64      	lsrs	r4, r4, #21
 8002468:	401d      	ands	r5, r3
 800246a:	e67c      	b.n	8002166 <__aeabi_dmul+0xce>
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	4659      	mov	r1, fp
 8002470:	0312      	lsls	r2, r2, #12
 8002472:	4211      	tst	r1, r2
 8002474:	d008      	beq.n	8002488 <__aeabi_dmul+0x3f0>
 8002476:	4214      	tst	r4, r2
 8002478:	d106      	bne.n	8002488 <__aeabi_dmul+0x3f0>
 800247a:	4322      	orrs	r2, r4
 800247c:	0312      	lsls	r2, r2, #12
 800247e:	0b12      	lsrs	r2, r2, #12
 8002480:	4645      	mov	r5, r8
 8002482:	4699      	mov	r9, r3
 8002484:	4c43      	ldr	r4, [pc, #268]	; (8002594 <__aeabi_dmul+0x4fc>)
 8002486:	e66e      	b.n	8002166 <__aeabi_dmul+0xce>
 8002488:	465b      	mov	r3, fp
 800248a:	431a      	orrs	r2, r3
 800248c:	0312      	lsls	r2, r2, #12
 800248e:	0b12      	lsrs	r2, r2, #12
 8002490:	4c40      	ldr	r4, [pc, #256]	; (8002594 <__aeabi_dmul+0x4fc>)
 8002492:	e668      	b.n	8002166 <__aeabi_dmul+0xce>
 8002494:	0003      	movs	r3, r0
 8002496:	4654      	mov	r4, sl
 8002498:	3b28      	subs	r3, #40	; 0x28
 800249a:	409c      	lsls	r4, r3
 800249c:	2300      	movs	r3, #0
 800249e:	e6b9      	b.n	8002214 <__aeabi_dmul+0x17c>
 80024a0:	f000 fce8 	bl	8002e74 <__clzsi2>
 80024a4:	3020      	adds	r0, #32
 80024a6:	e6a6      	b.n	80021f6 <__aeabi_dmul+0x15e>
 80024a8:	0003      	movs	r3, r0
 80024aa:	3b28      	subs	r3, #40	; 0x28
 80024ac:	409f      	lsls	r7, r3
 80024ae:	2300      	movs	r3, #0
 80024b0:	46bb      	mov	fp, r7
 80024b2:	4699      	mov	r9, r3
 80024b4:	e68a      	b.n	80021cc <__aeabi_dmul+0x134>
 80024b6:	f000 fcdd 	bl	8002e74 <__clzsi2>
 80024ba:	3020      	adds	r0, #32
 80024bc:	e674      	b.n	80021a8 <__aeabi_dmul+0x110>
 80024be:	46b4      	mov	ip, r6
 80024c0:	e7ad      	b.n	800241e <__aeabi_dmul+0x386>
 80024c2:	2501      	movs	r5, #1
 80024c4:	1a2a      	subs	r2, r5, r0
 80024c6:	2a38      	cmp	r2, #56	; 0x38
 80024c8:	dd06      	ble.n	80024d8 <__aeabi_dmul+0x440>
 80024ca:	9b01      	ldr	r3, [sp, #4]
 80024cc:	2400      	movs	r4, #0
 80024ce:	401d      	ands	r5, r3
 80024d0:	2300      	movs	r3, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	4699      	mov	r9, r3
 80024d6:	e646      	b.n	8002166 <__aeabi_dmul+0xce>
 80024d8:	2a1f      	cmp	r2, #31
 80024da:	dc21      	bgt.n	8002520 <__aeabi_dmul+0x488>
 80024dc:	2520      	movs	r5, #32
 80024de:	0020      	movs	r0, r4
 80024e0:	1aad      	subs	r5, r5, r2
 80024e2:	001e      	movs	r6, r3
 80024e4:	40ab      	lsls	r3, r5
 80024e6:	40a8      	lsls	r0, r5
 80024e8:	40d6      	lsrs	r6, r2
 80024ea:	1e5d      	subs	r5, r3, #1
 80024ec:	41ab      	sbcs	r3, r5
 80024ee:	4330      	orrs	r0, r6
 80024f0:	4318      	orrs	r0, r3
 80024f2:	40d4      	lsrs	r4, r2
 80024f4:	0743      	lsls	r3, r0, #29
 80024f6:	d009      	beq.n	800250c <__aeabi_dmul+0x474>
 80024f8:	230f      	movs	r3, #15
 80024fa:	4003      	ands	r3, r0
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d005      	beq.n	800250c <__aeabi_dmul+0x474>
 8002500:	0003      	movs	r3, r0
 8002502:	1d18      	adds	r0, r3, #4
 8002504:	4298      	cmp	r0, r3
 8002506:	419b      	sbcs	r3, r3
 8002508:	425b      	negs	r3, r3
 800250a:	18e4      	adds	r4, r4, r3
 800250c:	0223      	lsls	r3, r4, #8
 800250e:	d521      	bpl.n	8002554 <__aeabi_dmul+0x4bc>
 8002510:	2501      	movs	r5, #1
 8002512:	9b01      	ldr	r3, [sp, #4]
 8002514:	2401      	movs	r4, #1
 8002516:	401d      	ands	r5, r3
 8002518:	2300      	movs	r3, #0
 800251a:	2200      	movs	r2, #0
 800251c:	4699      	mov	r9, r3
 800251e:	e622      	b.n	8002166 <__aeabi_dmul+0xce>
 8002520:	251f      	movs	r5, #31
 8002522:	0021      	movs	r1, r4
 8002524:	426d      	negs	r5, r5
 8002526:	1a28      	subs	r0, r5, r0
 8002528:	40c1      	lsrs	r1, r0
 800252a:	0008      	movs	r0, r1
 800252c:	2a20      	cmp	r2, #32
 800252e:	d01d      	beq.n	800256c <__aeabi_dmul+0x4d4>
 8002530:	355f      	adds	r5, #95	; 0x5f
 8002532:	1aaa      	subs	r2, r5, r2
 8002534:	4094      	lsls	r4, r2
 8002536:	4323      	orrs	r3, r4
 8002538:	1e5c      	subs	r4, r3, #1
 800253a:	41a3      	sbcs	r3, r4
 800253c:	2507      	movs	r5, #7
 800253e:	4303      	orrs	r3, r0
 8002540:	401d      	ands	r5, r3
 8002542:	2200      	movs	r2, #0
 8002544:	2d00      	cmp	r5, #0
 8002546:	d009      	beq.n	800255c <__aeabi_dmul+0x4c4>
 8002548:	220f      	movs	r2, #15
 800254a:	2400      	movs	r4, #0
 800254c:	401a      	ands	r2, r3
 800254e:	0018      	movs	r0, r3
 8002550:	2a04      	cmp	r2, #4
 8002552:	d1d6      	bne.n	8002502 <__aeabi_dmul+0x46a>
 8002554:	0003      	movs	r3, r0
 8002556:	0765      	lsls	r5, r4, #29
 8002558:	0264      	lsls	r4, r4, #9
 800255a:	0b22      	lsrs	r2, r4, #12
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	432b      	orrs	r3, r5
 8002560:	2501      	movs	r5, #1
 8002562:	4699      	mov	r9, r3
 8002564:	9b01      	ldr	r3, [sp, #4]
 8002566:	2400      	movs	r4, #0
 8002568:	401d      	ands	r5, r3
 800256a:	e5fc      	b.n	8002166 <__aeabi_dmul+0xce>
 800256c:	2400      	movs	r4, #0
 800256e:	e7e2      	b.n	8002536 <__aeabi_dmul+0x49e>
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	2501      	movs	r5, #1
 8002574:	0312      	lsls	r2, r2, #12
 8002576:	4322      	orrs	r2, r4
 8002578:	9901      	ldr	r1, [sp, #4]
 800257a:	0312      	lsls	r2, r2, #12
 800257c:	0b12      	lsrs	r2, r2, #12
 800257e:	400d      	ands	r5, r1
 8002580:	4699      	mov	r9, r3
 8002582:	4c04      	ldr	r4, [pc, #16]	; (8002594 <__aeabi_dmul+0x4fc>)
 8002584:	e5ef      	b.n	8002166 <__aeabi_dmul+0xce>
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	000003ff 	.word	0x000003ff
 800258c:	feffffff 	.word	0xfeffffff
 8002590:	000007fe 	.word	0x000007fe
 8002594:	000007ff 	.word	0x000007ff

08002598 <__aeabi_dsub>:
 8002598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259a:	4646      	mov	r6, r8
 800259c:	46d6      	mov	lr, sl
 800259e:	464f      	mov	r7, r9
 80025a0:	030c      	lsls	r4, r1, #12
 80025a2:	b5c0      	push	{r6, r7, lr}
 80025a4:	0fcd      	lsrs	r5, r1, #31
 80025a6:	004e      	lsls	r6, r1, #1
 80025a8:	0a61      	lsrs	r1, r4, #9
 80025aa:	0f44      	lsrs	r4, r0, #29
 80025ac:	430c      	orrs	r4, r1
 80025ae:	00c1      	lsls	r1, r0, #3
 80025b0:	0058      	lsls	r0, r3, #1
 80025b2:	0d40      	lsrs	r0, r0, #21
 80025b4:	4684      	mov	ip, r0
 80025b6:	468a      	mov	sl, r1
 80025b8:	000f      	movs	r7, r1
 80025ba:	0319      	lsls	r1, r3, #12
 80025bc:	0f50      	lsrs	r0, r2, #29
 80025be:	0a49      	lsrs	r1, r1, #9
 80025c0:	4301      	orrs	r1, r0
 80025c2:	48c6      	ldr	r0, [pc, #792]	; (80028dc <__aeabi_dsub+0x344>)
 80025c4:	0d76      	lsrs	r6, r6, #21
 80025c6:	46a8      	mov	r8, r5
 80025c8:	0fdb      	lsrs	r3, r3, #31
 80025ca:	00d2      	lsls	r2, r2, #3
 80025cc:	4584      	cmp	ip, r0
 80025ce:	d100      	bne.n	80025d2 <__aeabi_dsub+0x3a>
 80025d0:	e0d8      	b.n	8002784 <__aeabi_dsub+0x1ec>
 80025d2:	2001      	movs	r0, #1
 80025d4:	4043      	eors	r3, r0
 80025d6:	42ab      	cmp	r3, r5
 80025d8:	d100      	bne.n	80025dc <__aeabi_dsub+0x44>
 80025da:	e0a6      	b.n	800272a <__aeabi_dsub+0x192>
 80025dc:	4660      	mov	r0, ip
 80025de:	1a35      	subs	r5, r6, r0
 80025e0:	2d00      	cmp	r5, #0
 80025e2:	dc00      	bgt.n	80025e6 <__aeabi_dsub+0x4e>
 80025e4:	e105      	b.n	80027f2 <__aeabi_dsub+0x25a>
 80025e6:	2800      	cmp	r0, #0
 80025e8:	d110      	bne.n	800260c <__aeabi_dsub+0x74>
 80025ea:	000b      	movs	r3, r1
 80025ec:	4313      	orrs	r3, r2
 80025ee:	d100      	bne.n	80025f2 <__aeabi_dsub+0x5a>
 80025f0:	e0d7      	b.n	80027a2 <__aeabi_dsub+0x20a>
 80025f2:	1e6b      	subs	r3, r5, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d000      	beq.n	80025fa <__aeabi_dsub+0x62>
 80025f8:	e14b      	b.n	8002892 <__aeabi_dsub+0x2fa>
 80025fa:	4653      	mov	r3, sl
 80025fc:	1a9f      	subs	r7, r3, r2
 80025fe:	45ba      	cmp	sl, r7
 8002600:	4180      	sbcs	r0, r0
 8002602:	1a64      	subs	r4, r4, r1
 8002604:	4240      	negs	r0, r0
 8002606:	1a24      	subs	r4, r4, r0
 8002608:	2601      	movs	r6, #1
 800260a:	e01e      	b.n	800264a <__aeabi_dsub+0xb2>
 800260c:	4bb3      	ldr	r3, [pc, #716]	; (80028dc <__aeabi_dsub+0x344>)
 800260e:	429e      	cmp	r6, r3
 8002610:	d048      	beq.n	80026a4 <__aeabi_dsub+0x10c>
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	041b      	lsls	r3, r3, #16
 8002616:	4319      	orrs	r1, r3
 8002618:	2d38      	cmp	r5, #56	; 0x38
 800261a:	dd00      	ble.n	800261e <__aeabi_dsub+0x86>
 800261c:	e119      	b.n	8002852 <__aeabi_dsub+0x2ba>
 800261e:	2d1f      	cmp	r5, #31
 8002620:	dd00      	ble.n	8002624 <__aeabi_dsub+0x8c>
 8002622:	e14c      	b.n	80028be <__aeabi_dsub+0x326>
 8002624:	2320      	movs	r3, #32
 8002626:	000f      	movs	r7, r1
 8002628:	1b5b      	subs	r3, r3, r5
 800262a:	0010      	movs	r0, r2
 800262c:	409a      	lsls	r2, r3
 800262e:	409f      	lsls	r7, r3
 8002630:	40e8      	lsrs	r0, r5
 8002632:	1e53      	subs	r3, r2, #1
 8002634:	419a      	sbcs	r2, r3
 8002636:	40e9      	lsrs	r1, r5
 8002638:	4307      	orrs	r7, r0
 800263a:	4317      	orrs	r7, r2
 800263c:	4653      	mov	r3, sl
 800263e:	1bdf      	subs	r7, r3, r7
 8002640:	1a61      	subs	r1, r4, r1
 8002642:	45ba      	cmp	sl, r7
 8002644:	41a4      	sbcs	r4, r4
 8002646:	4264      	negs	r4, r4
 8002648:	1b0c      	subs	r4, r1, r4
 800264a:	0223      	lsls	r3, r4, #8
 800264c:	d400      	bmi.n	8002650 <__aeabi_dsub+0xb8>
 800264e:	e0c5      	b.n	80027dc <__aeabi_dsub+0x244>
 8002650:	0264      	lsls	r4, r4, #9
 8002652:	0a65      	lsrs	r5, r4, #9
 8002654:	2d00      	cmp	r5, #0
 8002656:	d100      	bne.n	800265a <__aeabi_dsub+0xc2>
 8002658:	e0f6      	b.n	8002848 <__aeabi_dsub+0x2b0>
 800265a:	0028      	movs	r0, r5
 800265c:	f000 fc0a 	bl	8002e74 <__clzsi2>
 8002660:	0003      	movs	r3, r0
 8002662:	3b08      	subs	r3, #8
 8002664:	2b1f      	cmp	r3, #31
 8002666:	dd00      	ble.n	800266a <__aeabi_dsub+0xd2>
 8002668:	e0e9      	b.n	800283e <__aeabi_dsub+0x2a6>
 800266a:	2220      	movs	r2, #32
 800266c:	003c      	movs	r4, r7
 800266e:	1ad2      	subs	r2, r2, r3
 8002670:	409d      	lsls	r5, r3
 8002672:	40d4      	lsrs	r4, r2
 8002674:	409f      	lsls	r7, r3
 8002676:	4325      	orrs	r5, r4
 8002678:	429e      	cmp	r6, r3
 800267a:	dd00      	ble.n	800267e <__aeabi_dsub+0xe6>
 800267c:	e0db      	b.n	8002836 <__aeabi_dsub+0x29e>
 800267e:	1b9e      	subs	r6, r3, r6
 8002680:	1c73      	adds	r3, r6, #1
 8002682:	2b1f      	cmp	r3, #31
 8002684:	dd00      	ble.n	8002688 <__aeabi_dsub+0xf0>
 8002686:	e10a      	b.n	800289e <__aeabi_dsub+0x306>
 8002688:	2220      	movs	r2, #32
 800268a:	0038      	movs	r0, r7
 800268c:	1ad2      	subs	r2, r2, r3
 800268e:	0029      	movs	r1, r5
 8002690:	4097      	lsls	r7, r2
 8002692:	002c      	movs	r4, r5
 8002694:	4091      	lsls	r1, r2
 8002696:	40d8      	lsrs	r0, r3
 8002698:	1e7a      	subs	r2, r7, #1
 800269a:	4197      	sbcs	r7, r2
 800269c:	40dc      	lsrs	r4, r3
 800269e:	2600      	movs	r6, #0
 80026a0:	4301      	orrs	r1, r0
 80026a2:	430f      	orrs	r7, r1
 80026a4:	077b      	lsls	r3, r7, #29
 80026a6:	d009      	beq.n	80026bc <__aeabi_dsub+0x124>
 80026a8:	230f      	movs	r3, #15
 80026aa:	403b      	ands	r3, r7
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d005      	beq.n	80026bc <__aeabi_dsub+0x124>
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	42bb      	cmp	r3, r7
 80026b4:	41bf      	sbcs	r7, r7
 80026b6:	427f      	negs	r7, r7
 80026b8:	19e4      	adds	r4, r4, r7
 80026ba:	001f      	movs	r7, r3
 80026bc:	0223      	lsls	r3, r4, #8
 80026be:	d525      	bpl.n	800270c <__aeabi_dsub+0x174>
 80026c0:	4b86      	ldr	r3, [pc, #536]	; (80028dc <__aeabi_dsub+0x344>)
 80026c2:	3601      	adds	r6, #1
 80026c4:	429e      	cmp	r6, r3
 80026c6:	d100      	bne.n	80026ca <__aeabi_dsub+0x132>
 80026c8:	e0af      	b.n	800282a <__aeabi_dsub+0x292>
 80026ca:	4b85      	ldr	r3, [pc, #532]	; (80028e0 <__aeabi_dsub+0x348>)
 80026cc:	2501      	movs	r5, #1
 80026ce:	401c      	ands	r4, r3
 80026d0:	4643      	mov	r3, r8
 80026d2:	0762      	lsls	r2, r4, #29
 80026d4:	08ff      	lsrs	r7, r7, #3
 80026d6:	0264      	lsls	r4, r4, #9
 80026d8:	0576      	lsls	r6, r6, #21
 80026da:	4317      	orrs	r7, r2
 80026dc:	0b24      	lsrs	r4, r4, #12
 80026de:	0d76      	lsrs	r6, r6, #21
 80026e0:	401d      	ands	r5, r3
 80026e2:	2100      	movs	r1, #0
 80026e4:	0324      	lsls	r4, r4, #12
 80026e6:	0b23      	lsrs	r3, r4, #12
 80026e8:	0d0c      	lsrs	r4, r1, #20
 80026ea:	4a7e      	ldr	r2, [pc, #504]	; (80028e4 <__aeabi_dsub+0x34c>)
 80026ec:	0524      	lsls	r4, r4, #20
 80026ee:	431c      	orrs	r4, r3
 80026f0:	4014      	ands	r4, r2
 80026f2:	0533      	lsls	r3, r6, #20
 80026f4:	4323      	orrs	r3, r4
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	07ed      	lsls	r5, r5, #31
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	432b      	orrs	r3, r5
 80026fe:	0038      	movs	r0, r7
 8002700:	0019      	movs	r1, r3
 8002702:	bc1c      	pop	{r2, r3, r4}
 8002704:	4690      	mov	r8, r2
 8002706:	4699      	mov	r9, r3
 8002708:	46a2      	mov	sl, r4
 800270a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270c:	2501      	movs	r5, #1
 800270e:	4643      	mov	r3, r8
 8002710:	0762      	lsls	r2, r4, #29
 8002712:	08ff      	lsrs	r7, r7, #3
 8002714:	4317      	orrs	r7, r2
 8002716:	08e4      	lsrs	r4, r4, #3
 8002718:	401d      	ands	r5, r3
 800271a:	4b70      	ldr	r3, [pc, #448]	; (80028dc <__aeabi_dsub+0x344>)
 800271c:	429e      	cmp	r6, r3
 800271e:	d036      	beq.n	800278e <__aeabi_dsub+0x1f6>
 8002720:	0324      	lsls	r4, r4, #12
 8002722:	0576      	lsls	r6, r6, #21
 8002724:	0b24      	lsrs	r4, r4, #12
 8002726:	0d76      	lsrs	r6, r6, #21
 8002728:	e7db      	b.n	80026e2 <__aeabi_dsub+0x14a>
 800272a:	4663      	mov	r3, ip
 800272c:	1af3      	subs	r3, r6, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	dc00      	bgt.n	8002734 <__aeabi_dsub+0x19c>
 8002732:	e094      	b.n	800285e <__aeabi_dsub+0x2c6>
 8002734:	4660      	mov	r0, ip
 8002736:	2800      	cmp	r0, #0
 8002738:	d035      	beq.n	80027a6 <__aeabi_dsub+0x20e>
 800273a:	4868      	ldr	r0, [pc, #416]	; (80028dc <__aeabi_dsub+0x344>)
 800273c:	4286      	cmp	r6, r0
 800273e:	d0b1      	beq.n	80026a4 <__aeabi_dsub+0x10c>
 8002740:	2780      	movs	r7, #128	; 0x80
 8002742:	043f      	lsls	r7, r7, #16
 8002744:	4339      	orrs	r1, r7
 8002746:	2b38      	cmp	r3, #56	; 0x38
 8002748:	dc00      	bgt.n	800274c <__aeabi_dsub+0x1b4>
 800274a:	e0fd      	b.n	8002948 <__aeabi_dsub+0x3b0>
 800274c:	430a      	orrs	r2, r1
 800274e:	0017      	movs	r7, r2
 8002750:	2100      	movs	r1, #0
 8002752:	1e7a      	subs	r2, r7, #1
 8002754:	4197      	sbcs	r7, r2
 8002756:	4457      	add	r7, sl
 8002758:	4557      	cmp	r7, sl
 800275a:	4180      	sbcs	r0, r0
 800275c:	1909      	adds	r1, r1, r4
 800275e:	4244      	negs	r4, r0
 8002760:	190c      	adds	r4, r1, r4
 8002762:	0223      	lsls	r3, r4, #8
 8002764:	d53a      	bpl.n	80027dc <__aeabi_dsub+0x244>
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <__aeabi_dsub+0x344>)
 8002768:	3601      	adds	r6, #1
 800276a:	429e      	cmp	r6, r3
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x1d8>
 800276e:	e14b      	b.n	8002a08 <__aeabi_dsub+0x470>
 8002770:	2201      	movs	r2, #1
 8002772:	4b5b      	ldr	r3, [pc, #364]	; (80028e0 <__aeabi_dsub+0x348>)
 8002774:	401c      	ands	r4, r3
 8002776:	087b      	lsrs	r3, r7, #1
 8002778:	4017      	ands	r7, r2
 800277a:	431f      	orrs	r7, r3
 800277c:	07e2      	lsls	r2, r4, #31
 800277e:	4317      	orrs	r7, r2
 8002780:	0864      	lsrs	r4, r4, #1
 8002782:	e78f      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002784:	0008      	movs	r0, r1
 8002786:	4310      	orrs	r0, r2
 8002788:	d000      	beq.n	800278c <__aeabi_dsub+0x1f4>
 800278a:	e724      	b.n	80025d6 <__aeabi_dsub+0x3e>
 800278c:	e721      	b.n	80025d2 <__aeabi_dsub+0x3a>
 800278e:	0023      	movs	r3, r4
 8002790:	433b      	orrs	r3, r7
 8002792:	d100      	bne.n	8002796 <__aeabi_dsub+0x1fe>
 8002794:	e1b9      	b.n	8002b0a <__aeabi_dsub+0x572>
 8002796:	2280      	movs	r2, #128	; 0x80
 8002798:	0312      	lsls	r2, r2, #12
 800279a:	4314      	orrs	r4, r2
 800279c:	0324      	lsls	r4, r4, #12
 800279e:	0b24      	lsrs	r4, r4, #12
 80027a0:	e79f      	b.n	80026e2 <__aeabi_dsub+0x14a>
 80027a2:	002e      	movs	r6, r5
 80027a4:	e77e      	b.n	80026a4 <__aeabi_dsub+0x10c>
 80027a6:	0008      	movs	r0, r1
 80027a8:	4310      	orrs	r0, r2
 80027aa:	d100      	bne.n	80027ae <__aeabi_dsub+0x216>
 80027ac:	e0ca      	b.n	8002944 <__aeabi_dsub+0x3ac>
 80027ae:	1e58      	subs	r0, r3, #1
 80027b0:	4684      	mov	ip, r0
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d000      	beq.n	80027b8 <__aeabi_dsub+0x220>
 80027b6:	e0e7      	b.n	8002988 <__aeabi_dsub+0x3f0>
 80027b8:	4452      	add	r2, sl
 80027ba:	4552      	cmp	r2, sl
 80027bc:	4180      	sbcs	r0, r0
 80027be:	1864      	adds	r4, r4, r1
 80027c0:	4240      	negs	r0, r0
 80027c2:	1824      	adds	r4, r4, r0
 80027c4:	0017      	movs	r7, r2
 80027c6:	2601      	movs	r6, #1
 80027c8:	0223      	lsls	r3, r4, #8
 80027ca:	d507      	bpl.n	80027dc <__aeabi_dsub+0x244>
 80027cc:	2602      	movs	r6, #2
 80027ce:	e7cf      	b.n	8002770 <__aeabi_dsub+0x1d8>
 80027d0:	4664      	mov	r4, ip
 80027d2:	432c      	orrs	r4, r5
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x240>
 80027d6:	e1b3      	b.n	8002b40 <__aeabi_dsub+0x5a8>
 80027d8:	002c      	movs	r4, r5
 80027da:	4667      	mov	r7, ip
 80027dc:	077b      	lsls	r3, r7, #29
 80027de:	d000      	beq.n	80027e2 <__aeabi_dsub+0x24a>
 80027e0:	e762      	b.n	80026a8 <__aeabi_dsub+0x110>
 80027e2:	0763      	lsls	r3, r4, #29
 80027e4:	08ff      	lsrs	r7, r7, #3
 80027e6:	431f      	orrs	r7, r3
 80027e8:	2501      	movs	r5, #1
 80027ea:	4643      	mov	r3, r8
 80027ec:	08e4      	lsrs	r4, r4, #3
 80027ee:	401d      	ands	r5, r3
 80027f0:	e793      	b.n	800271a <__aeabi_dsub+0x182>
 80027f2:	2d00      	cmp	r5, #0
 80027f4:	d178      	bne.n	80028e8 <__aeabi_dsub+0x350>
 80027f6:	1c75      	adds	r5, r6, #1
 80027f8:	056d      	lsls	r5, r5, #21
 80027fa:	0d6d      	lsrs	r5, r5, #21
 80027fc:	2d01      	cmp	r5, #1
 80027fe:	dc00      	bgt.n	8002802 <__aeabi_dsub+0x26a>
 8002800:	e0f2      	b.n	80029e8 <__aeabi_dsub+0x450>
 8002802:	4650      	mov	r0, sl
 8002804:	1a80      	subs	r0, r0, r2
 8002806:	4582      	cmp	sl, r0
 8002808:	41bf      	sbcs	r7, r7
 800280a:	1a65      	subs	r5, r4, r1
 800280c:	427f      	negs	r7, r7
 800280e:	1bed      	subs	r5, r5, r7
 8002810:	4684      	mov	ip, r0
 8002812:	0228      	lsls	r0, r5, #8
 8002814:	d400      	bmi.n	8002818 <__aeabi_dsub+0x280>
 8002816:	e08c      	b.n	8002932 <__aeabi_dsub+0x39a>
 8002818:	4650      	mov	r0, sl
 800281a:	1a17      	subs	r7, r2, r0
 800281c:	42ba      	cmp	r2, r7
 800281e:	4192      	sbcs	r2, r2
 8002820:	1b0c      	subs	r4, r1, r4
 8002822:	4255      	negs	r5, r2
 8002824:	1b65      	subs	r5, r4, r5
 8002826:	4698      	mov	r8, r3
 8002828:	e714      	b.n	8002654 <__aeabi_dsub+0xbc>
 800282a:	2501      	movs	r5, #1
 800282c:	4643      	mov	r3, r8
 800282e:	2400      	movs	r4, #0
 8002830:	401d      	ands	r5, r3
 8002832:	2700      	movs	r7, #0
 8002834:	e755      	b.n	80026e2 <__aeabi_dsub+0x14a>
 8002836:	4c2a      	ldr	r4, [pc, #168]	; (80028e0 <__aeabi_dsub+0x348>)
 8002838:	1af6      	subs	r6, r6, r3
 800283a:	402c      	ands	r4, r5
 800283c:	e732      	b.n	80026a4 <__aeabi_dsub+0x10c>
 800283e:	003d      	movs	r5, r7
 8002840:	3828      	subs	r0, #40	; 0x28
 8002842:	4085      	lsls	r5, r0
 8002844:	2700      	movs	r7, #0
 8002846:	e717      	b.n	8002678 <__aeabi_dsub+0xe0>
 8002848:	0038      	movs	r0, r7
 800284a:	f000 fb13 	bl	8002e74 <__clzsi2>
 800284e:	3020      	adds	r0, #32
 8002850:	e706      	b.n	8002660 <__aeabi_dsub+0xc8>
 8002852:	430a      	orrs	r2, r1
 8002854:	0017      	movs	r7, r2
 8002856:	2100      	movs	r1, #0
 8002858:	1e7a      	subs	r2, r7, #1
 800285a:	4197      	sbcs	r7, r2
 800285c:	e6ee      	b.n	800263c <__aeabi_dsub+0xa4>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d000      	beq.n	8002864 <__aeabi_dsub+0x2cc>
 8002862:	e0e5      	b.n	8002a30 <__aeabi_dsub+0x498>
 8002864:	1c73      	adds	r3, r6, #1
 8002866:	469c      	mov	ip, r3
 8002868:	055b      	lsls	r3, r3, #21
 800286a:	0d5b      	lsrs	r3, r3, #21
 800286c:	2b01      	cmp	r3, #1
 800286e:	dc00      	bgt.n	8002872 <__aeabi_dsub+0x2da>
 8002870:	e09f      	b.n	80029b2 <__aeabi_dsub+0x41a>
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <__aeabi_dsub+0x344>)
 8002874:	459c      	cmp	ip, r3
 8002876:	d100      	bne.n	800287a <__aeabi_dsub+0x2e2>
 8002878:	e0c5      	b.n	8002a06 <__aeabi_dsub+0x46e>
 800287a:	4452      	add	r2, sl
 800287c:	4552      	cmp	r2, sl
 800287e:	4180      	sbcs	r0, r0
 8002880:	1864      	adds	r4, r4, r1
 8002882:	4240      	negs	r0, r0
 8002884:	1824      	adds	r4, r4, r0
 8002886:	07e7      	lsls	r7, r4, #31
 8002888:	0852      	lsrs	r2, r2, #1
 800288a:	4317      	orrs	r7, r2
 800288c:	0864      	lsrs	r4, r4, #1
 800288e:	4666      	mov	r6, ip
 8002890:	e708      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002892:	4812      	ldr	r0, [pc, #72]	; (80028dc <__aeabi_dsub+0x344>)
 8002894:	4285      	cmp	r5, r0
 8002896:	d100      	bne.n	800289a <__aeabi_dsub+0x302>
 8002898:	e085      	b.n	80029a6 <__aeabi_dsub+0x40e>
 800289a:	001d      	movs	r5, r3
 800289c:	e6bc      	b.n	8002618 <__aeabi_dsub+0x80>
 800289e:	0029      	movs	r1, r5
 80028a0:	3e1f      	subs	r6, #31
 80028a2:	40f1      	lsrs	r1, r6
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x312>
 80028a8:	e07f      	b.n	80029aa <__aeabi_dsub+0x412>
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	409d      	lsls	r5, r3
 80028b0:	432f      	orrs	r7, r5
 80028b2:	1e7d      	subs	r5, r7, #1
 80028b4:	41af      	sbcs	r7, r5
 80028b6:	2400      	movs	r4, #0
 80028b8:	430f      	orrs	r7, r1
 80028ba:	2600      	movs	r6, #0
 80028bc:	e78e      	b.n	80027dc <__aeabi_dsub+0x244>
 80028be:	002b      	movs	r3, r5
 80028c0:	000f      	movs	r7, r1
 80028c2:	3b20      	subs	r3, #32
 80028c4:	40df      	lsrs	r7, r3
 80028c6:	2d20      	cmp	r5, #32
 80028c8:	d071      	beq.n	80029ae <__aeabi_dsub+0x416>
 80028ca:	2340      	movs	r3, #64	; 0x40
 80028cc:	1b5d      	subs	r5, r3, r5
 80028ce:	40a9      	lsls	r1, r5
 80028d0:	430a      	orrs	r2, r1
 80028d2:	1e51      	subs	r1, r2, #1
 80028d4:	418a      	sbcs	r2, r1
 80028d6:	2100      	movs	r1, #0
 80028d8:	4317      	orrs	r7, r2
 80028da:	e6af      	b.n	800263c <__aeabi_dsub+0xa4>
 80028dc:	000007ff 	.word	0x000007ff
 80028e0:	ff7fffff 	.word	0xff7fffff
 80028e4:	800fffff 	.word	0x800fffff
 80028e8:	2e00      	cmp	r6, #0
 80028ea:	d03e      	beq.n	800296a <__aeabi_dsub+0x3d2>
 80028ec:	4eb3      	ldr	r6, [pc, #716]	; (8002bbc <__aeabi_dsub+0x624>)
 80028ee:	45b4      	cmp	ip, r6
 80028f0:	d045      	beq.n	800297e <__aeabi_dsub+0x3e6>
 80028f2:	2680      	movs	r6, #128	; 0x80
 80028f4:	0436      	lsls	r6, r6, #16
 80028f6:	426d      	negs	r5, r5
 80028f8:	4334      	orrs	r4, r6
 80028fa:	2d38      	cmp	r5, #56	; 0x38
 80028fc:	dd00      	ble.n	8002900 <__aeabi_dsub+0x368>
 80028fe:	e0a8      	b.n	8002a52 <__aeabi_dsub+0x4ba>
 8002900:	2d1f      	cmp	r5, #31
 8002902:	dd00      	ble.n	8002906 <__aeabi_dsub+0x36e>
 8002904:	e11f      	b.n	8002b46 <__aeabi_dsub+0x5ae>
 8002906:	2620      	movs	r6, #32
 8002908:	0027      	movs	r7, r4
 800290a:	4650      	mov	r0, sl
 800290c:	1b76      	subs	r6, r6, r5
 800290e:	40b7      	lsls	r7, r6
 8002910:	40e8      	lsrs	r0, r5
 8002912:	4307      	orrs	r7, r0
 8002914:	4650      	mov	r0, sl
 8002916:	40b0      	lsls	r0, r6
 8002918:	1e46      	subs	r6, r0, #1
 800291a:	41b0      	sbcs	r0, r6
 800291c:	40ec      	lsrs	r4, r5
 800291e:	4338      	orrs	r0, r7
 8002920:	1a17      	subs	r7, r2, r0
 8002922:	42ba      	cmp	r2, r7
 8002924:	4192      	sbcs	r2, r2
 8002926:	1b0c      	subs	r4, r1, r4
 8002928:	4252      	negs	r2, r2
 800292a:	1aa4      	subs	r4, r4, r2
 800292c:	4666      	mov	r6, ip
 800292e:	4698      	mov	r8, r3
 8002930:	e68b      	b.n	800264a <__aeabi_dsub+0xb2>
 8002932:	4664      	mov	r4, ip
 8002934:	4667      	mov	r7, ip
 8002936:	432c      	orrs	r4, r5
 8002938:	d000      	beq.n	800293c <__aeabi_dsub+0x3a4>
 800293a:	e68b      	b.n	8002654 <__aeabi_dsub+0xbc>
 800293c:	2500      	movs	r5, #0
 800293e:	2600      	movs	r6, #0
 8002940:	2700      	movs	r7, #0
 8002942:	e6ea      	b.n	800271a <__aeabi_dsub+0x182>
 8002944:	001e      	movs	r6, r3
 8002946:	e6ad      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002948:	2b1f      	cmp	r3, #31
 800294a:	dc60      	bgt.n	8002a0e <__aeabi_dsub+0x476>
 800294c:	2720      	movs	r7, #32
 800294e:	1af8      	subs	r0, r7, r3
 8002950:	000f      	movs	r7, r1
 8002952:	4684      	mov	ip, r0
 8002954:	4087      	lsls	r7, r0
 8002956:	0010      	movs	r0, r2
 8002958:	40d8      	lsrs	r0, r3
 800295a:	4307      	orrs	r7, r0
 800295c:	4660      	mov	r0, ip
 800295e:	4082      	lsls	r2, r0
 8002960:	1e50      	subs	r0, r2, #1
 8002962:	4182      	sbcs	r2, r0
 8002964:	40d9      	lsrs	r1, r3
 8002966:	4317      	orrs	r7, r2
 8002968:	e6f5      	b.n	8002756 <__aeabi_dsub+0x1be>
 800296a:	0026      	movs	r6, r4
 800296c:	4650      	mov	r0, sl
 800296e:	4306      	orrs	r6, r0
 8002970:	d005      	beq.n	800297e <__aeabi_dsub+0x3e6>
 8002972:	43ed      	mvns	r5, r5
 8002974:	2d00      	cmp	r5, #0
 8002976:	d0d3      	beq.n	8002920 <__aeabi_dsub+0x388>
 8002978:	4e90      	ldr	r6, [pc, #576]	; (8002bbc <__aeabi_dsub+0x624>)
 800297a:	45b4      	cmp	ip, r6
 800297c:	d1bd      	bne.n	80028fa <__aeabi_dsub+0x362>
 800297e:	000c      	movs	r4, r1
 8002980:	0017      	movs	r7, r2
 8002982:	4666      	mov	r6, ip
 8002984:	4698      	mov	r8, r3
 8002986:	e68d      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002988:	488c      	ldr	r0, [pc, #560]	; (8002bbc <__aeabi_dsub+0x624>)
 800298a:	4283      	cmp	r3, r0
 800298c:	d00b      	beq.n	80029a6 <__aeabi_dsub+0x40e>
 800298e:	4663      	mov	r3, ip
 8002990:	e6d9      	b.n	8002746 <__aeabi_dsub+0x1ae>
 8002992:	2d00      	cmp	r5, #0
 8002994:	d000      	beq.n	8002998 <__aeabi_dsub+0x400>
 8002996:	e096      	b.n	8002ac6 <__aeabi_dsub+0x52e>
 8002998:	0008      	movs	r0, r1
 800299a:	4310      	orrs	r0, r2
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x408>
 800299e:	e0e2      	b.n	8002b66 <__aeabi_dsub+0x5ce>
 80029a0:	000c      	movs	r4, r1
 80029a2:	0017      	movs	r7, r2
 80029a4:	4698      	mov	r8, r3
 80029a6:	4e85      	ldr	r6, [pc, #532]	; (8002bbc <__aeabi_dsub+0x624>)
 80029a8:	e67c      	b.n	80026a4 <__aeabi_dsub+0x10c>
 80029aa:	2500      	movs	r5, #0
 80029ac:	e780      	b.n	80028b0 <__aeabi_dsub+0x318>
 80029ae:	2100      	movs	r1, #0
 80029b0:	e78e      	b.n	80028d0 <__aeabi_dsub+0x338>
 80029b2:	0023      	movs	r3, r4
 80029b4:	4650      	mov	r0, sl
 80029b6:	4303      	orrs	r3, r0
 80029b8:	2e00      	cmp	r6, #0
 80029ba:	d000      	beq.n	80029be <__aeabi_dsub+0x426>
 80029bc:	e0a8      	b.n	8002b10 <__aeabi_dsub+0x578>
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d100      	bne.n	80029c4 <__aeabi_dsub+0x42c>
 80029c2:	e0de      	b.n	8002b82 <__aeabi_dsub+0x5ea>
 80029c4:	000b      	movs	r3, r1
 80029c6:	4313      	orrs	r3, r2
 80029c8:	d100      	bne.n	80029cc <__aeabi_dsub+0x434>
 80029ca:	e66b      	b.n	80026a4 <__aeabi_dsub+0x10c>
 80029cc:	4452      	add	r2, sl
 80029ce:	4552      	cmp	r2, sl
 80029d0:	4180      	sbcs	r0, r0
 80029d2:	1864      	adds	r4, r4, r1
 80029d4:	4240      	negs	r0, r0
 80029d6:	1824      	adds	r4, r4, r0
 80029d8:	0017      	movs	r7, r2
 80029da:	0223      	lsls	r3, r4, #8
 80029dc:	d400      	bmi.n	80029e0 <__aeabi_dsub+0x448>
 80029de:	e6fd      	b.n	80027dc <__aeabi_dsub+0x244>
 80029e0:	4b77      	ldr	r3, [pc, #476]	; (8002bc0 <__aeabi_dsub+0x628>)
 80029e2:	4666      	mov	r6, ip
 80029e4:	401c      	ands	r4, r3
 80029e6:	e65d      	b.n	80026a4 <__aeabi_dsub+0x10c>
 80029e8:	0025      	movs	r5, r4
 80029ea:	4650      	mov	r0, sl
 80029ec:	4305      	orrs	r5, r0
 80029ee:	2e00      	cmp	r6, #0
 80029f0:	d1cf      	bne.n	8002992 <__aeabi_dsub+0x3fa>
 80029f2:	2d00      	cmp	r5, #0
 80029f4:	d14f      	bne.n	8002a96 <__aeabi_dsub+0x4fe>
 80029f6:	000c      	movs	r4, r1
 80029f8:	4314      	orrs	r4, r2
 80029fa:	d100      	bne.n	80029fe <__aeabi_dsub+0x466>
 80029fc:	e0a0      	b.n	8002b40 <__aeabi_dsub+0x5a8>
 80029fe:	000c      	movs	r4, r1
 8002a00:	0017      	movs	r7, r2
 8002a02:	4698      	mov	r8, r3
 8002a04:	e64e      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002a06:	4666      	mov	r6, ip
 8002a08:	2400      	movs	r4, #0
 8002a0a:	2700      	movs	r7, #0
 8002a0c:	e685      	b.n	800271a <__aeabi_dsub+0x182>
 8002a0e:	001f      	movs	r7, r3
 8002a10:	0008      	movs	r0, r1
 8002a12:	3f20      	subs	r7, #32
 8002a14:	40f8      	lsrs	r0, r7
 8002a16:	0007      	movs	r7, r0
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dsub+0x486>
 8002a1c:	e08e      	b.n	8002b3c <__aeabi_dsub+0x5a4>
 8002a1e:	2040      	movs	r0, #64	; 0x40
 8002a20:	1ac3      	subs	r3, r0, r3
 8002a22:	4099      	lsls	r1, r3
 8002a24:	430a      	orrs	r2, r1
 8002a26:	1e51      	subs	r1, r2, #1
 8002a28:	418a      	sbcs	r2, r1
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4317      	orrs	r7, r2
 8002a2e:	e692      	b.n	8002756 <__aeabi_dsub+0x1be>
 8002a30:	2e00      	cmp	r6, #0
 8002a32:	d114      	bne.n	8002a5e <__aeabi_dsub+0x4c6>
 8002a34:	0026      	movs	r6, r4
 8002a36:	4650      	mov	r0, sl
 8002a38:	4306      	orrs	r6, r0
 8002a3a:	d062      	beq.n	8002b02 <__aeabi_dsub+0x56a>
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d15c      	bne.n	8002afc <__aeabi_dsub+0x564>
 8002a42:	1887      	adds	r7, r0, r2
 8002a44:	4297      	cmp	r7, r2
 8002a46:	4192      	sbcs	r2, r2
 8002a48:	1864      	adds	r4, r4, r1
 8002a4a:	4252      	negs	r2, r2
 8002a4c:	18a4      	adds	r4, r4, r2
 8002a4e:	4666      	mov	r6, ip
 8002a50:	e687      	b.n	8002762 <__aeabi_dsub+0x1ca>
 8002a52:	4650      	mov	r0, sl
 8002a54:	4320      	orrs	r0, r4
 8002a56:	1e44      	subs	r4, r0, #1
 8002a58:	41a0      	sbcs	r0, r4
 8002a5a:	2400      	movs	r4, #0
 8002a5c:	e760      	b.n	8002920 <__aeabi_dsub+0x388>
 8002a5e:	4e57      	ldr	r6, [pc, #348]	; (8002bbc <__aeabi_dsub+0x624>)
 8002a60:	45b4      	cmp	ip, r6
 8002a62:	d04e      	beq.n	8002b02 <__aeabi_dsub+0x56a>
 8002a64:	2680      	movs	r6, #128	; 0x80
 8002a66:	0436      	lsls	r6, r6, #16
 8002a68:	425b      	negs	r3, r3
 8002a6a:	4334      	orrs	r4, r6
 8002a6c:	2b38      	cmp	r3, #56	; 0x38
 8002a6e:	dd00      	ble.n	8002a72 <__aeabi_dsub+0x4da>
 8002a70:	e07f      	b.n	8002b72 <__aeabi_dsub+0x5da>
 8002a72:	2b1f      	cmp	r3, #31
 8002a74:	dd00      	ble.n	8002a78 <__aeabi_dsub+0x4e0>
 8002a76:	e08b      	b.n	8002b90 <__aeabi_dsub+0x5f8>
 8002a78:	2620      	movs	r6, #32
 8002a7a:	0027      	movs	r7, r4
 8002a7c:	4650      	mov	r0, sl
 8002a7e:	1af6      	subs	r6, r6, r3
 8002a80:	40b7      	lsls	r7, r6
 8002a82:	40d8      	lsrs	r0, r3
 8002a84:	4307      	orrs	r7, r0
 8002a86:	4650      	mov	r0, sl
 8002a88:	40b0      	lsls	r0, r6
 8002a8a:	1e46      	subs	r6, r0, #1
 8002a8c:	41b0      	sbcs	r0, r6
 8002a8e:	4307      	orrs	r7, r0
 8002a90:	40dc      	lsrs	r4, r3
 8002a92:	18bf      	adds	r7, r7, r2
 8002a94:	e7d6      	b.n	8002a44 <__aeabi_dsub+0x4ac>
 8002a96:	000d      	movs	r5, r1
 8002a98:	4315      	orrs	r5, r2
 8002a9a:	d100      	bne.n	8002a9e <__aeabi_dsub+0x506>
 8002a9c:	e602      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002a9e:	4650      	mov	r0, sl
 8002aa0:	1a80      	subs	r0, r0, r2
 8002aa2:	4582      	cmp	sl, r0
 8002aa4:	41bf      	sbcs	r7, r7
 8002aa6:	1a65      	subs	r5, r4, r1
 8002aa8:	427f      	negs	r7, r7
 8002aaa:	1bed      	subs	r5, r5, r7
 8002aac:	4684      	mov	ip, r0
 8002aae:	0228      	lsls	r0, r5, #8
 8002ab0:	d400      	bmi.n	8002ab4 <__aeabi_dsub+0x51c>
 8002ab2:	e68d      	b.n	80027d0 <__aeabi_dsub+0x238>
 8002ab4:	4650      	mov	r0, sl
 8002ab6:	1a17      	subs	r7, r2, r0
 8002ab8:	42ba      	cmp	r2, r7
 8002aba:	4192      	sbcs	r2, r2
 8002abc:	1b0c      	subs	r4, r1, r4
 8002abe:	4252      	negs	r2, r2
 8002ac0:	1aa4      	subs	r4, r4, r2
 8002ac2:	4698      	mov	r8, r3
 8002ac4:	e5ee      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002ac6:	000d      	movs	r5, r1
 8002ac8:	4315      	orrs	r5, r2
 8002aca:	d100      	bne.n	8002ace <__aeabi_dsub+0x536>
 8002acc:	e76b      	b.n	80029a6 <__aeabi_dsub+0x40e>
 8002ace:	4650      	mov	r0, sl
 8002ad0:	0767      	lsls	r7, r4, #29
 8002ad2:	08c0      	lsrs	r0, r0, #3
 8002ad4:	4307      	orrs	r7, r0
 8002ad6:	2080      	movs	r0, #128	; 0x80
 8002ad8:	08e4      	lsrs	r4, r4, #3
 8002ada:	0300      	lsls	r0, r0, #12
 8002adc:	4204      	tst	r4, r0
 8002ade:	d007      	beq.n	8002af0 <__aeabi_dsub+0x558>
 8002ae0:	08cd      	lsrs	r5, r1, #3
 8002ae2:	4205      	tst	r5, r0
 8002ae4:	d104      	bne.n	8002af0 <__aeabi_dsub+0x558>
 8002ae6:	002c      	movs	r4, r5
 8002ae8:	4698      	mov	r8, r3
 8002aea:	08d7      	lsrs	r7, r2, #3
 8002aec:	0749      	lsls	r1, r1, #29
 8002aee:	430f      	orrs	r7, r1
 8002af0:	0f7b      	lsrs	r3, r7, #29
 8002af2:	00e4      	lsls	r4, r4, #3
 8002af4:	431c      	orrs	r4, r3
 8002af6:	00ff      	lsls	r7, r7, #3
 8002af8:	4e30      	ldr	r6, [pc, #192]	; (8002bbc <__aeabi_dsub+0x624>)
 8002afa:	e5d3      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002afc:	4e2f      	ldr	r6, [pc, #188]	; (8002bbc <__aeabi_dsub+0x624>)
 8002afe:	45b4      	cmp	ip, r6
 8002b00:	d1b4      	bne.n	8002a6c <__aeabi_dsub+0x4d4>
 8002b02:	000c      	movs	r4, r1
 8002b04:	0017      	movs	r7, r2
 8002b06:	4666      	mov	r6, ip
 8002b08:	e5cc      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002b0a:	2700      	movs	r7, #0
 8002b0c:	2400      	movs	r4, #0
 8002b0e:	e5e8      	b.n	80026e2 <__aeabi_dsub+0x14a>
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d039      	beq.n	8002b88 <__aeabi_dsub+0x5f0>
 8002b14:	000b      	movs	r3, r1
 8002b16:	4313      	orrs	r3, r2
 8002b18:	d100      	bne.n	8002b1c <__aeabi_dsub+0x584>
 8002b1a:	e744      	b.n	80029a6 <__aeabi_dsub+0x40e>
 8002b1c:	08c0      	lsrs	r0, r0, #3
 8002b1e:	0767      	lsls	r7, r4, #29
 8002b20:	4307      	orrs	r7, r0
 8002b22:	2080      	movs	r0, #128	; 0x80
 8002b24:	08e4      	lsrs	r4, r4, #3
 8002b26:	0300      	lsls	r0, r0, #12
 8002b28:	4204      	tst	r4, r0
 8002b2a:	d0e1      	beq.n	8002af0 <__aeabi_dsub+0x558>
 8002b2c:	08cb      	lsrs	r3, r1, #3
 8002b2e:	4203      	tst	r3, r0
 8002b30:	d1de      	bne.n	8002af0 <__aeabi_dsub+0x558>
 8002b32:	08d7      	lsrs	r7, r2, #3
 8002b34:	0749      	lsls	r1, r1, #29
 8002b36:	430f      	orrs	r7, r1
 8002b38:	001c      	movs	r4, r3
 8002b3a:	e7d9      	b.n	8002af0 <__aeabi_dsub+0x558>
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	e771      	b.n	8002a24 <__aeabi_dsub+0x48c>
 8002b40:	2500      	movs	r5, #0
 8002b42:	2700      	movs	r7, #0
 8002b44:	e5e9      	b.n	800271a <__aeabi_dsub+0x182>
 8002b46:	002e      	movs	r6, r5
 8002b48:	0027      	movs	r7, r4
 8002b4a:	3e20      	subs	r6, #32
 8002b4c:	40f7      	lsrs	r7, r6
 8002b4e:	2d20      	cmp	r5, #32
 8002b50:	d02f      	beq.n	8002bb2 <__aeabi_dsub+0x61a>
 8002b52:	2640      	movs	r6, #64	; 0x40
 8002b54:	1b75      	subs	r5, r6, r5
 8002b56:	40ac      	lsls	r4, r5
 8002b58:	4650      	mov	r0, sl
 8002b5a:	4320      	orrs	r0, r4
 8002b5c:	1e44      	subs	r4, r0, #1
 8002b5e:	41a0      	sbcs	r0, r4
 8002b60:	2400      	movs	r4, #0
 8002b62:	4338      	orrs	r0, r7
 8002b64:	e6dc      	b.n	8002920 <__aeabi_dsub+0x388>
 8002b66:	2480      	movs	r4, #128	; 0x80
 8002b68:	2500      	movs	r5, #0
 8002b6a:	0324      	lsls	r4, r4, #12
 8002b6c:	4e13      	ldr	r6, [pc, #76]	; (8002bbc <__aeabi_dsub+0x624>)
 8002b6e:	2700      	movs	r7, #0
 8002b70:	e5d3      	b.n	800271a <__aeabi_dsub+0x182>
 8002b72:	4650      	mov	r0, sl
 8002b74:	4320      	orrs	r0, r4
 8002b76:	0007      	movs	r7, r0
 8002b78:	1e78      	subs	r0, r7, #1
 8002b7a:	4187      	sbcs	r7, r0
 8002b7c:	2400      	movs	r4, #0
 8002b7e:	18bf      	adds	r7, r7, r2
 8002b80:	e760      	b.n	8002a44 <__aeabi_dsub+0x4ac>
 8002b82:	000c      	movs	r4, r1
 8002b84:	0017      	movs	r7, r2
 8002b86:	e58d      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002b88:	000c      	movs	r4, r1
 8002b8a:	0017      	movs	r7, r2
 8002b8c:	4e0b      	ldr	r6, [pc, #44]	; (8002bbc <__aeabi_dsub+0x624>)
 8002b8e:	e589      	b.n	80026a4 <__aeabi_dsub+0x10c>
 8002b90:	001e      	movs	r6, r3
 8002b92:	0027      	movs	r7, r4
 8002b94:	3e20      	subs	r6, #32
 8002b96:	40f7      	lsrs	r7, r6
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d00c      	beq.n	8002bb6 <__aeabi_dsub+0x61e>
 8002b9c:	2640      	movs	r6, #64	; 0x40
 8002b9e:	1af3      	subs	r3, r6, r3
 8002ba0:	409c      	lsls	r4, r3
 8002ba2:	4650      	mov	r0, sl
 8002ba4:	4320      	orrs	r0, r4
 8002ba6:	1e44      	subs	r4, r0, #1
 8002ba8:	41a0      	sbcs	r0, r4
 8002baa:	4307      	orrs	r7, r0
 8002bac:	2400      	movs	r4, #0
 8002bae:	18bf      	adds	r7, r7, r2
 8002bb0:	e748      	b.n	8002a44 <__aeabi_dsub+0x4ac>
 8002bb2:	2400      	movs	r4, #0
 8002bb4:	e7d0      	b.n	8002b58 <__aeabi_dsub+0x5c0>
 8002bb6:	2400      	movs	r4, #0
 8002bb8:	e7f3      	b.n	8002ba2 <__aeabi_dsub+0x60a>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	000007ff 	.word	0x000007ff
 8002bc0:	ff7fffff 	.word	0xff7fffff

08002bc4 <__aeabi_dcmpun>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	4e0e      	ldr	r6, [pc, #56]	; (8002c00 <__aeabi_dcmpun+0x3c>)
 8002bc8:	030d      	lsls	r5, r1, #12
 8002bca:	031c      	lsls	r4, r3, #12
 8002bcc:	0049      	lsls	r1, r1, #1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	0b2d      	lsrs	r5, r5, #12
 8002bd2:	0d49      	lsrs	r1, r1, #21
 8002bd4:	0b24      	lsrs	r4, r4, #12
 8002bd6:	0d5b      	lsrs	r3, r3, #21
 8002bd8:	42b1      	cmp	r1, r6
 8002bda:	d004      	beq.n	8002be6 <__aeabi_dcmpun+0x22>
 8002bdc:	4908      	ldr	r1, [pc, #32]	; (8002c00 <__aeabi_dcmpun+0x3c>)
 8002bde:	2000      	movs	r0, #0
 8002be0:	428b      	cmp	r3, r1
 8002be2:	d008      	beq.n	8002bf6 <__aeabi_dcmpun+0x32>
 8002be4:	bd70      	pop	{r4, r5, r6, pc}
 8002be6:	4305      	orrs	r5, r0
 8002be8:	2001      	movs	r0, #1
 8002bea:	2d00      	cmp	r5, #0
 8002bec:	d1fa      	bne.n	8002be4 <__aeabi_dcmpun+0x20>
 8002bee:	4904      	ldr	r1, [pc, #16]	; (8002c00 <__aeabi_dcmpun+0x3c>)
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	428b      	cmp	r3, r1
 8002bf4:	d1f6      	bne.n	8002be4 <__aeabi_dcmpun+0x20>
 8002bf6:	4314      	orrs	r4, r2
 8002bf8:	0020      	movs	r0, r4
 8002bfa:	1e44      	subs	r4, r0, #1
 8002bfc:	41a0      	sbcs	r0, r4
 8002bfe:	e7f1      	b.n	8002be4 <__aeabi_dcmpun+0x20>
 8002c00:	000007ff 	.word	0x000007ff

08002c04 <__aeabi_d2iz>:
 8002c04:	b530      	push	{r4, r5, lr}
 8002c06:	4d13      	ldr	r5, [pc, #76]	; (8002c54 <__aeabi_d2iz+0x50>)
 8002c08:	030a      	lsls	r2, r1, #12
 8002c0a:	004b      	lsls	r3, r1, #1
 8002c0c:	0b12      	lsrs	r2, r2, #12
 8002c0e:	0d5b      	lsrs	r3, r3, #21
 8002c10:	0fc9      	lsrs	r1, r1, #31
 8002c12:	2400      	movs	r4, #0
 8002c14:	42ab      	cmp	r3, r5
 8002c16:	dd10      	ble.n	8002c3a <__aeabi_d2iz+0x36>
 8002c18:	4c0f      	ldr	r4, [pc, #60]	; (8002c58 <__aeabi_d2iz+0x54>)
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	dc0f      	bgt.n	8002c3e <__aeabi_d2iz+0x3a>
 8002c1e:	2480      	movs	r4, #128	; 0x80
 8002c20:	4d0e      	ldr	r5, [pc, #56]	; (8002c5c <__aeabi_d2iz+0x58>)
 8002c22:	0364      	lsls	r4, r4, #13
 8002c24:	4322      	orrs	r2, r4
 8002c26:	1aed      	subs	r5, r5, r3
 8002c28:	2d1f      	cmp	r5, #31
 8002c2a:	dd0b      	ble.n	8002c44 <__aeabi_d2iz+0x40>
 8002c2c:	480c      	ldr	r0, [pc, #48]	; (8002c60 <__aeabi_d2iz+0x5c>)
 8002c2e:	1ac3      	subs	r3, r0, r3
 8002c30:	40da      	lsrs	r2, r3
 8002c32:	4254      	negs	r4, r2
 8002c34:	2900      	cmp	r1, #0
 8002c36:	d100      	bne.n	8002c3a <__aeabi_d2iz+0x36>
 8002c38:	0014      	movs	r4, r2
 8002c3a:	0020      	movs	r0, r4
 8002c3c:	bd30      	pop	{r4, r5, pc}
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <__aeabi_d2iz+0x60>)
 8002c40:	18cc      	adds	r4, r1, r3
 8002c42:	e7fa      	b.n	8002c3a <__aeabi_d2iz+0x36>
 8002c44:	4c08      	ldr	r4, [pc, #32]	; (8002c68 <__aeabi_d2iz+0x64>)
 8002c46:	40e8      	lsrs	r0, r5
 8002c48:	46a4      	mov	ip, r4
 8002c4a:	4463      	add	r3, ip
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	e7ef      	b.n	8002c32 <__aeabi_d2iz+0x2e>
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	000003fe 	.word	0x000003fe
 8002c58:	0000041d 	.word	0x0000041d
 8002c5c:	00000433 	.word	0x00000433
 8002c60:	00000413 	.word	0x00000413
 8002c64:	7fffffff 	.word	0x7fffffff
 8002c68:	fffffbed 	.word	0xfffffbed

08002c6c <__aeabi_i2d>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d030      	beq.n	8002cd4 <__aeabi_i2d+0x68>
 8002c72:	17c3      	asrs	r3, r0, #31
 8002c74:	18c4      	adds	r4, r0, r3
 8002c76:	405c      	eors	r4, r3
 8002c78:	0fc5      	lsrs	r5, r0, #31
 8002c7a:	0020      	movs	r0, r4
 8002c7c:	f000 f8fa 	bl	8002e74 <__clzsi2>
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <__aeabi_i2d+0x74>)
 8002c82:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <__aeabi_i2d+0x78>)
 8002c84:	1a1b      	subs	r3, r3, r0
 8002c86:	1ad2      	subs	r2, r2, r3
 8002c88:	2a1f      	cmp	r2, #31
 8002c8a:	dd18      	ble.n	8002cbe <__aeabi_i2d+0x52>
 8002c8c:	4a16      	ldr	r2, [pc, #88]	; (8002ce8 <__aeabi_i2d+0x7c>)
 8002c8e:	1ad2      	subs	r2, r2, r3
 8002c90:	4094      	lsls	r4, r2
 8002c92:	2200      	movs	r2, #0
 8002c94:	0324      	lsls	r4, r4, #12
 8002c96:	055b      	lsls	r3, r3, #21
 8002c98:	0b24      	lsrs	r4, r4, #12
 8002c9a:	0d5b      	lsrs	r3, r3, #21
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	0010      	movs	r0, r2
 8002ca0:	0324      	lsls	r4, r4, #12
 8002ca2:	0d0a      	lsrs	r2, r1, #20
 8002ca4:	0b24      	lsrs	r4, r4, #12
 8002ca6:	0512      	lsls	r2, r2, #20
 8002ca8:	4322      	orrs	r2, r4
 8002caa:	4c10      	ldr	r4, [pc, #64]	; (8002cec <__aeabi_i2d+0x80>)
 8002cac:	051b      	lsls	r3, r3, #20
 8002cae:	4022      	ands	r2, r4
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	07ed      	lsls	r5, r5, #31
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	0019      	movs	r1, r3
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
 8002cbe:	0021      	movs	r1, r4
 8002cc0:	4091      	lsls	r1, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	210b      	movs	r1, #11
 8002cc6:	1a08      	subs	r0, r1, r0
 8002cc8:	40c4      	lsrs	r4, r0
 8002cca:	055b      	lsls	r3, r3, #21
 8002ccc:	0324      	lsls	r4, r4, #12
 8002cce:	0b24      	lsrs	r4, r4, #12
 8002cd0:	0d5b      	lsrs	r3, r3, #21
 8002cd2:	e7e3      	b.n	8002c9c <__aeabi_i2d+0x30>
 8002cd4:	2500      	movs	r5, #0
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2400      	movs	r4, #0
 8002cda:	2200      	movs	r2, #0
 8002cdc:	e7de      	b.n	8002c9c <__aeabi_i2d+0x30>
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	0000041e 	.word	0x0000041e
 8002ce4:	00000433 	.word	0x00000433
 8002ce8:	00000413 	.word	0x00000413
 8002cec:	800fffff 	.word	0x800fffff

08002cf0 <__aeabi_ui2d>:
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	1e04      	subs	r4, r0, #0
 8002cf4:	d028      	beq.n	8002d48 <__aeabi_ui2d+0x58>
 8002cf6:	f000 f8bd 	bl	8002e74 <__clzsi2>
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <__aeabi_ui2d+0x60>)
 8002cfc:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <__aeabi_ui2d+0x64>)
 8002cfe:	1a1b      	subs	r3, r3, r0
 8002d00:	1ad2      	subs	r2, r2, r3
 8002d02:	2a1f      	cmp	r2, #31
 8002d04:	dd15      	ble.n	8002d32 <__aeabi_ui2d+0x42>
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <__aeabi_ui2d+0x68>)
 8002d08:	1ad2      	subs	r2, r2, r3
 8002d0a:	4094      	lsls	r4, r2
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	0324      	lsls	r4, r4, #12
 8002d10:	055b      	lsls	r3, r3, #21
 8002d12:	0b24      	lsrs	r4, r4, #12
 8002d14:	0d5b      	lsrs	r3, r3, #21
 8002d16:	2100      	movs	r1, #0
 8002d18:	0010      	movs	r0, r2
 8002d1a:	0324      	lsls	r4, r4, #12
 8002d1c:	0d0a      	lsrs	r2, r1, #20
 8002d1e:	0b24      	lsrs	r4, r4, #12
 8002d20:	0512      	lsls	r2, r2, #20
 8002d22:	4322      	orrs	r2, r4
 8002d24:	4c0d      	ldr	r4, [pc, #52]	; (8002d5c <__aeabi_ui2d+0x6c>)
 8002d26:	051b      	lsls	r3, r3, #20
 8002d28:	4022      	ands	r2, r4
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	0859      	lsrs	r1, r3, #1
 8002d30:	bd10      	pop	{r4, pc}
 8002d32:	0021      	movs	r1, r4
 8002d34:	4091      	lsls	r1, r2
 8002d36:	000a      	movs	r2, r1
 8002d38:	210b      	movs	r1, #11
 8002d3a:	1a08      	subs	r0, r1, r0
 8002d3c:	40c4      	lsrs	r4, r0
 8002d3e:	055b      	lsls	r3, r3, #21
 8002d40:	0324      	lsls	r4, r4, #12
 8002d42:	0b24      	lsrs	r4, r4, #12
 8002d44:	0d5b      	lsrs	r3, r3, #21
 8002d46:	e7e6      	b.n	8002d16 <__aeabi_ui2d+0x26>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2400      	movs	r4, #0
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	e7e2      	b.n	8002d16 <__aeabi_ui2d+0x26>
 8002d50:	0000041e 	.word	0x0000041e
 8002d54:	00000433 	.word	0x00000433
 8002d58:	00000413 	.word	0x00000413
 8002d5c:	800fffff 	.word	0x800fffff

08002d60 <__aeabi_d2f>:
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	004c      	lsls	r4, r1, #1
 8002d64:	0d64      	lsrs	r4, r4, #21
 8002d66:	030b      	lsls	r3, r1, #12
 8002d68:	1c62      	adds	r2, r4, #1
 8002d6a:	0f45      	lsrs	r5, r0, #29
 8002d6c:	0a5b      	lsrs	r3, r3, #9
 8002d6e:	0552      	lsls	r2, r2, #21
 8002d70:	432b      	orrs	r3, r5
 8002d72:	0fc9      	lsrs	r1, r1, #31
 8002d74:	00c5      	lsls	r5, r0, #3
 8002d76:	0d52      	lsrs	r2, r2, #21
 8002d78:	2a01      	cmp	r2, #1
 8002d7a:	dd28      	ble.n	8002dce <__aeabi_d2f+0x6e>
 8002d7c:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <__aeabi_d2f+0x108>)
 8002d7e:	18a6      	adds	r6, r4, r2
 8002d80:	2efe      	cmp	r6, #254	; 0xfe
 8002d82:	dc1b      	bgt.n	8002dbc <__aeabi_d2f+0x5c>
 8002d84:	2e00      	cmp	r6, #0
 8002d86:	dd3e      	ble.n	8002e06 <__aeabi_d2f+0xa6>
 8002d88:	0180      	lsls	r0, r0, #6
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	1e50      	subs	r0, r2, #1
 8002d8e:	4182      	sbcs	r2, r0
 8002d90:	0f6d      	lsrs	r5, r5, #29
 8002d92:	432a      	orrs	r2, r5
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4313      	orrs	r3, r2
 8002d98:	075a      	lsls	r2, r3, #29
 8002d9a:	d004      	beq.n	8002da6 <__aeabi_d2f+0x46>
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	401a      	ands	r2, r3
 8002da0:	2a04      	cmp	r2, #4
 8002da2:	d000      	beq.n	8002da6 <__aeabi_d2f+0x46>
 8002da4:	3304      	adds	r3, #4
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	04d2      	lsls	r2, r2, #19
 8002daa:	401a      	ands	r2, r3
 8002dac:	d05a      	beq.n	8002e64 <__aeabi_d2f+0x104>
 8002dae:	3601      	adds	r6, #1
 8002db0:	2eff      	cmp	r6, #255	; 0xff
 8002db2:	d003      	beq.n	8002dbc <__aeabi_d2f+0x5c>
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	0a5b      	lsrs	r3, r3, #9
 8002db8:	b2f4      	uxtb	r4, r6
 8002dba:	e001      	b.n	8002dc0 <__aeabi_d2f+0x60>
 8002dbc:	24ff      	movs	r4, #255	; 0xff
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	0258      	lsls	r0, r3, #9
 8002dc2:	05e4      	lsls	r4, r4, #23
 8002dc4:	0a40      	lsrs	r0, r0, #9
 8002dc6:	07c9      	lsls	r1, r1, #31
 8002dc8:	4320      	orrs	r0, r4
 8002dca:	4308      	orrs	r0, r1
 8002dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dce:	2c00      	cmp	r4, #0
 8002dd0:	d007      	beq.n	8002de2 <__aeabi_d2f+0x82>
 8002dd2:	431d      	orrs	r5, r3
 8002dd4:	d0f2      	beq.n	8002dbc <__aeabi_d2f+0x5c>
 8002dd6:	2080      	movs	r0, #128	; 0x80
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	0480      	lsls	r0, r0, #18
 8002ddc:	4303      	orrs	r3, r0
 8002dde:	26ff      	movs	r6, #255	; 0xff
 8002de0:	e7da      	b.n	8002d98 <__aeabi_d2f+0x38>
 8002de2:	432b      	orrs	r3, r5
 8002de4:	d003      	beq.n	8002dee <__aeabi_d2f+0x8e>
 8002de6:	2305      	movs	r3, #5
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	2cff      	cmp	r4, #255	; 0xff
 8002dec:	d003      	beq.n	8002df6 <__aeabi_d2f+0x96>
 8002dee:	025b      	lsls	r3, r3, #9
 8002df0:	0a5b      	lsrs	r3, r3, #9
 8002df2:	b2e4      	uxtb	r4, r4
 8002df4:	e7e4      	b.n	8002dc0 <__aeabi_d2f+0x60>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d032      	beq.n	8002e60 <__aeabi_d2f+0x100>
 8002dfa:	2080      	movs	r0, #128	; 0x80
 8002dfc:	03c0      	lsls	r0, r0, #15
 8002dfe:	4303      	orrs	r3, r0
 8002e00:	025b      	lsls	r3, r3, #9
 8002e02:	0a5b      	lsrs	r3, r3, #9
 8002e04:	e7dc      	b.n	8002dc0 <__aeabi_d2f+0x60>
 8002e06:	0032      	movs	r2, r6
 8002e08:	3217      	adds	r2, #23
 8002e0a:	db14      	blt.n	8002e36 <__aeabi_d2f+0xd6>
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	271e      	movs	r7, #30
 8002e10:	0412      	lsls	r2, r2, #16
 8002e12:	4313      	orrs	r3, r2
 8002e14:	1bbf      	subs	r7, r7, r6
 8002e16:	2f1f      	cmp	r7, #31
 8002e18:	dc0f      	bgt.n	8002e3a <__aeabi_d2f+0xda>
 8002e1a:	4a14      	ldr	r2, [pc, #80]	; (8002e6c <__aeabi_d2f+0x10c>)
 8002e1c:	4694      	mov	ip, r2
 8002e1e:	4464      	add	r4, ip
 8002e20:	002a      	movs	r2, r5
 8002e22:	40a5      	lsls	r5, r4
 8002e24:	002e      	movs	r6, r5
 8002e26:	40a3      	lsls	r3, r4
 8002e28:	1e75      	subs	r5, r6, #1
 8002e2a:	41ae      	sbcs	r6, r5
 8002e2c:	40fa      	lsrs	r2, r7
 8002e2e:	4333      	orrs	r3, r6
 8002e30:	4313      	orrs	r3, r2
 8002e32:	2600      	movs	r6, #0
 8002e34:	e7b0      	b.n	8002d98 <__aeabi_d2f+0x38>
 8002e36:	2400      	movs	r4, #0
 8002e38:	e7d5      	b.n	8002de6 <__aeabi_d2f+0x86>
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	4252      	negs	r2, r2
 8002e3e:	1b96      	subs	r6, r2, r6
 8002e40:	001a      	movs	r2, r3
 8002e42:	40f2      	lsrs	r2, r6
 8002e44:	2f20      	cmp	r7, #32
 8002e46:	d009      	beq.n	8002e5c <__aeabi_d2f+0xfc>
 8002e48:	4809      	ldr	r0, [pc, #36]	; (8002e70 <__aeabi_d2f+0x110>)
 8002e4a:	4684      	mov	ip, r0
 8002e4c:	4464      	add	r4, ip
 8002e4e:	40a3      	lsls	r3, r4
 8002e50:	432b      	orrs	r3, r5
 8002e52:	1e5d      	subs	r5, r3, #1
 8002e54:	41ab      	sbcs	r3, r5
 8002e56:	2600      	movs	r6, #0
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	e79d      	b.n	8002d98 <__aeabi_d2f+0x38>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e7f7      	b.n	8002e50 <__aeabi_d2f+0xf0>
 8002e60:	2300      	movs	r3, #0
 8002e62:	e7ad      	b.n	8002dc0 <__aeabi_d2f+0x60>
 8002e64:	0034      	movs	r4, r6
 8002e66:	e7bf      	b.n	8002de8 <__aeabi_d2f+0x88>
 8002e68:	fffffc80 	.word	0xfffffc80
 8002e6c:	fffffc82 	.word	0xfffffc82
 8002e70:	fffffca2 	.word	0xfffffca2

08002e74 <__clzsi2>:
 8002e74:	211c      	movs	r1, #28
 8002e76:	2301      	movs	r3, #1
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	4298      	cmp	r0, r3
 8002e7c:	d301      	bcc.n	8002e82 <__clzsi2+0xe>
 8002e7e:	0c00      	lsrs	r0, r0, #16
 8002e80:	3910      	subs	r1, #16
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	4298      	cmp	r0, r3
 8002e86:	d301      	bcc.n	8002e8c <__clzsi2+0x18>
 8002e88:	0a00      	lsrs	r0, r0, #8
 8002e8a:	3908      	subs	r1, #8
 8002e8c:	091b      	lsrs	r3, r3, #4
 8002e8e:	4298      	cmp	r0, r3
 8002e90:	d301      	bcc.n	8002e96 <__clzsi2+0x22>
 8002e92:	0900      	lsrs	r0, r0, #4
 8002e94:	3904      	subs	r1, #4
 8002e96:	a202      	add	r2, pc, #8	; (adr r2, 8002ea0 <__clzsi2+0x2c>)
 8002e98:	5c10      	ldrb	r0, [r2, r0]
 8002e9a:	1840      	adds	r0, r0, r1
 8002e9c:	4770      	bx	lr
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	02020304 	.word	0x02020304
 8002ea4:	01010101 	.word	0x01010101
	...

08002eb0 <__clzdi2>:
 8002eb0:	b510      	push	{r4, lr}
 8002eb2:	2900      	cmp	r1, #0
 8002eb4:	d103      	bne.n	8002ebe <__clzdi2+0xe>
 8002eb6:	f7ff ffdd 	bl	8002e74 <__clzsi2>
 8002eba:	3020      	adds	r0, #32
 8002ebc:	e002      	b.n	8002ec4 <__clzdi2+0x14>
 8002ebe:	1c08      	adds	r0, r1, #0
 8002ec0:	f7ff ffd8 	bl	8002e74 <__clzsi2>
 8002ec4:	bd10      	pop	{r4, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)

08002ec8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_Init+0x3c>)
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_Init+0x3c>)
 8002ed8:	6812      	ldr	r2, [r2, #0]
 8002eda:	2140      	movs	r1, #64	; 0x40
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f000 f811 	bl	8002f08 <HAL_InitTick>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e001      	b.n	8002ef6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ef2:	f003 fe4d 	bl	8006b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
}
 8002efa:	0018      	movs	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	b002      	add	sp, #8
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	40022000 	.word	0x40022000

08002f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f10:	230f      	movs	r3, #15
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <HAL_InitTick+0x50>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	23fa      	movs	r3, #250	; 0xfa
 8002f1e:	0099      	lsls	r1, r3, #2
 8002f20:	0010      	movs	r0, r2
 8002f22:	f7fd f903 	bl	800012c <__udivsi3>
 8002f26:	0003      	movs	r3, r0
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f000 f8fb 	bl	8003124 <HAL_SYSTICK_Config>
 8002f2e:	1e03      	subs	r3, r0, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8002f32:	230f      	movs	r3, #15
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e006      	b.n	8002f4a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	2301      	movs	r3, #1
 8002f40:	425b      	negs	r3, r3
 8002f42:	2200      	movs	r2, #0
 8002f44:	0018      	movs	r0, r3
 8002f46:	f000 f8c7 	bl	80030d8 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002f4a:	230f      	movs	r3, #15
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	781b      	ldrb	r3, [r3, #0]
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b004      	add	sp, #16
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000000 	.word	0x20000000

08002f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  uwTick++;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_IncTick+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <HAL_IncTick+0x14>)
 8002f68:	601a      	str	r2, [r3, #0]
}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200006c8 	.word	0x200006c8

08002f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  return uwTick;
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <HAL_GetTick+0x10>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	200006c8 	.word	0x200006c8

08002f88 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	0002      	movs	r2, r0
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <NVIC_EnableIRQ+0x28>)
 8002f96:	1dfa      	adds	r2, r7, #7
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	0011      	movs	r1, r2
 8002f9c:	221f      	movs	r2, #31
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4091      	lsls	r1, r2
 8002fa4:	000a      	movs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	e000e100 	.word	0xe000e100

08002fb4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fb4:	b5b0      	push	{r4, r5, r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	0002      	movs	r2, r0
 8002fbc:	6039      	str	r1, [r7, #0]
 8002fbe:	1dfb      	adds	r3, r7, #7
 8002fc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc8:	d932      	bls.n	8003030 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fca:	4c2f      	ldr	r4, [pc, #188]	; (8003088 <NVIC_SetPriority+0xd4>)
 8002fcc:	1dfb      	adds	r3, r7, #7
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	230f      	movs	r3, #15
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	3b08      	subs	r3, #8
 8002fd8:	0899      	lsrs	r1, r3, #2
 8002fda:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <NVIC_SetPriority+0xd4>)
 8002fdc:	1dfb      	adds	r3, r7, #7
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	230f      	movs	r3, #15
 8002fe4:	4003      	ands	r3, r0
 8002fe6:	3b08      	subs	r3, #8
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3306      	adds	r3, #6
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	18d3      	adds	r3, r2, r3
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	1dfa      	adds	r2, r7, #7
 8002ff6:	7812      	ldrb	r2, [r2, #0]
 8002ff8:	0010      	movs	r0, r2
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	4002      	ands	r2, r0
 8002ffe:	00d2      	lsls	r2, r2, #3
 8003000:	20ff      	movs	r0, #255	; 0xff
 8003002:	4090      	lsls	r0, r2
 8003004:	0002      	movs	r2, r0
 8003006:	43d2      	mvns	r2, r2
 8003008:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	20ff      	movs	r0, #255	; 0xff
 8003010:	4018      	ands	r0, r3
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	001d      	movs	r5, r3
 8003018:	2303      	movs	r3, #3
 800301a:	402b      	ands	r3, r5
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4098      	lsls	r0, r3
 8003020:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003022:	431a      	orrs	r2, r3
 8003024:	1d8b      	adds	r3, r1, #6
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	18e3      	adds	r3, r4, r3
 800302a:	3304      	adds	r3, #4
 800302c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800302e:	e027      	b.n	8003080 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003030:	4c16      	ldr	r4, [pc, #88]	; (800308c <NVIC_SetPriority+0xd8>)
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b25b      	sxtb	r3, r3
 8003038:	089b      	lsrs	r3, r3, #2
 800303a:	4914      	ldr	r1, [pc, #80]	; (800308c <NVIC_SetPriority+0xd8>)
 800303c:	1dfa      	adds	r2, r7, #7
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	b252      	sxtb	r2, r2
 8003042:	0892      	lsrs	r2, r2, #2
 8003044:	32c0      	adds	r2, #192	; 0xc0
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	5852      	ldr	r2, [r2, r1]
 800304a:	1df9      	adds	r1, r7, #7
 800304c:	7809      	ldrb	r1, [r1, #0]
 800304e:	0008      	movs	r0, r1
 8003050:	2103      	movs	r1, #3
 8003052:	4001      	ands	r1, r0
 8003054:	00c9      	lsls	r1, r1, #3
 8003056:	20ff      	movs	r0, #255	; 0xff
 8003058:	4088      	lsls	r0, r1
 800305a:	0001      	movs	r1, r0
 800305c:	43c9      	mvns	r1, r1
 800305e:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	0192      	lsls	r2, r2, #6
 8003064:	20ff      	movs	r0, #255	; 0xff
 8003066:	4010      	ands	r0, r2
 8003068:	1dfa      	adds	r2, r7, #7
 800306a:	7812      	ldrb	r2, [r2, #0]
 800306c:	0015      	movs	r5, r2
 800306e:	2203      	movs	r2, #3
 8003070:	402a      	ands	r2, r5
 8003072:	00d2      	lsls	r2, r2, #3
 8003074:	4090      	lsls	r0, r2
 8003076:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003078:	430a      	orrs	r2, r1
 800307a:	33c0      	adds	r3, #192	; 0xc0
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	511a      	str	r2, [r3, r4]
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bdb0      	pop	{r4, r5, r7, pc}
 8003088:	e000ed00 	.word	0xe000ed00
 800308c:	e000e100 	.word	0xe000e100

08003090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	4a0c      	ldr	r2, [pc, #48]	; (80030d0 <SysTick_Config+0x40>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030a2:	2301      	movs	r3, #1
 80030a4:	e010      	b.n	80030c8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <SysTick_Config+0x44>)
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	3a01      	subs	r2, #1
 80030ac:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ae:	2301      	movs	r3, #1
 80030b0:	425b      	negs	r3, r3
 80030b2:	2103      	movs	r1, #3
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff ff7d 	bl	8002fb4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <SysTick_Config+0x44>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <SysTick_Config+0x44>)
 80030c2:	2207      	movs	r2, #7
 80030c4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b002      	add	sp, #8
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	00ffffff 	.word	0x00ffffff
 80030d4:	e000e010 	.word	0xe000e010

080030d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	230f      	movs	r3, #15
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	1c02      	adds	r2, r0, #0
 80030e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	230f      	movs	r3, #15
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b25b      	sxtb	r3, r3
 80030f4:	0011      	movs	r1, r2
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7ff ff5c 	bl	8002fb4 <NVIC_SetPriority>
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b004      	add	sp, #16
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	0002      	movs	r2, r0
 800310c:	1dfb      	adds	r3, r7, #7
 800310e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b25b      	sxtb	r3, r3
 8003116:	0018      	movs	r0, r3
 8003118:	f7ff ff36 	bl	8002f88 <NVIC_EnableIRQ>
}
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0018      	movs	r0, r3
 8003130:	f7ff ffae 	bl	8003090 <SysTick_Config>
 8003134:	0003      	movs	r3, r0
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b002      	add	sp, #8
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e062      	b.n	8003218 <HAL_DMA_Init+0xd8>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a32      	ldr	r2, [pc, #200]	; (8003220 <HAL_DMA_Init+0xe0>)
 8003158:	4694      	mov	ip, r2
 800315a:	4463      	add	r3, ip
 800315c:	2114      	movs	r1, #20
 800315e:	0018      	movs	r0, r3
 8003160:	f7fc ffe4 	bl	800012c <__udivsi3>
 8003164:	0003      	movs	r3, r0
 8003166:	009a      	lsls	r2, r3, #2
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a2d      	ldr	r2, [pc, #180]	; (8003224 <HAL_DMA_Init+0xe4>)
 8003170:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2225      	movs	r2, #37	; 0x25
 8003176:	2102      	movs	r1, #2
 8003178:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a28      	ldr	r2, [pc, #160]	; (8003228 <HAL_DMA_Init+0xe8>)
 8003186:	4013      	ands	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	01db      	lsls	r3, r3, #7
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d019      	beq.n	8003200 <HAL_DMA_Init+0xc0>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031cc:	4a17      	ldr	r2, [pc, #92]	; (800322c <HAL_DMA_Init+0xec>)
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_DMA_Init+0xec>)
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	201c      	movs	r0, #28
 80031d8:	4003      	ands	r3, r0
 80031da:	200f      	movs	r0, #15
 80031dc:	4098      	lsls	r0, r3
 80031de:	0003      	movs	r3, r0
 80031e0:	43db      	mvns	r3, r3
 80031e2:	400b      	ands	r3, r1
 80031e4:	6013      	str	r3, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031e6:	4a11      	ldr	r2, [pc, #68]	; (800322c <HAL_DMA_Init+0xec>)
 80031e8:	4b10      	ldr	r3, [pc, #64]	; (800322c <HAL_DMA_Init+0xec>)
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6858      	ldr	r0, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	241c      	movs	r4, #28
 80031f6:	4023      	ands	r3, r4
 80031f8:	4098      	lsls	r0, r3
 80031fa:	0003      	movs	r3, r0
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2225      	movs	r2, #37	; 0x25
 800320a:	2101      	movs	r1, #1
 800320c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2224      	movs	r2, #36	; 0x24
 8003212:	2100      	movs	r1, #0
 8003214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b005      	add	sp, #20
 800321e:	bd90      	pop	{r4, r7, pc}
 8003220:	bffdfff8 	.word	0xbffdfff8
 8003224:	40020000 	.word	0x40020000
 8003228:	ffff800f 	.word	0xffff800f
 800322c:	400200a8 	.word	0x400200a8

08003230 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323e:	2317      	movs	r3, #23
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2224      	movs	r2, #36	; 0x24
 800324a:	5c9b      	ldrb	r3, [r3, r2]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_DMA_Start_IT+0x24>
 8003250:	2302      	movs	r3, #2
 8003252:	e04f      	b.n	80032f4 <HAL_DMA_Start_IT+0xc4>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2224      	movs	r2, #36	; 0x24
 8003258:	2101      	movs	r1, #1
 800325a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2225      	movs	r2, #37	; 0x25
 8003260:	5c9b      	ldrb	r3, [r3, r2]
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d13a      	bne.n	80032de <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2225      	movs	r2, #37	; 0x25
 800326c:	2102      	movs	r1, #2
 800326e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	438a      	bics	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f975 	bl	800357c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	210e      	movs	r1, #14
 80032a6:	430a      	orrs	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e00f      	b.n	80032cc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	2104      	movs	r1, #4
 80032b8:	438a      	bics	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	210a      	movs	r1, #10
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	2101      	movs	r1, #1
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	e007      	b.n	80032ee <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2224      	movs	r2, #36	; 0x24
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80032e6:	2317      	movs	r3, #23
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80032ee:	2317      	movs	r3, #23
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	781b      	ldrb	r3, [r3, #0]
}
 80032f4:	0018      	movs	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b006      	add	sp, #24
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	230f      	movs	r3, #15
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2225      	movs	r2, #37	; 0x25
 8003310:	5c9b      	ldrb	r3, [r3, r2]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d008      	beq.n	800332a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2204      	movs	r2, #4
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2224      	movs	r2, #36	; 0x24
 8003322:	2100      	movs	r1, #0
 8003324:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e024      	b.n	8003374 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6812      	ldr	r2, [r2, #0]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	210e      	movs	r1, #14
 8003336:	438a      	bics	r2, r1
 8003338:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	2101      	movs	r1, #1
 8003346:	438a      	bics	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003352:	211c      	movs	r1, #28
 8003354:	400a      	ands	r2, r1
 8003356:	2101      	movs	r1, #1
 8003358:	4091      	lsls	r1, r2
 800335a:	000a      	movs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2225      	movs	r2, #37	; 0x25
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2224      	movs	r2, #36	; 0x24
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]

    return status;
 800336e:	230f      	movs	r3, #15
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b004      	add	sp, #16
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003384:	230f      	movs	r3, #15
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2225      	movs	r2, #37	; 0x25
 8003390:	5c9b      	ldrb	r3, [r3, r2]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d007      	beq.n	80033a8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2204      	movs	r2, #4
 800339c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800339e:	230f      	movs	r3, #15
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e02a      	b.n	80033fe <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	210e      	movs	r1, #14
 80033b4:	438a      	bics	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	2101      	movs	r1, #1
 80033c4:	438a      	bics	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80033d0:	211c      	movs	r1, #28
 80033d2:	400a      	ands	r2, r1
 80033d4:	2101      	movs	r1, #1
 80033d6:	4091      	lsls	r1, r2
 80033d8:	000a      	movs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2225      	movs	r2, #37	; 0x25
 80033e0:	2101      	movs	r1, #1
 80033e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2224      	movs	r2, #36	; 0x24
 80033e8:	2100      	movs	r1, #0
 80033ea:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d004      	beq.n	80033fe <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	0010      	movs	r0, r2
 80033fc:	4798      	blx	r3
    }
  }
  return status;
 80033fe:	230f      	movs	r3, #15
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	781b      	ldrb	r3, [r3, #0]
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b004      	add	sp, #16
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	221c      	movs	r2, #28
 800342a:	4013      	ands	r3, r2
 800342c:	2204      	movs	r2, #4
 800342e:	409a      	lsls	r2, r3
 8003430:	0013      	movs	r3, r2
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4013      	ands	r3, r2
 8003436:	d026      	beq.n	8003486 <HAL_DMA_IRQHandler+0x7a>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2204      	movs	r2, #4
 800343c:	4013      	ands	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2220      	movs	r2, #32
 8003448:	4013      	ands	r3, r2
 800344a:	d107      	bne.n	800345c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	2104      	movs	r1, #4
 8003458:	438a      	bics	r2, r1
 800345a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003464:	211c      	movs	r1, #28
 8003466:	400a      	ands	r2, r1
 8003468:	2104      	movs	r1, #4
 800346a:	4091      	lsls	r1, r2
 800346c:	000a      	movs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	2b00      	cmp	r3, #0
 8003476:	d100      	bne.n	800347a <HAL_DMA_IRQHandler+0x6e>
 8003478:	e071      	b.n	800355e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	0010      	movs	r0, r2
 8003482:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003484:	e06b      	b.n	800355e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348a:	221c      	movs	r2, #28
 800348c:	4013      	ands	r3, r2
 800348e:	2202      	movs	r2, #2
 8003490:	409a      	lsls	r2, r3
 8003492:	0013      	movs	r3, r2
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4013      	ands	r3, r2
 8003498:	d02d      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xea>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2202      	movs	r2, #2
 800349e:	4013      	ands	r3, r2
 80034a0:	d029      	beq.n	80034f6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2220      	movs	r2, #32
 80034aa:	4013      	ands	r3, r2
 80034ac:	d10b      	bne.n	80034c6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	210a      	movs	r1, #10
 80034ba:	438a      	bics	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2225      	movs	r2, #37	; 0x25
 80034c2:	2101      	movs	r1, #1
 80034c4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034ce:	211c      	movs	r1, #28
 80034d0:	400a      	ands	r2, r1
 80034d2:	2102      	movs	r1, #2
 80034d4:	4091      	lsls	r1, r2
 80034d6:	000a      	movs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2224      	movs	r2, #36	; 0x24
 80034de:	2100      	movs	r1, #0
 80034e0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d039      	beq.n	800355e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	0010      	movs	r0, r2
 80034f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034f4:	e033      	b.n	800355e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	221c      	movs	r2, #28
 80034fc:	4013      	ands	r3, r2
 80034fe:	2208      	movs	r2, #8
 8003500:	409a      	lsls	r2, r3
 8003502:	0013      	movs	r3, r2
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4013      	ands	r3, r2
 8003508:	d02a      	beq.n	8003560 <HAL_DMA_IRQHandler+0x154>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2208      	movs	r2, #8
 800350e:	4013      	ands	r3, r2
 8003510:	d026      	beq.n	8003560 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	210e      	movs	r1, #14
 800351e:	438a      	bics	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800352a:	211c      	movs	r1, #28
 800352c:	400a      	ands	r2, r1
 800352e:	2101      	movs	r1, #1
 8003530:	4091      	lsls	r1, r2
 8003532:	000a      	movs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2225      	movs	r2, #37	; 0x25
 8003540:	2101      	movs	r1, #1
 8003542:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2224      	movs	r2, #36	; 0x24
 8003548:	2100      	movs	r1, #0
 800354a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	0010      	movs	r0, r2
 800355c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46c0      	nop			; (mov r8, r8)
}
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b002      	add	sp, #8
 800357a:	bd80      	pop	{r7, pc}

0800357c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003592:	211c      	movs	r1, #28
 8003594:	400a      	ands	r2, r1
 8003596:	2101      	movs	r1, #1
 8003598:	4091      	lsls	r1, r2
 800359a:	000a      	movs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b10      	cmp	r3, #16
 80035ac:	d108      	bne.n	80035c0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035be:	e007      	b.n	80035d0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	60da      	str	r2, [r3, #12]
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b004      	add	sp, #16
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80035ee:	e155      	b.n	800389c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4091      	lsls	r1, r2
 80035fa:	000a      	movs	r2, r1
 80035fc:	4013      	ands	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d100      	bne.n	8003608 <HAL_GPIO_Init+0x30>
 8003606:	e146      	b.n	8003896 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x40>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b12      	cmp	r3, #18
 8003616:	d123      	bne.n	8003660 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	08da      	lsrs	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3208      	adds	r2, #8
 8003620:	0092      	lsls	r2, r2, #2
 8003622:	58d3      	ldr	r3, [r2, r3]
 8003624:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2207      	movs	r2, #7
 800362a:	4013      	ands	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	220f      	movs	r2, #15
 8003630:	409a      	lsls	r2, r3
 8003632:	0013      	movs	r3, r2
 8003634:	43da      	mvns	r2, r3
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2107      	movs	r1, #7
 8003644:	400b      	ands	r3, r1
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	409a      	lsls	r2, r3
 800364a:	0013      	movs	r3, r2
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	08da      	lsrs	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3208      	adds	r2, #8
 800365a:	0092      	lsls	r2, r2, #2
 800365c:	6939      	ldr	r1, [r7, #16]
 800365e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d00b      	beq.n	8003680 <HAL_GPIO_Init+0xa8>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d007      	beq.n	8003680 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003674:	2b11      	cmp	r3, #17
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b12      	cmp	r3, #18
 800367e:	d130      	bne.n	80036e2 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	2203      	movs	r2, #3
 800368c:	409a      	lsls	r2, r3
 800368e:	0013      	movs	r3, r2
 8003690:	43da      	mvns	r2, r3
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	0013      	movs	r3, r2
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b6:	2201      	movs	r2, #1
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
 80036bc:	0013      	movs	r3, r2
 80036be:	43da      	mvns	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	2201      	movs	r2, #1
 80036ce:	401a      	ands	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	409a      	lsls	r2, r3
 80036d4:	0013      	movs	r3, r2
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	409a      	lsls	r2, r3
 80036f0:	0013      	movs	r3, r2
 80036f2:	43da      	mvns	r2, r3
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2203      	movs	r2, #3
 8003700:	401a      	ands	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	0013      	movs	r3, r2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	409a      	lsls	r2, r3
 8003724:	0013      	movs	r3, r2
 8003726:	43da      	mvns	r2, r3
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	409a      	lsls	r2, r3
 8003738:	0013      	movs	r3, r2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	055b      	lsls	r3, r3, #21
 800374e:	4013      	ands	r3, r2
 8003750:	d100      	bne.n	8003754 <HAL_GPIO_Init+0x17c>
 8003752:	e0a0      	b.n	8003896 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003754:	4b57      	ldr	r3, [pc, #348]	; (80038b4 <HAL_GPIO_Init+0x2dc>)
 8003756:	4a57      	ldr	r2, [pc, #348]	; (80038b4 <HAL_GPIO_Init+0x2dc>)
 8003758:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800375a:	2101      	movs	r1, #1
 800375c:	430a      	orrs	r2, r1
 800375e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8003760:	4a55      	ldr	r2, [pc, #340]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	589b      	ldr	r3, [r3, r2]
 800376c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2203      	movs	r2, #3
 8003772:	4013      	ands	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	220f      	movs	r2, #15
 8003778:	409a      	lsls	r2, r3
 800377a:	0013      	movs	r3, r2
 800377c:	43da      	mvns	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	23a0      	movs	r3, #160	; 0xa0
 8003788:	05db      	lsls	r3, r3, #23
 800378a:	429a      	cmp	r2, r3
 800378c:	d01f      	beq.n	80037ce <HAL_GPIO_Init+0x1f6>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4a      	ldr	r2, [pc, #296]	; (80038bc <HAL_GPIO_Init+0x2e4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d019      	beq.n	80037ca <HAL_GPIO_Init+0x1f2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a49      	ldr	r2, [pc, #292]	; (80038c0 <HAL_GPIO_Init+0x2e8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_GPIO_Init+0x1ee>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a48      	ldr	r2, [pc, #288]	; (80038c4 <HAL_GPIO_Init+0x2ec>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00d      	beq.n	80037c2 <HAL_GPIO_Init+0x1ea>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a47      	ldr	r2, [pc, #284]	; (80038c8 <HAL_GPIO_Init+0x2f0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <HAL_GPIO_Init+0x1e6>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a46      	ldr	r2, [pc, #280]	; (80038cc <HAL_GPIO_Init+0x2f4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_GPIO_Init+0x1e2>
 80037b6:	2305      	movs	r3, #5
 80037b8:	e00a      	b.n	80037d0 <HAL_GPIO_Init+0x1f8>
 80037ba:	2306      	movs	r3, #6
 80037bc:	e008      	b.n	80037d0 <HAL_GPIO_Init+0x1f8>
 80037be:	2304      	movs	r3, #4
 80037c0:	e006      	b.n	80037d0 <HAL_GPIO_Init+0x1f8>
 80037c2:	2303      	movs	r3, #3
 80037c4:	e004      	b.n	80037d0 <HAL_GPIO_Init+0x1f8>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e002      	b.n	80037d0 <HAL_GPIO_Init+0x1f8>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_GPIO_Init+0x1f8>
 80037ce:	2300      	movs	r3, #0
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	2103      	movs	r1, #3
 80037d4:	400a      	ands	r2, r1
 80037d6:	0092      	lsls	r2, r2, #2
 80037d8:	4093      	lsls	r3, r2
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037e0:	4935      	ldr	r1, [pc, #212]	; (80038b8 <HAL_GPIO_Init+0x2e0>)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ee:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <HAL_GPIO_Init+0x2f8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	43da      	mvns	r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	025b      	lsls	r3, r3, #9
 8003806:	4013      	ands	r3, r2
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003812:	4b2f      	ldr	r3, [pc, #188]	; (80038d0 <HAL_GPIO_Init+0x2f8>)
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003818:	4b2d      	ldr	r3, [pc, #180]	; (80038d0 <HAL_GPIO_Init+0x2f8>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	43da      	mvns	r2, r3
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	029b      	lsls	r3, r3, #10
 8003830:	4013      	ands	r3, r2
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_GPIO_Init+0x2f8>)
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003842:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <HAL_GPIO_Init+0x2f8>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	43da      	mvns	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4013      	ands	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	035b      	lsls	r3, r3, #13
 800385a:	4013      	ands	r3, r2
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003866:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <HAL_GPIO_Init+0x2f8>)
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <HAL_GPIO_Init+0x2f8>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	43da      	mvns	r2, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	039b      	lsls	r3, r3, #14
 8003884:	4013      	ands	r3, r2
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <HAL_GPIO_Init+0x2f8>)
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3301      	adds	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	40da      	lsrs	r2, r3
 80038a4:	1e13      	subs	r3, r2, #0
 80038a6:	d000      	beq.n	80038aa <HAL_GPIO_Init+0x2d2>
 80038a8:	e6a2      	b.n	80035f0 <HAL_GPIO_Init+0x18>
  }
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b006      	add	sp, #24
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40010000 	.word	0x40010000
 80038bc:	50000400 	.word	0x50000400
 80038c0:	50000800 	.word	0x50000800
 80038c4:	50000c00 	.word	0x50000c00
 80038c8:	50001000 	.word	0x50001000
 80038cc:	50001c00 	.word	0x50001c00
 80038d0:	40010400 	.word	0x40010400

080038d4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	0008      	movs	r0, r1
 80038de:	0011      	movs	r1, r2
 80038e0:	1cbb      	adds	r3, r7, #2
 80038e2:	1c02      	adds	r2, r0, #0
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	1c7b      	adds	r3, r7, #1
 80038e8:	1c0a      	adds	r2, r1, #0
 80038ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80038ec:	1c7b      	adds	r3, r7, #1
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f4:	1cbb      	adds	r3, r7, #2
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80038fc:	e003      	b.n	8003906 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80038fe:	1cbb      	adds	r3, r7, #2
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	0002      	movs	r2, r0
 8003918:	1dbb      	adds	r3, r7, #6
 800391a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	1dba      	adds	r2, r7, #6
 8003922:	8812      	ldrh	r2, [r2, #0]
 8003924:	4013      	ands	r3, r2
 8003926:	d008      	beq.n	800393a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003928:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800392a:	1dba      	adds	r2, r7, #6
 800392c:	8812      	ldrh	r2, [r2, #0]
 800392e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003930:	1dbb      	adds	r3, r7, #6
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	0018      	movs	r0, r3
 8003936:	f000 f807 	bl	8003948 <HAL_GPIO_EXTI_Callback>
  }
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b002      	add	sp, #8
 8003940:	bd80      	pop	{r7, pc}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	40010400 	.word	0x40010400

08003948 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	0002      	movs	r2, r0
 8003950:	1dbb      	adds	r3, r7, #6
 8003952:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b002      	add	sp, #8
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	b590      	push	{r4, r7, lr}
 800395e:	b08b      	sub	sp, #44	; 0x2c
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	f000 fbb8 	bl	80040e0 <HAL_RCC_OscConfig+0x784>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003970:	4bc7      	ldr	r3, [pc, #796]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	220c      	movs	r2, #12
 8003976:	4013      	ands	r3, r2
 8003978:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800397a:	4bc5      	ldr	r3, [pc, #788]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	025b      	lsls	r3, r3, #9
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2201      	movs	r2, #1
 800398c:	4013      	ands	r3, r2
 800398e:	d100      	bne.n	8003992 <HAL_RCC_OscConfig+0x36>
 8003990:	e07e      	b.n	8003a90 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d007      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d112      	bne.n	80039c4 <HAL_RCC_OscConfig+0x68>
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	025b      	lsls	r3, r3, #9
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10d      	bne.n	80039c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a8:	4bb9      	ldr	r3, [pc, #740]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	029b      	lsls	r3, r3, #10
 80039b0:	4013      	ands	r3, r2
 80039b2:	d100      	bne.n	80039b6 <HAL_RCC_OscConfig+0x5a>
 80039b4:	e06b      	b.n	8003a8e <HAL_RCC_OscConfig+0x132>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d167      	bne.n	8003a8e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f000 fb8e 	bl	80040e0 <HAL_RCC_OscConfig+0x784>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	025b      	lsls	r3, r3, #9
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_OscConfig+0x84>
 80039d0:	4baf      	ldr	r3, [pc, #700]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 80039d2:	4aaf      	ldr	r2, [pc, #700]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	0249      	lsls	r1, r1, #9
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e027      	b.n	8003a30 <HAL_RCC_OscConfig+0xd4>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	23a0      	movs	r3, #160	; 0xa0
 80039e6:	02db      	lsls	r3, r3, #11
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d10e      	bne.n	8003a0a <HAL_RCC_OscConfig+0xae>
 80039ec:	4ba8      	ldr	r3, [pc, #672]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 80039ee:	4aa8      	ldr	r2, [pc, #672]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	2180      	movs	r1, #128	; 0x80
 80039f4:	02c9      	lsls	r1, r1, #11
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	4ba5      	ldr	r3, [pc, #660]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 80039fc:	4aa4      	ldr	r2, [pc, #656]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	0249      	lsls	r1, r1, #9
 8003a04:	430a      	orrs	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e012      	b.n	8003a30 <HAL_RCC_OscConfig+0xd4>
 8003a0a:	4ba1      	ldr	r3, [pc, #644]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003a0c:	4aa0      	ldr	r2, [pc, #640]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	49a0      	ldr	r1, [pc, #640]	; (8003c94 <HAL_RCC_OscConfig+0x338>)
 8003a12:	400a      	ands	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	4b9e      	ldr	r3, [pc, #632]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	025b      	lsls	r3, r3, #9
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4b9a      	ldr	r3, [pc, #616]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003a26:	4a9a      	ldr	r2, [pc, #616]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	499b      	ldr	r1, [pc, #620]	; (8003c98 <HAL_RCC_OscConfig+0x33c>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7ff fa9c 	bl	8002f74 <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a42:	f7ff fa97 	bl	8002f74 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d902      	bls.n	8003a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	f000 fb45 	bl	80040e0 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a56:	4b8e      	ldr	r3, [pc, #568]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	029b      	lsls	r3, r3, #10
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d0ef      	beq.n	8003a42 <HAL_RCC_OscConfig+0xe6>
 8003a62:	e015      	b.n	8003a90 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7ff fa86 	bl	8002f74 <HAL_GetTick>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a6e:	f7ff fa81 	bl	8002f74 <HAL_GetTick>
 8003a72:	0002      	movs	r2, r0
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b64      	cmp	r3, #100	; 0x64
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e32f      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a80:	4b83      	ldr	r3, [pc, #524]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	029b      	lsls	r3, r3, #10
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d1f0      	bne.n	8003a6e <HAL_RCC_OscConfig+0x112>
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2202      	movs	r2, #2
 8003a96:	4013      	ands	r3, r2
 8003a98:	d100      	bne.n	8003a9c <HAL_RCC_OscConfig+0x140>
 8003a9a:	e097      	b.n	8003bcc <HAL_RCC_OscConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003aaa:	4b79      	ldr	r3, [pc, #484]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003aac:	4a78      	ldr	r2, [pc, #480]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	2220      	movs	r2, #32
 8003aba:	4393      	bics	r3, r2
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d13d      	bne.n	8003b46 <HAL_RCC_OscConfig+0x1ea>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d13a      	bne.n	8003b46 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ad0:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x188>
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e2fd      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4a6a      	ldr	r2, [pc, #424]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003ae6:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	496c      	ldr	r1, [pc, #432]	; (8003c9c <HAL_RCC_OscConfig+0x340>)
 8003aec:	4019      	ands	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6053      	str	r3, [r2, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003af8:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003afa:	4a65      	ldr	r2, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	2109      	movs	r1, #9
 8003b00:	438a      	bics	r2, r1
 8003b02:	0011      	movs	r1, r2
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b0a:	f000 fc1d 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 8003b0e:	0001      	movs	r1, r0
 8003b10:	4b5f      	ldr	r3, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	220f      	movs	r2, #15
 8003b18:	4013      	ands	r3, r2
 8003b1a:	4a61      	ldr	r2, [pc, #388]	; (8003ca0 <HAL_RCC_OscConfig+0x344>)
 8003b1c:	5cd3      	ldrb	r3, [r2, r3]
 8003b1e:	000a      	movs	r2, r1
 8003b20:	40da      	lsrs	r2, r3
 8003b22:	4b60      	ldr	r3, [pc, #384]	; (8003ca4 <HAL_RCC_OscConfig+0x348>)
 8003b24:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003b26:	2313      	movs	r3, #19
 8003b28:	18fc      	adds	r4, r7, r3
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f7ff f9ec 	bl	8002f08 <HAL_InitTick>
 8003b30:	0003      	movs	r3, r0
 8003b32:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003b34:	2313      	movs	r3, #19
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d046      	beq.n	8003bcc <HAL_RCC_OscConfig+0x270>
      {
        return status;
 8003b3e:	2313      	movs	r3, #19
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	e2cc      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d026      	beq.n	8003b9a <HAL_RCC_OscConfig+0x23e>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b4c:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003b4e:	4a50      	ldr	r2, [pc, #320]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003b50:	6812      	ldr	r2, [r2, #0]
 8003b52:	2109      	movs	r1, #9
 8003b54:	438a      	bics	r2, r1
 8003b56:	0011      	movs	r1, r2
 8003b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5e:	f7ff fa09 	bl	8002f74 <HAL_GetTick>
 8003b62:	0003      	movs	r3, r0
 8003b64:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b68:	f7ff fa04 	bl	8002f74 <HAL_GetTick>
 8003b6c:	0002      	movs	r2, r0
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e2b2      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b7a:	4b45      	ldr	r3, [pc, #276]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	4013      	ands	r3, r2
 8003b82:	d0f1      	beq.n	8003b68 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b84:	4a42      	ldr	r2, [pc, #264]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003b86:	4b42      	ldr	r3, [pc, #264]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4944      	ldr	r1, [pc, #272]	; (8003c9c <HAL_RCC_OscConfig+0x340>)
 8003b8c:	4019      	ands	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6053      	str	r3, [r2, #4]
 8003b98:	e018      	b.n	8003bcc <HAL_RCC_OscConfig+0x270>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003b9c:	4a3c      	ldr	r2, [pc, #240]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	438a      	bics	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7ff f9e5 	bl	8002f74 <HAL_GetTick>
 8003baa:	0003      	movs	r3, r0
 8003bac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x266>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb0:	f7ff f9e0 	bl	8002f74 <HAL_GetTick>
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x266>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e28e      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc2:	4b33      	ldr	r3, [pc, #204]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	4013      	ands	r3, r2
 8003bca:	d1f1      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2210      	movs	r2, #16
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d100      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x27c>
 8003bd6:	e09d      	b.n	8003d14 <HAL_RCC_OscConfig+0x3b8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d13f      	bne.n	8003c5e <HAL_RCC_OscConfig+0x302>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bde:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4013      	ands	r3, r2
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x29a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x29a>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e274      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bf6:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	492a      	ldr	r1, [pc, #168]	; (8003ca8 <HAL_RCC_OscConfig+0x34c>)
 8003bfe:	4019      	ands	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6053      	str	r3, [r2, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c08:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003c0a:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	0a19      	lsrs	r1, r3, #8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	061b      	lsls	r3, r3, #24
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6053      	str	r3, [r2, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	0b5b      	lsrs	r3, r3, #13
 8003c22:	3301      	adds	r3, #1
 8003c24:	2280      	movs	r2, #128	; 0x80
 8003c26:	0212      	lsls	r2, r2, #8
 8003c28:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	210f      	movs	r1, #15
 8003c32:	400b      	ands	r3, r1
 8003c34:	491a      	ldr	r1, [pc, #104]	; (8003ca0 <HAL_RCC_OscConfig+0x344>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_RCC_OscConfig+0x348>)
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c3e:	2313      	movs	r3, #19
 8003c40:	18fc      	adds	r4, r7, r3
 8003c42:	2000      	movs	r0, #0
 8003c44:	f7ff f960 	bl	8002f08 <HAL_InitTick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003c4c:	2313      	movs	r3, #19
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d05e      	beq.n	8003d14 <HAL_RCC_OscConfig+0x3b8>
        {
          return status;
 8003c56:	2313      	movs	r3, #19
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	e240      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d03c      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x384>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c66:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003c68:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <HAL_RCC_OscConfig+0x334>)
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	2180      	movs	r1, #128	; 0x80
 8003c6e:	0049      	lsls	r1, r1, #1
 8003c70:	430a      	orrs	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7ff f97e 	bl	8002f74 <HAL_GetTick>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c7c:	e016      	b.n	8003cac <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c7e:	f7ff f979 	bl	8002f74 <HAL_GetTick>
 8003c82:	0002      	movs	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d90f      	bls.n	8003cac <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e227      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
 8003c90:	40021000 	.word	0x40021000
 8003c94:	fffeffff 	.word	0xfffeffff
 8003c98:	fffbffff 	.word	0xfffbffff
 8003c9c:	ffffe0ff 	.word	0xffffe0ff
 8003ca0:	080097ec 	.word	0x080097ec
 8003ca4:	20000000 	.word	0x20000000
 8003ca8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cac:	4bca      	ldr	r3, [pc, #808]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d0e2      	beq.n	8003c7e <HAL_RCC_OscConfig+0x322>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cb8:	4ac7      	ldr	r2, [pc, #796]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003cba:	4bc7      	ldr	r3, [pc, #796]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	49c7      	ldr	r1, [pc, #796]	; (8003fdc <HAL_RCC_OscConfig+0x680>)
 8003cc0:	4019      	ands	r1, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cca:	4ac3      	ldr	r2, [pc, #780]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003ccc:	4bc2      	ldr	r3, [pc, #776]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	0a19      	lsrs	r1, r3, #8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	061b      	lsls	r3, r3, #24
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6053      	str	r3, [r2, #4]
 8003cde:	e019      	b.n	8003d14 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ce0:	4bbd      	ldr	r3, [pc, #756]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003ce2:	4abd      	ldr	r2, [pc, #756]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	49be      	ldr	r1, [pc, #760]	; (8003fe0 <HAL_RCC_OscConfig+0x684>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7ff f942 	bl	8002f74 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x3ac>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf6:	f7ff f93d 	bl	8002f74 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e1eb      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d08:	4bb3      	ldr	r3, [pc, #716]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4013      	ands	r3, r2
 8003d12:	d1f0      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d036      	beq.n	8003d8c <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d019      	beq.n	8003d5a <HAL_RCC_OscConfig+0x3fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	4bac      	ldr	r3, [pc, #688]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003d28:	4aab      	ldr	r2, [pc, #684]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003d2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d32:	f7ff f91f 	bl	8002f74 <HAL_GetTick>
 8003d36:	0003      	movs	r3, r0
 8003d38:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x3f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7ff f91a 	bl	8002f74 <HAL_GetTick>
 8003d40:	0002      	movs	r2, r0
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x3f2>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1c8      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d4e:	4ba2      	ldr	r3, [pc, #648]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d52:	2202      	movs	r2, #2
 8003d54:	4013      	ands	r3, r2
 8003d56:	d0f1      	beq.n	8003d3c <HAL_RCC_OscConfig+0x3e0>
 8003d58:	e018      	b.n	8003d8c <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5a:	4b9f      	ldr	r3, [pc, #636]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003d5c:	4a9e      	ldr	r2, [pc, #632]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003d5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d60:	2101      	movs	r1, #1
 8003d62:	438a      	bics	r2, r1
 8003d64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d66:	f7ff f905 	bl	8002f74 <HAL_GetTick>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x426>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d70:	f7ff f900 	bl	8002f74 <HAL_GetTick>
 8003d74:	0002      	movs	r2, r0
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x426>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1ae      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d82:	4b95      	ldr	r3, [pc, #596]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d86:	2202      	movs	r2, #2
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d1f1      	bne.n	8003d70 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2204      	movs	r2, #4
 8003d92:	4013      	ands	r3, r2
 8003d94:	d100      	bne.n	8003d98 <HAL_RCC_OscConfig+0x43c>
 8003d96:	e0af      	b.n	8003ef8 <HAL_RCC_OscConfig+0x59c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d98:	2323      	movs	r3, #35	; 0x23
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da0:	4b8d      	ldr	r3, [pc, #564]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	055b      	lsls	r3, r3, #21
 8003da8:	4013      	ands	r3, r2
 8003daa:	d10a      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x466>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dac:	4b8a      	ldr	r3, [pc, #552]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003dae:	4a8a      	ldr	r2, [pc, #552]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003db0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db2:	2180      	movs	r1, #128	; 0x80
 8003db4:	0549      	lsls	r1, r1, #21
 8003db6:	430a      	orrs	r2, r1
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003dba:	2323      	movs	r3, #35	; 0x23
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x688>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d11a      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dce:	4b85      	ldr	r3, [pc, #532]	; (8003fe4 <HAL_RCC_OscConfig+0x688>)
 8003dd0:	4a84      	ldr	r2, [pc, #528]	; (8003fe4 <HAL_RCC_OscConfig+0x688>)
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	0049      	lsls	r1, r1, #1
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ddc:	f7ff f8ca 	bl	8002f74 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x49c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de6:	f7ff f8c5 	bl	8002f74 <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b64      	cmp	r3, #100	; 0x64
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x49c>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e173      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	4b7a      	ldr	r3, [pc, #488]	; (8003fe4 <HAL_RCC_OscConfig+0x688>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4013      	ands	r3, r2
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	2380      	movs	r3, #128	; 0x80
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_OscConfig+0x4c4>
 8003e10:	4b71      	ldr	r3, [pc, #452]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e12:	4a71      	ldr	r2, [pc, #452]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e14:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e16:	2180      	movs	r1, #128	; 0x80
 8003e18:	0049      	lsls	r1, r1, #1
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	651a      	str	r2, [r3, #80]	; 0x50
 8003e1e:	e031      	b.n	8003e84 <HAL_RCC_OscConfig+0x528>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10c      	bne.n	8003e42 <HAL_RCC_OscConfig+0x4e6>
 8003e28:	4b6b      	ldr	r3, [pc, #428]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e2a:	4a6b      	ldr	r2, [pc, #428]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e2c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e2e:	496c      	ldr	r1, [pc, #432]	; (8003fe0 <HAL_RCC_OscConfig+0x684>)
 8003e30:	400a      	ands	r2, r1
 8003e32:	651a      	str	r2, [r3, #80]	; 0x50
 8003e34:	4b68      	ldr	r3, [pc, #416]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e36:	4a68      	ldr	r2, [pc, #416]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e3a:	496b      	ldr	r1, [pc, #428]	; (8003fe8 <HAL_RCC_OscConfig+0x68c>)
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	651a      	str	r2, [r3, #80]	; 0x50
 8003e40:	e020      	b.n	8003e84 <HAL_RCC_OscConfig+0x528>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	23a0      	movs	r3, #160	; 0xa0
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d10e      	bne.n	8003e6c <HAL_RCC_OscConfig+0x510>
 8003e4e:	4b62      	ldr	r3, [pc, #392]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e50:	4a61      	ldr	r2, [pc, #388]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	00c9      	lsls	r1, r1, #3
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	651a      	str	r2, [r3, #80]	; 0x50
 8003e5c:	4b5e      	ldr	r3, [pc, #376]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e5e:	4a5e      	ldr	r2, [pc, #376]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e62:	2180      	movs	r1, #128	; 0x80
 8003e64:	0049      	lsls	r1, r1, #1
 8003e66:	430a      	orrs	r2, r1
 8003e68:	651a      	str	r2, [r3, #80]	; 0x50
 8003e6a:	e00b      	b.n	8003e84 <HAL_RCC_OscConfig+0x528>
 8003e6c:	4b5a      	ldr	r3, [pc, #360]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e6e:	4a5a      	ldr	r2, [pc, #360]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e72:	495b      	ldr	r1, [pc, #364]	; (8003fe0 <HAL_RCC_OscConfig+0x684>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	651a      	str	r2, [r3, #80]	; 0x50
 8003e78:	4b57      	ldr	r3, [pc, #348]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e7a:	4a57      	ldr	r2, [pc, #348]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003e7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e7e:	495a      	ldr	r1, [pc, #360]	; (8003fe8 <HAL_RCC_OscConfig+0x68c>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d015      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x55c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8c:	f7ff f872 	bl	8002f74 <HAL_GetTick>
 8003e90:	0003      	movs	r3, r0
 8003e92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e94:	e009      	b.n	8003eaa <HAL_RCC_OscConfig+0x54e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7ff f86d 	bl	8002f74 <HAL_GetTick>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	4a52      	ldr	r2, [pc, #328]	; (8003fec <HAL_RCC_OscConfig+0x690>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x54e>
        {
          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e11a      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eaa:	4b4b      	ldr	r3, [pc, #300]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d0ef      	beq.n	8003e96 <HAL_RCC_OscConfig+0x53a>
 8003eb6:	e014      	b.n	8003ee2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb8:	f7ff f85c 	bl	8002f74 <HAL_GetTick>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ec0:	e009      	b.n	8003ed6 <HAL_RCC_OscConfig+0x57a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7ff f857 	bl	8002f74 <HAL_GetTick>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	4a47      	ldr	r2, [pc, #284]	; (8003fec <HAL_RCC_OscConfig+0x690>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x57a>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e104      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ed6:	4b40      	ldr	r3, [pc, #256]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d1ef      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x566>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ee2:	2323      	movs	r3, #35	; 0x23
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x59c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eec:	4b3a      	ldr	r3, [pc, #232]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003eee:	4a3a      	ldr	r2, [pc, #232]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003ef0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ef2:	493f      	ldr	r1, [pc, #252]	; (8003ff0 <HAL_RCC_OscConfig+0x694>)
 8003ef4:	400a      	ands	r2, r1
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2220      	movs	r2, #32
 8003efe:	4013      	ands	r3, r2
 8003f00:	d049      	beq.n	8003f96 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d026      	beq.n	8003f58 <HAL_RCC_OscConfig+0x5fc>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003f0a:	4b33      	ldr	r3, [pc, #204]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003f0c:	4a32      	ldr	r2, [pc, #200]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003f0e:	6892      	ldr	r2, [r2, #8]
 8003f10:	2101      	movs	r1, #1
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]
 8003f16:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003f18:	4a2f      	ldr	r2, [pc, #188]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003f1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	635a      	str	r2, [r3, #52]	; 0x34
 8003f22:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <HAL_RCC_OscConfig+0x698>)
 8003f24:	4a33      	ldr	r2, [pc, #204]	; (8003ff4 <HAL_RCC_OscConfig+0x698>)
 8003f26:	6a12      	ldr	r2, [r2, #32]
 8003f28:	2180      	movs	r1, #128	; 0x80
 8003f2a:	0189      	lsls	r1, r1, #6
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7ff f820 	bl	8002f74 <HAL_GetTick>
 8003f34:	0003      	movs	r3, r0
 8003f36:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x5f0>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f3a:	f7ff f81b 	bl	8002f74 <HAL_GetTick>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x5f0>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0c9      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f4c:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2202      	movs	r2, #2
 8003f52:	4013      	ands	r3, r2
 8003f54:	d0f1      	beq.n	8003f3a <HAL_RCC_OscConfig+0x5de>
 8003f56:	e01e      	b.n	8003f96 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003f58:	4b1f      	ldr	r3, [pc, #124]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003f5a:	4a1f      	ldr	r2, [pc, #124]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003f5c:	6892      	ldr	r2, [r2, #8]
 8003f5e:	2101      	movs	r1, #1
 8003f60:	438a      	bics	r2, r1
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <HAL_RCC_OscConfig+0x698>)
 8003f66:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <HAL_RCC_OscConfig+0x698>)
 8003f68:	6a12      	ldr	r2, [r2, #32]
 8003f6a:	4923      	ldr	r1, [pc, #140]	; (8003ff8 <HAL_RCC_OscConfig+0x69c>)
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7ff f800 	bl	8002f74 <HAL_GetTick>
 8003f74:	0003      	movs	r3, r0
 8003f76:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x630>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7a:	f7fe fffb 	bl	8002f74 <HAL_GetTick>
 8003f7e:	0002      	movs	r2, r0
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x630>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0a9      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f8c:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2202      	movs	r2, #2
 8003f92:	4013      	ands	r3, r2
 8003f94:	d1f1      	bne.n	8003f7a <HAL_RCC_OscConfig+0x61e>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d100      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x644>
 8003f9e:	e09e      	b.n	80040de <HAL_RCC_OscConfig+0x782>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d100      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x64c>
 8003fa6:	e077      	b.n	8004098 <HAL_RCC_OscConfig+0x73c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d158      	bne.n	8004062 <HAL_RCC_OscConfig+0x706>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb0:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003fb2:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <HAL_RCC_OscConfig+0x67c>)
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	4911      	ldr	r1, [pc, #68]	; (8003ffc <HAL_RCC_OscConfig+0x6a0>)
 8003fb8:	400a      	ands	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe ffda 	bl	8002f74 <HAL_GetTick>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003fc4:	e01c      	b.n	8004000 <HAL_RCC_OscConfig+0x6a4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fe ffd5 	bl	8002f74 <HAL_GetTick>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d915      	bls.n	8004000 <HAL_RCC_OscConfig+0x6a4>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e083      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	ffff1fff 	.word	0xffff1fff
 8003fe0:	fffffeff 	.word	0xfffffeff
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	fffffbff 	.word	0xfffffbff
 8003fec:	00001388 	.word	0x00001388
 8003ff0:	efffffff 	.word	0xefffffff
 8003ff4:	40010000 	.word	0x40010000
 8003ff8:	ffffdfff 	.word	0xffffdfff
 8003ffc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004000:	4b39      	ldr	r3, [pc, #228]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	2380      	movs	r3, #128	; 0x80
 8004006:	049b      	lsls	r3, r3, #18
 8004008:	4013      	ands	r3, r2
 800400a:	d1dc      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x66a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400c:	4a36      	ldr	r2, [pc, #216]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	4936      	ldr	r1, [pc, #216]	; (80040ec <HAL_RCC_OscConfig+0x790>)
 8004014:	4019      	ands	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	4318      	orrs	r0, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004024:	4303      	orrs	r3, r0
 8004026:	430b      	orrs	r3, r1
 8004028:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 800402c:	4a2e      	ldr	r2, [pc, #184]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	2180      	movs	r1, #128	; 0x80
 8004032:	0449      	lsls	r1, r1, #17
 8004034:	430a      	orrs	r2, r1
 8004036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fe ff9c 	bl	8002f74 <HAL_GetTick>
 800403c:	0003      	movs	r3, r0
 800403e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x6f8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004042:	f7fe ff97 	bl	8002f74 <HAL_GetTick>
 8004046:	0002      	movs	r2, r0
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x6f8>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e045      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004054:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	049b      	lsls	r3, r3, #18
 800405c:	4013      	ands	r3, r2
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x6e6>
 8004060:	e03d      	b.n	80040de <HAL_RCC_OscConfig+0x782>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004062:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 8004064:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	4921      	ldr	r1, [pc, #132]	; (80040f0 <HAL_RCC_OscConfig+0x794>)
 800406a:	400a      	ands	r2, r1
 800406c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406e:	f7fe ff81 	bl	8002f74 <HAL_GetTick>
 8004072:	0003      	movs	r3, r0
 8004074:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004078:	f7fe ff7c 	bl	8002f74 <HAL_GetTick>
 800407c:	0002      	movs	r2, r0
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e02a      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800408a:	4b17      	ldr	r3, [pc, #92]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	049b      	lsls	r3, r3, #18
 8004092:	4013      	ands	r3, r2
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x71c>
 8004096:	e022      	b.n	80040de <HAL_RCC_OscConfig+0x782>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_OscConfig+0x748>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e01d      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_RCC_OscConfig+0x78c>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	025b      	lsls	r3, r3, #9
 80040b0:	401a      	ands	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d10f      	bne.n	80040da <HAL_RCC_OscConfig+0x77e>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	23f0      	movs	r3, #240	; 0xf0
 80040be:	039b      	lsls	r3, r3, #14
 80040c0:	401a      	ands	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d107      	bne.n	80040da <HAL_RCC_OscConfig+0x77e>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	23c0      	movs	r3, #192	; 0xc0
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	401a      	ands	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d001      	beq.n	80040de <HAL_RCC_OscConfig+0x782>
        {
          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <HAL_RCC_OscConfig+0x784>
        }
      }
    }
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b00b      	add	sp, #44	; 0x2c
 80040e6:	bd90      	pop	{r4, r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	ff02ffff 	.word	0xff02ffff
 80040f0:	feffffff 	.word	0xfeffffff

080040f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b590      	push	{r4, r7, lr}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e10c      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_ClockConfig+0x238>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2201      	movs	r2, #1
 800410e:	401a      	ands	r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d211      	bcs.n	800413a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b85      	ldr	r3, [pc, #532]	; (800432c <HAL_RCC_ClockConfig+0x238>)
 8004118:	4a84      	ldr	r2, [pc, #528]	; (800432c <HAL_RCC_ClockConfig+0x238>)
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	2101      	movs	r1, #1
 800411e:	438a      	bics	r2, r1
 8004120:	0011      	movs	r1, r2
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004128:	4b80      	ldr	r3, [pc, #512]	; (800432c <HAL_RCC_ClockConfig+0x238>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2201      	movs	r2, #1
 800412e:	401a      	ands	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e0f3      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2202      	movs	r2, #2
 8004140:	4013      	ands	r3, r2
 8004142:	d009      	beq.n	8004158 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004144:	4a7a      	ldr	r2, [pc, #488]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 8004146:	4b7a      	ldr	r3, [pc, #488]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	21f0      	movs	r1, #240	; 0xf0
 800414c:	438b      	bics	r3, r1
 800414e:	0019      	movs	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	430b      	orrs	r3, r1
 8004156:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2201      	movs	r2, #1
 800415e:	4013      	ands	r3, r2
 8004160:	d100      	bne.n	8004164 <HAL_RCC_ClockConfig+0x70>
 8004162:	e089      	b.n	8004278 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d107      	bne.n	800417c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800416c:	4b70      	ldr	r3, [pc, #448]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	029b      	lsls	r3, r3, #10
 8004174:	4013      	ands	r3, r2
 8004176:	d120      	bne.n	80041ba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0d2      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d107      	bne.n	8004194 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004184:	4b6a      	ldr	r3, [pc, #424]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	049b      	lsls	r3, r3, #18
 800418c:	4013      	ands	r3, r2
 800418e:	d114      	bne.n	80041ba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0c6      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d106      	bne.n	80041aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800419c:	4b64      	ldr	r3, [pc, #400]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2204      	movs	r2, #4
 80041a2:	4013      	ands	r3, r2
 80041a4:	d109      	bne.n	80041ba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e0bb      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041aa:	4b61      	ldr	r3, [pc, #388]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4013      	ands	r3, r2
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e0b3      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ba:	4a5d      	ldr	r2, [pc, #372]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 80041bc:	4b5c      	ldr	r3, [pc, #368]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	2103      	movs	r1, #3
 80041c2:	438b      	bics	r3, r1
 80041c4:	0019      	movs	r1, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	430b      	orrs	r3, r1
 80041cc:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ce:	f7fe fed1 	bl	8002f74 <HAL_GetTick>
 80041d2:	0003      	movs	r3, r0
 80041d4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d111      	bne.n	8004202 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041de:	e009      	b.n	80041f4 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7fe fec8 	bl	8002f74 <HAL_GetTick>
 80041e4:	0002      	movs	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	4a52      	ldr	r2, [pc, #328]	; (8004334 <HAL_RCC_ClockConfig+0x240>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e096      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041f4:	4b4e      	ldr	r3, [pc, #312]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	220c      	movs	r2, #12
 80041fa:	4013      	ands	r3, r2
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d1ef      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xec>
 8004200:	e03a      	b.n	8004278 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d111      	bne.n	800422e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800420a:	e009      	b.n	8004220 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420c:	f7fe feb2 	bl	8002f74 <HAL_GetTick>
 8004210:	0002      	movs	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	4a47      	ldr	r2, [pc, #284]	; (8004334 <HAL_RCC_ClockConfig+0x240>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e080      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004220:	4b43      	ldr	r3, [pc, #268]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	220c      	movs	r2, #12
 8004226:	4013      	ands	r3, r2
 8004228:	2b0c      	cmp	r3, #12
 800422a:	d1ef      	bne.n	800420c <HAL_RCC_ClockConfig+0x118>
 800422c:	e024      	b.n	8004278 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d11b      	bne.n	800426e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004236:	e009      	b.n	800424c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004238:	f7fe fe9c 	bl	8002f74 <HAL_GetTick>
 800423c:	0002      	movs	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	4a3c      	ldr	r2, [pc, #240]	; (8004334 <HAL_RCC_ClockConfig+0x240>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e06a      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800424c:	4b38      	ldr	r3, [pc, #224]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	220c      	movs	r2, #12
 8004252:	4013      	ands	r3, r2
 8004254:	2b04      	cmp	r3, #4
 8004256:	d1ef      	bne.n	8004238 <HAL_RCC_ClockConfig+0x144>
 8004258:	e00e      	b.n	8004278 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425a:	f7fe fe8b 	bl	8002f74 <HAL_GetTick>
 800425e:	0002      	movs	r2, r0
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	4a33      	ldr	r2, [pc, #204]	; (8004334 <HAL_RCC_ClockConfig+0x240>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d901      	bls.n	800426e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e059      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800426e:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	220c      	movs	r2, #12
 8004274:	4013      	ands	r3, r2
 8004276:	d1f0      	bne.n	800425a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004278:	4b2c      	ldr	r3, [pc, #176]	; (800432c <HAL_RCC_ClockConfig+0x238>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	401a      	ands	r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d911      	bls.n	80042aa <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b29      	ldr	r3, [pc, #164]	; (800432c <HAL_RCC_ClockConfig+0x238>)
 8004288:	4a28      	ldr	r2, [pc, #160]	; (800432c <HAL_RCC_ClockConfig+0x238>)
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	2101      	movs	r1, #1
 800428e:	438a      	bics	r2, r1
 8004290:	0011      	movs	r1, r2
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004298:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCC_ClockConfig+0x238>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2201      	movs	r2, #1
 800429e:	401a      	ands	r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e03b      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2204      	movs	r2, #4
 80042b0:	4013      	ands	r3, r2
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x1d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042b4:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 80042b6:	4b1e      	ldr	r3, [pc, #120]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	491f      	ldr	r1, [pc, #124]	; (8004338 <HAL_RCC_ClockConfig+0x244>)
 80042bc:	4019      	ands	r1, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	430b      	orrs	r3, r1
 80042c4:	60d3      	str	r3, [r2, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2208      	movs	r2, #8
 80042cc:	4013      	ands	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042d0:	4a17      	ldr	r2, [pc, #92]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 80042d2:	4b17      	ldr	r3, [pc, #92]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	4919      	ldr	r1, [pc, #100]	; (800433c <HAL_RCC_ClockConfig+0x248>)
 80042d8:	4019      	ands	r1, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	430b      	orrs	r3, r1
 80042e2:	60d3      	str	r3, [r2, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042e4:	f000 f830 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 80042e8:	0001      	movs	r1, r0
 80042ea:	4b11      	ldr	r3, [pc, #68]	; (8004330 <HAL_RCC_ClockConfig+0x23c>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	220f      	movs	r2, #15
 80042f2:	4013      	ands	r3, r2
 80042f4:	4a12      	ldr	r2, [pc, #72]	; (8004340 <HAL_RCC_ClockConfig+0x24c>)
 80042f6:	5cd3      	ldrb	r3, [r2, r3]
 80042f8:	000a      	movs	r2, r1
 80042fa:	40da      	lsrs	r2, r3
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <HAL_RCC_ClockConfig+0x250>)
 80042fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004300:	230b      	movs	r3, #11
 8004302:	18fc      	adds	r4, r7, r3
 8004304:	2000      	movs	r0, #0
 8004306:	f7fe fdff 	bl	8002f08 <HAL_InitTick>
 800430a:	0003      	movs	r3, r0
 800430c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800430e:	230b      	movs	r3, #11
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_RCC_ClockConfig+0x22c>
  {
    return status;
 8004318:	230b      	movs	r3, #11
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	e000      	b.n	8004322 <HAL_RCC_ClockConfig+0x22e>
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b005      	add	sp, #20
 8004328:	bd90      	pop	{r4, r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	40022000 	.word	0x40022000
 8004330:	40021000 	.word	0x40021000
 8004334:	00001388 	.word	0x00001388
 8004338:	fffff8ff 	.word	0xfffff8ff
 800433c:	ffffc7ff 	.word	0xffffc7ff
 8004340:	080097ec 	.word	0x080097ec
 8004344:	20000000 	.word	0x20000000

08004348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800434e:	4b32      	ldr	r3, [pc, #200]	; (8004418 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	220c      	movs	r2, #12
 8004358:	4013      	ands	r3, r2
 800435a:	2b08      	cmp	r3, #8
 800435c:	d00e      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x34>
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d00f      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0x3a>
 8004362:	2b04      	cmp	r3, #4
 8004364:	d145      	bne.n	80043f2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004366:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2210      	movs	r2, #16
 800436c:	4013      	ands	r3, r2
 800436e:	d002      	beq.n	8004376 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004372:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004374:	e04b      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xc6>
        sysclockfreq =  HSI_VALUE;
 8004376:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004378:	613b      	str	r3, [r7, #16]
      break;
 800437a:	e048      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800437c:	4b29      	ldr	r3, [pc, #164]	; (8004424 <HAL_RCC_GetSysClockFreq+0xdc>)
 800437e:	613b      	str	r3, [r7, #16]
      break;
 8004380:	e045      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	0c9b      	lsrs	r3, r3, #18
 8004386:	220f      	movs	r2, #15
 8004388:	4013      	ands	r3, r2
 800438a:	4a27      	ldr	r2, [pc, #156]	; (8004428 <HAL_RCC_GetSysClockFreq+0xe0>)
 800438c:	5cd3      	ldrb	r3, [r2, r3]
 800438e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	0d9b      	lsrs	r3, r3, #22
 8004394:	2203      	movs	r2, #3
 8004396:	4013      	ands	r3, r2
 8004398:	3301      	adds	r3, #1
 800439a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800439c:	4b1e      	ldr	r3, [pc, #120]	; (8004418 <HAL_RCC_GetSysClockFreq+0xd0>)
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	025b      	lsls	r3, r3, #9
 80043a4:	4013      	ands	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <HAL_RCC_GetSysClockFreq+0xdc>)
 80043ac:	4353      	muls	r3, r2
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7fb febb 	bl	800012c <__udivsi3>
 80043b6:	0003      	movs	r3, r0
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	e017      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043bc:	4b16      	ldr	r3, [pc, #88]	; (8004418 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2210      	movs	r2, #16
 80043c2:	4013      	ands	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x92>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4a14      	ldr	r2, [pc, #80]	; (800441c <HAL_RCC_GetSysClockFreq+0xd4>)
 80043ca:	4353      	muls	r3, r2
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7fb feac 	bl	800012c <__udivsi3>
 80043d4:	0003      	movs	r3, r0
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	e008      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0xa4>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4a10      	ldr	r2, [pc, #64]	; (8004420 <HAL_RCC_GetSysClockFreq+0xd8>)
 80043de:	4353      	muls	r3, r2
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f7fb fea2 	bl	800012c <__udivsi3>
 80043e8:	0003      	movs	r3, r0
 80043ea:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
      break;
 80043f0:	e00d      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	0b5b      	lsrs	r3, r3, #13
 80043f8:	2207      	movs	r2, #7
 80043fa:	4013      	ands	r3, r2
 80043fc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	2280      	movs	r2, #128	; 0x80
 8004404:	0212      	lsls	r2, r2, #8
 8004406:	409a      	lsls	r2, r3
 8004408:	0013      	movs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
      break;
 800440c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800440e:	693b      	ldr	r3, [r7, #16]
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b006      	add	sp, #24
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	003d0900 	.word	0x003d0900
 8004420:	00f42400 	.word	0x00f42400
 8004424:	007a1200 	.word	0x007a1200
 8004428:	08009804 	.word	0x08009804

0800442c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004430:	4b02      	ldr	r3, [pc, #8]	; (800443c <HAL_RCC_GetHCLKFreq+0x10>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	20000000 	.word	0x20000000

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004444:	f7ff fff2 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004448:	0001      	movs	r1, r0
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	2207      	movs	r2, #7
 8004452:	4013      	ands	r3, r2
 8004454:	4a04      	ldr	r2, [pc, #16]	; (8004468 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004456:	5cd3      	ldrb	r3, [r2, r3]
 8004458:	40d9      	lsrs	r1, r3
 800445a:	000b      	movs	r3, r1
}
 800445c:	0018      	movs	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	40021000 	.word	0x40021000
 8004468:	080097fc 	.word	0x080097fc

0800446c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004470:	f7ff ffdc 	bl	800442c <HAL_RCC_GetHCLKFreq>
 8004474:	0001      	movs	r1, r0
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	0adb      	lsrs	r3, r3, #11
 800447c:	2207      	movs	r2, #7
 800447e:	4013      	ands	r3, r2
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	40d9      	lsrs	r1, r3
 8004486:	000b      	movs	r3, r1
}
 8004488:	0018      	movs	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	40021000 	.word	0x40021000
 8004494:	080097fc 	.word	0x080097fc

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2220      	movs	r2, #32
 80044a6:	4013      	ands	r3, r2
 80044a8:	d100      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x14>
 80044aa:	e0c6      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80044ac:	2317      	movs	r3, #23
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b4:	4b96      	ldr	r3, [pc, #600]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80044b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	055b      	lsls	r3, r3, #21
 80044bc:	4013      	ands	r3, r2
 80044be:	d10a      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4b93      	ldr	r3, [pc, #588]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80044c2:	4a93      	ldr	r2, [pc, #588]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80044c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	0549      	lsls	r1, r1, #21
 80044ca:	430a      	orrs	r2, r1
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80044ce:	2317      	movs	r3, #23
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d6:	4b8f      	ldr	r3, [pc, #572]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	d11a      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e2:	4b8c      	ldr	r3, [pc, #560]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80044e4:	4a8b      	ldr	r2, [pc, #556]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	2180      	movs	r1, #128	; 0x80
 80044ea:	0049      	lsls	r1, r1, #1
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f0:	f7fe fd40 	bl	8002f74 <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	e008      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fa:	f7fe fd3b 	bl	8002f74 <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b64      	cmp	r3, #100	; 0x64
 8004506:	d901      	bls.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0fc      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x26e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4013      	ands	r3, r2
 8004516:	d0f0      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004518:	4b7d      	ldr	r3, [pc, #500]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	23c0      	movs	r3, #192	; 0xc0
 800451e:	039b      	lsls	r3, r3, #14
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	23c0      	movs	r3, #192	; 0xc0
 800452a:	039b      	lsls	r3, r3, #14
 800452c:	401a      	ands	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	429a      	cmp	r2, r3
 8004532:	d013      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	23c0      	movs	r3, #192	; 0xc0
 800453a:	029b      	lsls	r3, r3, #10
 800453c:	401a      	ands	r2, r3
 800453e:	23c0      	movs	r3, #192	; 0xc0
 8004540:	029b      	lsls	r3, r3, #10
 8004542:	429a      	cmp	r2, r3
 8004544:	d10a      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004546:	4b72      	ldr	r3, [pc, #456]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	029b      	lsls	r3, r3, #10
 800454e:	401a      	ands	r2, r3
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	029b      	lsls	r3, r3, #10
 8004554:	429a      	cmp	r2, r3
 8004556:	d101      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0d4      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x26e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800455c:	4b6c      	ldr	r3, [pc, #432]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800455e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004560:	23c0      	movs	r3, #192	; 0xc0
 8004562:	029b      	lsls	r3, r3, #10
 8004564:	4013      	ands	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d03b      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	23c0      	movs	r3, #192	; 0xc0
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	401a      	ands	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	429a      	cmp	r2, r3
 800457c:	d033      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2220      	movs	r2, #32
 8004584:	4013      	ands	r3, r2
 8004586:	d02e      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004588:	4b61      	ldr	r3, [pc, #388]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	4a62      	ldr	r2, [pc, #392]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800458e:	4013      	ands	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004592:	4b5f      	ldr	r3, [pc, #380]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004594:	4a5e      	ldr	r2, [pc, #376]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004596:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004598:	2180      	movs	r1, #128	; 0x80
 800459a:	0309      	lsls	r1, r1, #12
 800459c:	430a      	orrs	r2, r1
 800459e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045a0:	4b5b      	ldr	r3, [pc, #364]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80045a2:	4a5b      	ldr	r2, [pc, #364]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80045a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045a6:	495d      	ldr	r1, [pc, #372]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80045a8:	400a      	ands	r2, r1
 80045aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80045ac:	4b58      	ldr	r3, [pc, #352]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4013      	ands	r3, r2
 80045ba:	d014      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fe fcda 	bl	8002f74 <HAL_GetTick>
 80045c0:	0003      	movs	r3, r0
 80045c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045c4:	e009      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fe fcd5 	bl	8002f74 <HAL_GetTick>
 80045ca:	0002      	movs	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	4a53      	ldr	r2, [pc, #332]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e095      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045da:	4b4d      	ldr	r3, [pc, #308]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80045dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045de:	2380      	movs	r3, #128	; 0x80
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4013      	ands	r3, r2
 80045e4:	d0ef      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	23c0      	movs	r3, #192	; 0xc0
 80045ec:	029b      	lsls	r3, r3, #10
 80045ee:	401a      	ands	r2, r3
 80045f0:	23c0      	movs	r3, #192	; 0xc0
 80045f2:	029b      	lsls	r3, r3, #10
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d10b      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80045f8:	4a45      	ldr	r2, [pc, #276]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80045fa:	4b45      	ldr	r3, [pc, #276]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4949      	ldr	r1, [pc, #292]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004600:	4019      	ands	r1, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6858      	ldr	r0, [r3, #4]
 8004606:	23c0      	movs	r3, #192	; 0xc0
 8004608:	039b      	lsls	r3, r3, #14
 800460a:	4003      	ands	r3, r0
 800460c:	430b      	orrs	r3, r1
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4a3f      	ldr	r2, [pc, #252]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004612:	4b3f      	ldr	r3, [pc, #252]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004614:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6858      	ldr	r0, [r3, #4]
 800461a:	23c0      	movs	r3, #192	; 0xc0
 800461c:	029b      	lsls	r3, r3, #10
 800461e:	4003      	ands	r3, r0
 8004620:	430b      	orrs	r3, r1
 8004622:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004624:	2317      	movs	r3, #23
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d105      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462e:	4b38      	ldr	r3, [pc, #224]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004630:	4a37      	ldr	r2, [pc, #220]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004634:	493c      	ldr	r1, [pc, #240]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004636:	400a      	ands	r2, r1
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2201      	movs	r2, #1
 8004640:	4013      	ands	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004644:	4a32      	ldr	r2, [pc, #200]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004646:	4b32      	ldr	r3, [pc, #200]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800464a:	2103      	movs	r1, #3
 800464c:	438b      	bics	r3, r1
 800464e:	0019      	movs	r1, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	430b      	orrs	r3, r1
 8004656:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2202      	movs	r2, #2
 800465e:	4013      	ands	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004662:	4a2b      	ldr	r2, [pc, #172]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004664:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004668:	210c      	movs	r1, #12
 800466a:	438b      	bics	r3, r1
 800466c:	0019      	movs	r1, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	430b      	orrs	r3, r1
 8004674:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2204      	movs	r2, #4
 800467c:	4013      	ands	r3, r2
 800467e:	d008      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004680:	4a23      	ldr	r2, [pc, #140]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004682:	4b23      	ldr	r3, [pc, #140]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004686:	4929      	ldr	r1, [pc, #164]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004688:	4019      	ands	r1, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	430b      	orrs	r3, r1
 8004690:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2208      	movs	r2, #8
 8004698:	4013      	ands	r3, r2
 800469a:	d008      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800469c:	4a1c      	ldr	r2, [pc, #112]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800469e:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80046a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a2:	4923      	ldr	r1, [pc, #140]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80046a4:	4019      	ands	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	430b      	orrs	r3, r1
 80046ac:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	4013      	ands	r3, r2
 80046b8:	d008      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ba:	4a15      	ldr	r2, [pc, #84]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80046bc:	4b14      	ldr	r3, [pc, #80]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80046be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c0:	4915      	ldr	r1, [pc, #84]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046c2:	4019      	ands	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	430b      	orrs	r3, r1
 80046ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2240      	movs	r2, #64	; 0x40
 80046d2:	4013      	ands	r3, r2
 80046d4:	d008      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046d6:	4a0e      	ldr	r2, [pc, #56]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80046d8:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	4915      	ldr	r1, [pc, #84]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80046de:	4019      	ands	r1, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	4013      	ands	r3, r2
 80046f0:	d008      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80046f2:	4a07      	ldr	r2, [pc, #28]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	490f      	ldr	r1, [pc, #60]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80046fa:	4019      	ands	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	430b      	orrs	r3, r1
 8004702:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b006      	add	sp, #24
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	40021000 	.word	0x40021000
 8004714:	40007000 	.word	0x40007000
 8004718:	fffcffff 	.word	0xfffcffff
 800471c:	fff7ffff 	.word	0xfff7ffff
 8004720:	00001388 	.word	0x00001388
 8004724:	ffcfffff 	.word	0xffcfffff
 8004728:	efffffff 	.word	0xefffffff
 800472c:	fffff3ff 	.word	0xfffff3ff
 8004730:	ffffcfff 	.word	0xffffcfff
 8004734:	fbffffff 	.word	0xfbffffff
 8004738:	fff3ffff 	.word	0xfff3ffff

0800473c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e08e      	b.n	800486c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2221      	movs	r2, #33	; 0x21
 8004752:	5c9b      	ldrb	r3, [r3, r2]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	2100      	movs	r1, #0
 8004760:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f002 fa27 	bl	8006bb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2221      	movs	r2, #33	; 0x21
 800476e:	2102      	movs	r1, #2
 8004770:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	22ca      	movs	r2, #202	; 0xca
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2253      	movs	r2, #83	; 0x53
 8004780:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 fbb2 	bl	8004eee <RTC_EnterInitMode>
 800478a:	1e03      	subs	r3, r0, #0
 800478c:	d009      	beq.n	80047a2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	22ff      	movs	r2, #255	; 0xff
 8004794:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2221      	movs	r2, #33	; 0x21
 800479a:	2104      	movs	r1, #4
 800479c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e064      	b.n	800486c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	6892      	ldr	r2, [r2, #8]
 80047ac:	4931      	ldr	r1, [pc, #196]	; (8004874 <HAL_RTC_Init+0x138>)
 80047ae:	400a      	ands	r2, r1
 80047b0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	6891      	ldr	r1, [r2, #8]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6850      	ldr	r0, [r2, #4]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6912      	ldr	r2, [r2, #16]
 80047c4:	4310      	orrs	r0, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6992      	ldr	r2, [r2, #24]
 80047ca:	4302      	orrs	r2, r0
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	68d2      	ldr	r2, [r2, #12]
 80047d8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6812      	ldr	r2, [r2, #0]
 80047e2:	6911      	ldr	r1, [r2, #16]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6892      	ldr	r2, [r2, #8]
 80047e8:	0412      	lsls	r2, r2, #16
 80047ea:	430a      	orrs	r2, r1
 80047ec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	68d2      	ldr	r2, [r2, #12]
 80047f8:	2180      	movs	r1, #128	; 0x80
 80047fa:	438a      	bics	r2, r1
 80047fc:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004808:	2103      	movs	r1, #3
 800480a:	438a      	bics	r2, r1
 800480c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	69d0      	ldr	r0, [r2, #28]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6952      	ldr	r2, [r2, #20]
 8004820:	4302      	orrs	r2, r0
 8004822:	430a      	orrs	r2, r1
 8004824:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2220      	movs	r2, #32
 800482e:	4013      	ands	r3, r2
 8004830:	d113      	bne.n	800485a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	0018      	movs	r0, r3
 8004836:	f000 fb33 	bl	8004ea0 <HAL_RTC_WaitForSynchro>
 800483a:	1e03      	subs	r3, r0, #0
 800483c:	d00d      	beq.n	800485a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	22ff      	movs	r2, #255	; 0xff
 8004844:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2221      	movs	r2, #33	; 0x21
 800484a:	2104      	movs	r1, #4
 800484c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	2100      	movs	r1, #0
 8004854:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e008      	b.n	800486c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	22ff      	movs	r2, #255	; 0xff
 8004860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2221      	movs	r2, #33	; 0x21
 8004866:	2101      	movs	r1, #1
 8004868:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800486a:	2300      	movs	r3, #0
  }
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b002      	add	sp, #8
 8004872:	bd80      	pop	{r7, pc}
 8004874:	ff8fffbf 	.word	0xff8fffbf

08004878 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	5c9b      	ldrb	r3, [r3, r2]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_RTC_SetTime+0x1a>
 800488e:	2302      	movs	r3, #2
 8004890:	e0ad      	b.n	80049ee <HAL_RTC_SetTime+0x176>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	2101      	movs	r1, #1
 8004898:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2221      	movs	r2, #33	; 0x21
 800489e:	2102      	movs	r1, #2
 80048a0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d125      	bne.n	80048f4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2240      	movs	r2, #64	; 0x40
 80048b0:	4013      	ands	r3, r2
 80048b2:	d102      	bne.n	80048ba <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2200      	movs	r2, #0
 80048b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 fb3f 	bl	8004f42 <RTC_ByteToBcd2>
 80048c4:	0003      	movs	r3, r0
 80048c6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 fb38 	bl	8004f42 <RTC_ByteToBcd2>
 80048d2:	0003      	movs	r3, r0
 80048d4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80048d6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	789b      	ldrb	r3, [r3, #2]
 80048dc:	0018      	movs	r0, r3
 80048de:	f000 fb30 	bl	8004f42 <RTC_ByteToBcd2>
 80048e2:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80048e4:	0022      	movs	r2, r4
 80048e6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	78db      	ldrb	r3, [r3, #3]
 80048ec:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	e017      	b.n	8004924 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2240      	movs	r2, #64	; 0x40
 80048fc:	4013      	ands	r3, r2
 80048fe:	d102      	bne.n	8004906 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2200      	movs	r2, #0
 8004904:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004912:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004918:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	78db      	ldrb	r3, [r3, #3]
 800491e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004920:	4313      	orrs	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	22ca      	movs	r2, #202	; 0xca
 800492a:	625a      	str	r2, [r3, #36]	; 0x24
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2253      	movs	r2, #83	; 0x53
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	0018      	movs	r0, r3
 8004938:	f000 fad9 	bl	8004eee <RTC_EnterInitMode>
 800493c:	1e03      	subs	r3, r0, #0
 800493e:	d00d      	beq.n	800495c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	22ff      	movs	r2, #255	; 0xff
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2221      	movs	r2, #33	; 0x21
 800494c:	2104      	movs	r1, #4
 800494e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	2100      	movs	r1, #0
 8004956:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e048      	b.n	80049ee <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4925      	ldr	r1, [pc, #148]	; (80049f8 <HAL_RTC_SetTime+0x180>)
 8004964:	400a      	ands	r2, r1
 8004966:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	6892      	ldr	r2, [r2, #8]
 8004972:	4922      	ldr	r1, [pc, #136]	; (80049fc <HAL_RTC_SetTime+0x184>)
 8004974:	400a      	ands	r2, r1
 8004976:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	6891      	ldr	r1, [r2, #8]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	68d0      	ldr	r0, [r2, #12]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	6912      	ldr	r2, [r2, #16]
 800498a:	4302      	orrs	r2, r0
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	68d2      	ldr	r2, [r2, #12]
 800499a:	2180      	movs	r1, #128	; 0x80
 800499c:	438a      	bics	r2, r1
 800499e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2220      	movs	r2, #32
 80049a8:	4013      	ands	r3, r2
 80049aa:	d113      	bne.n	80049d4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	0018      	movs	r0, r3
 80049b0:	f000 fa76 	bl	8004ea0 <HAL_RTC_WaitForSynchro>
 80049b4:	1e03      	subs	r3, r0, #0
 80049b6:	d00d      	beq.n	80049d4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	22ff      	movs	r2, #255	; 0xff
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2221      	movs	r2, #33	; 0x21
 80049c4:	2104      	movs	r1, #4
 80049c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	2100      	movs	r1, #0
 80049ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e00c      	b.n	80049ee <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	22ff      	movs	r2, #255	; 0xff
 80049da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2221      	movs	r2, #33	; 0x21
 80049e0:	2101      	movs	r1, #1
 80049e2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
  }
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b007      	add	sp, #28
 80049f4:	bd90      	pop	{r4, r7, pc}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	007f7f7f 	.word	0x007f7f7f
 80049fc:	fffbffff 	.word	0xfffbffff

08004a00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	5c9b      	ldrb	r3, [r3, r2]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_RTC_SetDate+0x1a>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e099      	b.n	8004b4e <HAL_RTC_SetDate+0x14e>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	2101      	movs	r1, #1
 8004a20:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2221      	movs	r2, #33	; 0x21
 8004a26:	2102      	movs	r1, #2
 8004a28:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10e      	bne.n	8004a4e <HAL_RTC_SetDate+0x4e>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	001a      	movs	r2, r3
 8004a36:	2310      	movs	r3, #16
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d008      	beq.n	8004a4e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	785b      	ldrb	r3, [r3, #1]
 8004a40:	2210      	movs	r2, #16
 8004a42:	4393      	bics	r3, r2
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	330a      	adds	r3, #10
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d11c      	bne.n	8004a8e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	78db      	ldrb	r3, [r3, #3]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f000 fa72 	bl	8004f42 <RTC_ByteToBcd2>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	785b      	ldrb	r3, [r3, #1]
 8004a66:	0018      	movs	r0, r3
 8004a68:	f000 fa6b 	bl	8004f42 <RTC_ByteToBcd2>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a70:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	789b      	ldrb	r3, [r3, #2]
 8004a76:	0018      	movs	r0, r3
 8004a78:	f000 fa63 	bl	8004f42 <RTC_ByteToBcd2>
 8004a7c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004a7e:	0022      	movs	r2, r4
 8004a80:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e00e      	b.n	8004aac <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	78db      	ldrb	r3, [r3, #3]
 8004a92:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004a9a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004aa0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	22ca      	movs	r2, #202	; 0xca
 8004ab2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2253      	movs	r2, #83	; 0x53
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f000 fa15 	bl	8004eee <RTC_EnterInitMode>
 8004ac4:	1e03      	subs	r3, r0, #0
 8004ac6:	d00d      	beq.n	8004ae4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	22ff      	movs	r2, #255	; 0xff
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2221      	movs	r2, #33	; 0x21
 8004ad4:	2104      	movs	r1, #4
 8004ad6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	2100      	movs	r1, #0
 8004ade:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e034      	b.n	8004b4e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	491b      	ldr	r1, [pc, #108]	; (8004b58 <HAL_RTC_SetDate+0x158>)
 8004aec:	400a      	ands	r2, r1
 8004aee:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	68d2      	ldr	r2, [r2, #12]
 8004afa:	2180      	movs	r1, #128	; 0x80
 8004afc:	438a      	bics	r2, r1
 8004afe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2220      	movs	r2, #32
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d113      	bne.n	8004b34 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f000 f9c6 	bl	8004ea0 <HAL_RTC_WaitForSynchro>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d00d      	beq.n	8004b34 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	22ff      	movs	r2, #255	; 0xff
 8004b1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2221      	movs	r2, #33	; 0x21
 8004b24:	2104      	movs	r1, #4
 8004b26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e00c      	b.n	8004b4e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	22ff      	movs	r2, #255	; 0xff
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2221      	movs	r2, #33	; 0x21
 8004b40:	2101      	movs	r1, #1
 8004b42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
  }
}
 8004b4e:	0018      	movs	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b007      	add	sp, #28
 8004b54:	bd90      	pop	{r4, r7, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	00ffff3f 	.word	0x00ffff3f

08004b5c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b089      	sub	sp, #36	; 0x24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	5c9b      	ldrb	r3, [r3, r2]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_RTC_SetAlarm_IT+0x1a>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e130      	b.n	8004dd8 <HAL_RTC_SetAlarm_IT+0x27c>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2221      	movs	r2, #33	; 0x21
 8004b82:	2102      	movs	r1, #2
 8004b84:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d136      	bne.n	8004bfa <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	2240      	movs	r2, #64	; 0x40
 8004b94:	4013      	ands	r3, r2
 8004b96:	d102      	bne.n	8004b9e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 f9cd 	bl	8004f42 <RTC_ByteToBcd2>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	785b      	ldrb	r3, [r3, #1]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f000 f9c6 	bl	8004f42 <RTC_ByteToBcd2>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004bba:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	789b      	ldrb	r3, [r3, #2]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f000 f9be 	bl	8004f42 <RTC_ByteToBcd2>
 8004bc6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004bc8:	0022      	movs	r2, r4
 8004bca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	78db      	ldrb	r3, [r3, #3]
 8004bd0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	5c9b      	ldrb	r3, [r3, r2]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 f9b0 	bl	8004f42 <RTC_ByteToBcd2>
 8004be2:	0003      	movs	r3, r0
 8004be4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004be6:	0022      	movs	r2, r4
 8004be8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004bee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	e022      	b.n	8004c40 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2240      	movs	r2, #64	; 0x40
 8004c02:	4013      	ands	r3, r2
 8004c04:	d102      	bne.n	8004c0c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c18:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004c1e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	78db      	ldrb	r3, [r3, #3]
 8004c24:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004c26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2120      	movs	r1, #32
 8004c2c:	5c5b      	ldrb	r3, [r3, r1]
 8004c2e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004c30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004c36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	22ca      	movs	r2, #202	; 0xca
 8004c52:	625a      	str	r2, [r3, #36]	; 0x24
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2253      	movs	r2, #83	; 0x53
 8004c5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d14e      	bne.n	8004d06 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	6892      	ldr	r2, [r2, #8]
 8004c72:	495b      	ldr	r1, [pc, #364]	; (8004de0 <HAL_RTC_SetAlarm_IT+0x284>)
 8004c74:	400a      	ands	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	68d2      	ldr	r2, [r2, #12]
 8004c82:	21ff      	movs	r1, #255	; 0xff
 8004c84:	400a      	ands	r2, r1
 8004c86:	4957      	ldr	r1, [pc, #348]	; (8004de4 <HAL_RTC_SetAlarm_IT+0x288>)
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004c8c:	f7fe f972 	bl	8002f74 <HAL_GetTick>
 8004c90:	0003      	movs	r3, r0
 8004c92:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004c94:	e016      	b.n	8004cc4 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c96:	f7fe f96d 	bl	8002f74 <HAL_GetTick>
 8004c9a:	0002      	movs	r2, r0
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	23fa      	movs	r3, #250	; 0xfa
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d90d      	bls.n	8004cc4 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	22ff      	movs	r2, #255	; 0xff
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2221      	movs	r2, #33	; 0x21
 8004cb4:	2103      	movs	r1, #3
 8004cb6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e089      	b.n	8004dd8 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d0e2      	beq.n	8004c96 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	6892      	ldr	r2, [r2, #8]
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	0049      	lsls	r1, r1, #1
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	6892      	ldr	r2, [r2, #8]
 8004cfc:	2180      	movs	r1, #128	; 0x80
 8004cfe:	0149      	lsls	r1, r1, #5
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	e04d      	b.n	8004da2 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	6892      	ldr	r2, [r2, #8]
 8004d10:	4935      	ldr	r1, [pc, #212]	; (8004de8 <HAL_RTC_SetAlarm_IT+0x28c>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	68d2      	ldr	r2, [r2, #12]
 8004d20:	21ff      	movs	r1, #255	; 0xff
 8004d22:	400a      	ands	r2, r1
 8004d24:	4931      	ldr	r1, [pc, #196]	; (8004dec <HAL_RTC_SetAlarm_IT+0x290>)
 8004d26:	430a      	orrs	r2, r1
 8004d28:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d2a:	f7fe f923 	bl	8002f74 <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d32:	e016      	b.n	8004d62 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d34:	f7fe f91e 	bl	8002f74 <HAL_GetTick>
 8004d38:	0002      	movs	r2, r0
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	1ad2      	subs	r2, r2, r3
 8004d3e:	23fa      	movs	r3, #250	; 0xfa
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d90d      	bls.n	8004d62 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	22ff      	movs	r2, #255	; 0xff
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2221      	movs	r2, #33	; 0x21
 8004d52:	2103      	movs	r1, #3
 8004d54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e03a      	b.n	8004dd8 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d0e2      	beq.n	8004d34 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	6892      	ldr	r2, [r2, #8]
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	0089      	lsls	r1, r1, #2
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	6892      	ldr	r2, [r2, #8]
 8004d9a:	2180      	movs	r1, #128	; 0x80
 8004d9c:	0189      	lsls	r1, r1, #6
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004da2:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <HAL_RTC_SetAlarm_IT+0x294>)
 8004da4:	4a12      	ldr	r2, [pc, #72]	; (8004df0 <HAL_RTC_SetAlarm_IT+0x294>)
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	2180      	movs	r1, #128	; 0x80
 8004daa:	0289      	lsls	r1, r1, #10
 8004dac:	430a      	orrs	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <HAL_RTC_SetAlarm_IT+0x294>)
 8004db2:	4a0f      	ldr	r2, [pc, #60]	; (8004df0 <HAL_RTC_SetAlarm_IT+0x294>)
 8004db4:	6892      	ldr	r2, [r2, #8]
 8004db6:	2180      	movs	r1, #128	; 0x80
 8004db8:	0289      	lsls	r1, r1, #10
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	22ff      	movs	r2, #255	; 0xff
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2221      	movs	r2, #33	; 0x21
 8004dca:	2101      	movs	r1, #1
 8004dcc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b009      	add	sp, #36	; 0x24
 8004dde:	bd90      	pop	{r4, r7, pc}
 8004de0:	fffffeff 	.word	0xfffffeff
 8004de4:	fffffe7f 	.word	0xfffffe7f
 8004de8:	fffffdff 	.word	0xfffffdff
 8004dec:	fffffd7f 	.word	0xfffffd7f
 8004df0:	40010400 	.word	0x40010400

08004df4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	015b      	lsls	r3, r3, #5
 8004e06:	4013      	ands	r3, r2
 8004e08:	d014      	beq.n	8004e34 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4013      	ands	r3, r2
 8004e16:	d00d      	beq.n	8004e34 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f000 f838 	bl	8004e90 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	68d2      	ldr	r2, [r2, #12]
 8004e2a:	21ff      	movs	r1, #255	; 0xff
 8004e2c:	400a      	ands	r2, r1
 8004e2e:	4915      	ldr	r1, [pc, #84]	; (8004e84 <HAL_RTC_AlarmIRQHandler+0x90>)
 8004e30:	430a      	orrs	r2, r1
 8004e32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	019b      	lsls	r3, r3, #6
 8004e3e:	4013      	ands	r3, r2
 8004e40:	d014      	beq.n	8004e6c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d00d      	beq.n	8004e6c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 f89f 	bl	8004f96 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	68d2      	ldr	r2, [r2, #12]
 8004e62:	21ff      	movs	r1, #255	; 0xff
 8004e64:	400a      	ands	r2, r1
 8004e66:	4908      	ldr	r1, [pc, #32]	; (8004e88 <HAL_RTC_AlarmIRQHandler+0x94>)
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <HAL_RTC_AlarmIRQHandler+0x98>)
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	0292      	lsls	r2, r2, #10
 8004e72:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2221      	movs	r2, #33	; 0x21
 8004e78:	2101      	movs	r1, #1
 8004e7a:	5499      	strb	r1, [r3, r2]
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	fffffe7f 	.word	0xfffffe7f
 8004e88:	fffffd7f 	.word	0xfffffd7f
 8004e8c:	40010400 	.word	0x40010400

08004e90 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	68d2      	ldr	r2, [r2, #12]
 8004eb2:	21a0      	movs	r1, #160	; 0xa0
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004eb8:	f7fe f85c 	bl	8002f74 <HAL_GetTick>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ec2:	f7fe f857 	bl	8002f74 <HAL_GetTick>
 8004ec6:	0002      	movs	r2, r0
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	1ad2      	subs	r2, r2, r3
 8004ecc:	23fa      	movs	r3, #250	; 0xfa
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e006      	b.n	8004ee6 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d0ee      	beq.n	8004ec2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b004      	add	sp, #16
 8004eec:	bd80      	pop	{r7, pc}

08004eee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2240      	movs	r2, #64	; 0x40
 8004efe:	4013      	ands	r3, r2
 8004f00:	d11a      	bne.n	8004f38 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	4252      	negs	r2, r2
 8004f0a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f0c:	f7fe f832 	bl	8002f74 <HAL_GetTick>
 8004f10:	0003      	movs	r3, r0
 8004f12:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004f14:	e00a      	b.n	8004f2c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004f16:	f7fe f82d 	bl	8002f74 <HAL_GetTick>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	23fa      	movs	r3, #250	; 0xfa
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d901      	bls.n	8004f2c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e006      	b.n	8004f3a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	2240      	movs	r2, #64	; 0x40
 8004f34:	4013      	ands	r3, r2
 8004f36:	d0ee      	beq.n	8004f16 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b004      	add	sp, #16
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	0002      	movs	r2, r0
 8004f4a:	1dfb      	adds	r3, r7, #7
 8004f4c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004f52:	230b      	movs	r3, #11
 8004f54:	18fb      	adds	r3, r7, r3
 8004f56:	1dfa      	adds	r2, r7, #7
 8004f58:	7812      	ldrb	r2, [r2, #0]
 8004f5a:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8004f5c:	e009      	b.n	8004f72 <RTC_ByteToBcd2+0x30>
  {
    bcdhigh++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004f64:	230b      	movs	r3, #11
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	220b      	movs	r2, #11
 8004f6a:	18ba      	adds	r2, r7, r2
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	3a0a      	subs	r2, #10
 8004f70:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8004f72:	230b      	movs	r3, #11
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	d8f0      	bhi.n	8004f5e <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	230b      	movs	r3, #11
 8004f86:	18fb      	adds	r3, r7, r3
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b2db      	uxtb	r3, r3
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	b004      	add	sp, #16
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b002      	add	sp, #8
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e057      	b.n	800506a <HAL_SPI_Init+0xc2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2251      	movs	r2, #81	; 0x51
 8004fc4:	5c9b      	ldrb	r3, [r3, r2]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d107      	bne.n	8004fdc <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2250      	movs	r2, #80	; 0x50
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f001 fe0e 	bl	8006bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2251      	movs	r2, #81	; 0x51
 8004fe0:	2102      	movs	r1, #2
 8004fe2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	2140      	movs	r1, #64	; 0x40
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6851      	ldr	r1, [r2, #4]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6892      	ldr	r2, [r2, #8]
 8005000:	4311      	orrs	r1, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	68d2      	ldr	r2, [r2, #12]
 8005006:	4311      	orrs	r1, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6912      	ldr	r2, [r2, #16]
 800500c:	4311      	orrs	r1, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6952      	ldr	r2, [r2, #20]
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6990      	ldr	r0, [r2, #24]
 8005018:	2280      	movs	r2, #128	; 0x80
 800501a:	0092      	lsls	r2, r2, #2
 800501c:	4002      	ands	r2, r0
 800501e:	4311      	orrs	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	69d2      	ldr	r2, [r2, #28]
 8005024:	4311      	orrs	r1, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6a12      	ldr	r2, [r2, #32]
 800502a:	4311      	orrs	r1, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6992      	ldr	r2, [r2, #24]
 800503c:	0c12      	lsrs	r2, r2, #16
 800503e:	2104      	movs	r1, #4
 8005040:	4011      	ands	r1, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	69d2      	ldr	r2, [r2, #28]
 8005054:	4907      	ldr	r1, [pc, #28]	; (8005074 <HAL_SPI_Init+0xcc>)
 8005056:	400a      	ands	r2, r1
 8005058:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2251      	movs	r2, #81	; 0x51
 8005064:	2101      	movs	r1, #1
 8005066:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	0018      	movs	r0, r3
 800506c:	46bd      	mov	sp, r7
 800506e:	b002      	add	sp, #8
 8005070:	bd80      	pop	{r7, pc}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	fffff7ff 	.word	0xfffff7ff

08005078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e044      	b.n	8005114 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800508e:	2b00      	cmp	r3, #0
 8005090:	d107      	bne.n	80050a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2270      	movs	r2, #112	; 0x70
 8005096:	2100      	movs	r1, #0
 8005098:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0018      	movs	r0, r3
 800509e:	f001 fe53 	bl	8006d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2224      	movs	r2, #36	; 0x24
 80050a6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	2101      	movs	r1, #1
 80050b4:	438a      	bics	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	0018      	movs	r0, r3
 80050bc:	f000 fb10 	bl	80056e0 <UART_SetConfig>
 80050c0:	0003      	movs	r3, r0
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d101      	bne.n	80050ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e024      	b.n	8005114 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f000 fe3f 	bl	8005d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	6852      	ldr	r2, [r2, #4]
 80050e4:	490d      	ldr	r1, [pc, #52]	; (800511c <HAL_UART_Init+0xa4>)
 80050e6:	400a      	ands	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	212a      	movs	r1, #42	; 0x2a
 80050f6:	438a      	bics	r2, r1
 80050f8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	2101      	movs	r1, #1
 8005106:	430a      	orrs	r2, r1
 8005108:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0018      	movs	r0, r3
 800510e:	f000 fecf 	bl	8005eb0 <UART_CheckIdleState>
 8005112:	0003      	movs	r3, r0
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b002      	add	sp, #8
 800511a:	bd80      	pop	{r7, pc}
 800511c:	ffffb7ff 	.word	0xffffb7ff

08005120 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	1dbb      	adds	r3, r7, #6
 800512e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005134:	2b20      	cmp	r3, #32
 8005136:	d000      	beq.n	800513a <HAL_UART_Transmit+0x1a>
 8005138:	e093      	b.n	8005262 <HAL_UART_Transmit+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_UART_Transmit+0x28>
 8005140:	1dbb      	adds	r3, r7, #6
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e08b      	b.n	8005264 <HAL_UART_Transmit+0x144>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	015b      	lsls	r3, r3, #5
 8005154:	429a      	cmp	r2, r3
 8005156:	d109      	bne.n	800516c <HAL_UART_Transmit+0x4c>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1) != 0)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2201      	movs	r2, #1
 8005164:	4013      	ands	r3, r2
 8005166:	d001      	beq.n	800516c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e07b      	b.n	8005264 <HAL_UART_Transmit+0x144>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2270      	movs	r2, #112	; 0x70
 8005170:	5c9b      	ldrb	r3, [r3, r2]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_UART_Transmit+0x5a>
 8005176:	2302      	movs	r3, #2
 8005178:	e074      	b.n	8005264 <HAL_UART_Transmit+0x144>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2270      	movs	r2, #112	; 0x70
 800517e:	2101      	movs	r1, #1
 8005180:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2221      	movs	r2, #33	; 0x21
 800518c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800518e:	f7fd fef1 	bl	8002f74 <HAL_GetTick>
 8005192:	0003      	movs	r3, r0
 8005194:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1dba      	adds	r2, r7, #6
 800519a:	2150      	movs	r1, #80	; 0x50
 800519c:	8812      	ldrh	r2, [r2, #0]
 800519e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1dba      	adds	r2, r7, #6
 80051a4:	2152      	movs	r1, #82	; 0x52
 80051a6:	8812      	ldrh	r2, [r2, #0]
 80051a8:	525a      	strh	r2, [r3, r1]

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	015b      	lsls	r3, r3, #5
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d108      	bne.n	80051c8 <HAL_UART_Transmit+0xa8>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d104      	bne.n	80051c8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	e003      	b.n	80051d0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051d0:	e02b      	b.n	800522a <HAL_UART_Transmit+0x10a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	0013      	movs	r3, r2
 80051dc:	2200      	movs	r2, #0
 80051de:	2180      	movs	r1, #128	; 0x80
 80051e0:	f000 feac 	bl	8005f3c <UART_WaitOnFlagUntilTimeout>
 80051e4:	1e03      	subs	r3, r0, #0
 80051e6:	d001      	beq.n	80051ec <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e03b      	b.n	8005264 <HAL_UART_Transmit+0x144>
      }
      if (pdata8bits == NULL)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <HAL_UART_Transmit+0xe8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	8812      	ldrh	r2, [r2, #0]
 80051fa:	05d2      	lsls	r2, r2, #23
 80051fc:	0dd2      	lsrs	r2, r2, #23
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	3302      	adds	r3, #2
 8005204:	61bb      	str	r3, [r7, #24]
 8005206:	e007      	b.n	8005218 <HAL_UART_Transmit+0xf8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	7812      	ldrb	r2, [r2, #0]
 8005210:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	3301      	adds	r3, #1
 8005216:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2252      	movs	r2, #82	; 0x52
 800521c:	5a9b      	ldrh	r3, [r3, r2]
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b299      	uxth	r1, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2252      	movs	r2, #82	; 0x52
 8005228:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2252      	movs	r2, #82	; 0x52
 800522e:	5a9b      	ldrh	r3, [r3, r2]
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1cd      	bne.n	80051d2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	0013      	movs	r3, r2
 8005240:	2200      	movs	r2, #0
 8005242:	2140      	movs	r1, #64	; 0x40
 8005244:	f000 fe7a 	bl	8005f3c <UART_WaitOnFlagUntilTimeout>
 8005248:	1e03      	subs	r3, r0, #0
 800524a:	d001      	beq.n	8005250 <HAL_UART_Transmit+0x130>
    {
      return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e009      	b.n	8005264 <HAL_UART_Transmit+0x144>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2270      	movs	r2, #112	; 0x70
 800525a:	2100      	movs	r1, #0
 800525c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_UART_Transmit+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	0018      	movs	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	b008      	add	sp, #32
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	1dbb      	adds	r3, r7, #6
 8005278:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800527e:	2b20      	cmp	r3, #32
 8005280:	d000      	beq.n	8005284 <HAL_UART_Receive_DMA+0x18>
 8005282:	e07f      	b.n	8005384 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_UART_Receive_DMA+0x26>
 800528a:	1dbb      	adds	r3, r7, #6
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e077      	b.n	8005386 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	015b      	lsls	r3, r3, #5
 800529e:	429a      	cmp	r2, r3
 80052a0:	d109      	bne.n	80052b6 <HAL_UART_Receive_DMA+0x4a>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d105      	bne.n	80052b6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2201      	movs	r2, #1
 80052ae:	4013      	ands	r3, r2
 80052b0:	d001      	beq.n	80052b6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e067      	b.n	8005386 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2270      	movs	r2, #112	; 0x70
 80052ba:	5c9b      	ldrb	r3, [r3, r2]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_UART_Receive_DMA+0x58>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e060      	b.n	8005386 <HAL_UART_Receive_DMA+0x11a>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2270      	movs	r2, #112	; 0x70
 80052c8:	2101      	movs	r1, #1
 80052ca:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	1dba      	adds	r2, r7, #6
 80052d6:	2158      	movs	r1, #88	; 0x58
 80052d8:	8812      	ldrh	r2, [r2, #0]
 80052da:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2222      	movs	r2, #34	; 0x22
 80052e6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d02a      	beq.n	8005346 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f4:	4a26      	ldr	r2, [pc, #152]	; (8005390 <HAL_UART_Receive_DMA+0x124>)
 80052f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fc:	4a25      	ldr	r2, [pc, #148]	; (8005394 <HAL_UART_Receive_DMA+0x128>)
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005304:	4a24      	ldr	r2, [pc, #144]	; (8005398 <HAL_UART_Receive_DMA+0x12c>)
 8005306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800530c:	2200      	movs	r2, #0
 800530e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3324      	adds	r3, #36	; 0x24
 800531a:	0019      	movs	r1, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	001a      	movs	r2, r3
 8005322:	1dbb      	adds	r3, r7, #6
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	f7fd ff83 	bl	8003230 <HAL_DMA_Start_IT>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d00b      	beq.n	8005346 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2210      	movs	r2, #16
 8005332:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2270      	movs	r2, #112	; 0x70
 8005338:	2100      	movs	r1, #0
 800533a:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e01f      	b.n	8005386 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2270      	movs	r2, #112	; 0x70
 800534a:	2100      	movs	r1, #0
 800534c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	0049      	lsls	r1, r1, #1
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	6892      	ldr	r2, [r2, #8]
 800536a:	2101      	movs	r1, #1
 800536c:	430a      	orrs	r2, r1
 800536e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	6892      	ldr	r2, [r2, #8]
 800537a:	2140      	movs	r1, #64	; 0x40
 800537c:	430a      	orrs	r2, r1
 800537e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005384:	2302      	movs	r3, #2
  }
}
 8005386:	0018      	movs	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	b004      	add	sp, #16
 800538c:	bd80      	pop	{r7, pc}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	08006039 	.word	0x08006039
 8005394:	080060a5 	.word	0x080060a5
 8005398:	080060c3 	.word	0x080060c3

0800539c <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a8:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2280      	movs	r2, #128	; 0x80
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d126      	bne.n	800540c <HAL_UART_DMAStop+0x70>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b21      	cmp	r3, #33	; 0x21
 80053c2:	d123      	bne.n	800540c <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	6892      	ldr	r2, [r2, #8]
 80053ce:	2180      	movs	r1, #128	; 0x80
 80053d0:	438a      	bics	r2, r1
 80053d2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d013      	beq.n	8005404 <HAL_UART_DMAStop+0x68>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fd ff8b 	bl	80032fc <HAL_DMA_Abort>
 80053e6:	1e03      	subs	r3, r0, #0
 80053e8:	d00c      	beq.n	8005404 <HAL_UART_DMAStop+0x68>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ee:	0018      	movs	r0, r3
 80053f0:	f7fe f8ba 	bl	8003568 <HAL_DMA_GetError>
 80053f4:	0003      	movs	r3, r0
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d104      	bne.n	8005404 <HAL_UART_DMAStop+0x68>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2210      	movs	r2, #16
 80053fe:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e032      	b.n	800546a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	0018      	movs	r0, r3
 8005408:	f000 fde2 	bl	8005fd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2240      	movs	r2, #64	; 0x40
 8005414:	4013      	ands	r3, r2
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d126      	bne.n	8005468 <HAL_UART_DMAStop+0xcc>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b22      	cmp	r3, #34	; 0x22
 800541e:	d123      	bne.n	8005468 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	2140      	movs	r1, #64	; 0x40
 800542c:	438a      	bics	r2, r1
 800542e:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <HAL_UART_DMAStop+0xc4>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800543c:	0018      	movs	r0, r3
 800543e:	f7fd ff5d 	bl	80032fc <HAL_DMA_Abort>
 8005442:	1e03      	subs	r3, r0, #0
 8005444:	d00c      	beq.n	8005460 <HAL_UART_DMAStop+0xc4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544a:	0018      	movs	r0, r3
 800544c:	f7fe f88c 	bl	8003568 <HAL_DMA_GetError>
 8005450:	0003      	movs	r3, r0
 8005452:	2b20      	cmp	r3, #32
 8005454:	d104      	bne.n	8005460 <HAL_UART_DMAStop+0xc4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2210      	movs	r2, #16
 800545a:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e004      	b.n	800546a <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	0018      	movs	r0, r3
 8005464:	f000 fdc8 	bl	8005ff8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	220f      	movs	r2, #15
 8005498:	4013      	ands	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d112      	bne.n	80054c8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2220      	movs	r2, #32
 80054a6:	4013      	ands	r3, r2
 80054a8:	d00e      	beq.n	80054c8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2220      	movs	r2, #32
 80054ae:	4013      	ands	r3, r2
 80054b0:	d00a      	beq.n	80054c8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d100      	bne.n	80054bc <HAL_UART_IRQHandler+0x48>
 80054ba:	e0f6      	b.n	80056aa <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	0010      	movs	r0, r2
 80054c4:	4798      	blx	r3
      }
      return;
 80054c6:	e0f0      	b.n	80056aa <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d100      	bne.n	80054d0 <HAL_UART_IRQHandler+0x5c>
 80054ce:	e0b8      	b.n	8005642 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2201      	movs	r2, #1
 80054d4:	4013      	ands	r3, r2
 80054d6:	d105      	bne.n	80054e4 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	2390      	movs	r3, #144	; 0x90
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4013      	ands	r3, r2
 80054e0:	d100      	bne.n	80054e4 <HAL_UART_IRQHandler+0x70>
 80054e2:	e0ae      	b.n	8005642 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	2201      	movs	r2, #1
 80054e8:	4013      	ands	r3, r2
 80054ea:	d00e      	beq.n	800550a <HAL_UART_IRQHandler+0x96>
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	2380      	movs	r3, #128	; 0x80
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4013      	ands	r3, r2
 80054f4:	d009      	beq.n	800550a <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2201      	movs	r2, #1
 80054fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005502:	2201      	movs	r2, #1
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	2202      	movs	r2, #2
 800550e:	4013      	ands	r3, r2
 8005510:	d00d      	beq.n	800552e <HAL_UART_IRQHandler+0xba>
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2201      	movs	r2, #1
 8005516:	4013      	ands	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2202      	movs	r2, #2
 8005520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005526:	2204      	movs	r2, #4
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2204      	movs	r2, #4
 8005532:	4013      	ands	r3, r2
 8005534:	d00d      	beq.n	8005552 <HAL_UART_IRQHandler+0xde>
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2201      	movs	r2, #1
 800553a:	4013      	ands	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2204      	movs	r2, #4
 8005544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800554a:	2202      	movs	r2, #2
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2208      	movs	r2, #8
 8005556:	4013      	ands	r3, r2
 8005558:	d011      	beq.n	800557e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2220      	movs	r2, #32
 800555e:	4013      	ands	r3, r2
 8005560:	d103      	bne.n	800556a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2201      	movs	r2, #1
 8005566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005568:	d009      	beq.n	800557e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2208      	movs	r2, #8
 8005570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005576:	2208      	movs	r2, #8
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d100      	bne.n	8005588 <HAL_UART_IRQHandler+0x114>
 8005586:	e092      	b.n	80056ae <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	2220      	movs	r2, #32
 800558c:	4013      	ands	r3, r2
 800558e:	d00c      	beq.n	80055aa <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2220      	movs	r2, #32
 8005594:	4013      	ands	r3, r2
 8005596:	d008      	beq.n	80055aa <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	0010      	movs	r0, r2
 80055a8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ae:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2240      	movs	r2, #64	; 0x40
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d003      	beq.n	80055c6 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2208      	movs	r2, #8
 80055c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055c4:	d033      	beq.n	800562e <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	0018      	movs	r0, r3
 80055ca:	f000 fd15 	bl	8005ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2240      	movs	r2, #64	; 0x40
 80055d6:	4013      	ands	r3, r2
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d123      	bne.n	8005624 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	6892      	ldr	r2, [r2, #8]
 80055e6:	2140      	movs	r1, #64	; 0x40
 80055e8:	438a      	bics	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d012      	beq.n	800561a <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f8:	4a30      	ldr	r2, [pc, #192]	; (80056bc <HAL_UART_IRQHandler+0x248>)
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005600:	0018      	movs	r0, r3
 8005602:	f7fd febb 	bl	800337c <HAL_DMA_Abort_IT>
 8005606:	1e03      	subs	r3, r0, #0
 8005608:	d019      	beq.n	800563e <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005614:	0018      	movs	r0, r3
 8005616:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005618:	e011      	b.n	800563e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0018      	movs	r0, r3
 800561e:	f000 f857 	bl	80056d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005622:	e00c      	b.n	800563e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0018      	movs	r0, r3
 8005628:	f000 f852 	bl	80056d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800562c:	e007      	b.n	800563e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	0018      	movs	r0, r3
 8005632:	f000 f84d 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800563c:	e037      	b.n	80056ae <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800563e:	46c0      	nop			; (mov r8, r8)
    return;
 8005640:	e035      	b.n	80056ae <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	035b      	lsls	r3, r3, #13
 8005648:	4013      	ands	r3, r2
 800564a:	d00e      	beq.n	800566a <HAL_UART_IRQHandler+0x1f6>
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	2380      	movs	r3, #128	; 0x80
 8005650:	03db      	lsls	r3, r3, #15
 8005652:	4013      	ands	r3, r2
 8005654:	d009      	beq.n	800566a <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2280      	movs	r2, #128	; 0x80
 800565c:	0352      	lsls	r2, r2, #13
 800565e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	0018      	movs	r0, r3
 8005664:	f000 fd9d 	bl	80061a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005668:	e024      	b.n	80056b4 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	2280      	movs	r2, #128	; 0x80
 800566e:	4013      	ands	r3, r2
 8005670:	d00d      	beq.n	800568e <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2280      	movs	r2, #128	; 0x80
 8005676:	4013      	ands	r3, r2
 8005678:	d009      	beq.n	800568e <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800567e:	2b00      	cmp	r3, #0
 8005680:	d017      	beq.n	80056b2 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	0010      	movs	r0, r2
 800568a:	4798      	blx	r3
    }
    return;
 800568c:	e011      	b.n	80056b2 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	2240      	movs	r2, #64	; 0x40
 8005692:	4013      	ands	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_UART_IRQHandler+0x240>
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2240      	movs	r2, #64	; 0x40
 800569a:	4013      	ands	r3, r2
 800569c:	d00a      	beq.n	80056b4 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f000 fd64 	bl	800616e <UART_EndTransmit_IT>
    return;
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	e004      	b.n	80056b4 <HAL_UART_IRQHandler+0x240>
      return;
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	e002      	b.n	80056b4 <HAL_UART_IRQHandler+0x240>
    return;
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	e000      	b.n	80056b4 <HAL_UART_IRQHandler+0x240>
    return;
 80056b2:	46c0      	nop			; (mov r8, r8)
  }

}
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b008      	add	sp, #32
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	08006141 	.word	0x08006141

080056c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056c8:	46c0      	nop			; (mov r8, r8)
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b002      	add	sp, #8
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056d8:	46c0      	nop			; (mov r8, r8)
 80056da:	46bd      	mov	sp, r7
 80056dc:	b002      	add	sp, #8
 80056de:	bd80      	pop	{r7, pc}

080056e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e0:	b5b0      	push	{r4, r5, r7, lr}
 80056e2:	b08e      	sub	sp, #56	; 0x38
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80056e8:	231b      	movs	r3, #27
 80056ea:	2218      	movs	r2, #24
 80056ec:	4694      	mov	ip, r2
 80056ee:	44bc      	add	ip, r7
 80056f0:	4463      	add	r3, ip
 80056f2:	2210      	movs	r2, #16
 80056f4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80056fa:	2313      	movs	r3, #19
 80056fc:	2218      	movs	r2, #24
 80056fe:	4694      	mov	ip, r2
 8005700:	44bc      	add	ip, r7
 8005702:	4463      	add	r3, ip
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005708:	2300      	movs	r3, #0
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	431a      	orrs	r2, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	431a      	orrs	r2, r3
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	4313      	orrs	r3, r2
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	6812      	ldr	r2, [r2, #0]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	49c8      	ldr	r1, [pc, #800]	; (8005a50 <UART_SetConfig+0x370>)
 8005730:	4011      	ands	r1, r2
 8005732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005734:	430a      	orrs	r2, r1
 8005736:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	6852      	ldr	r2, [r2, #4]
 8005742:	49c4      	ldr	r1, [pc, #784]	; (8005a54 <UART_SetConfig+0x374>)
 8005744:	4011      	ands	r1, r2
 8005746:	69fa      	ldr	r2, [r7, #28]
 8005748:	68d2      	ldr	r2, [r2, #12]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4abf      	ldr	r2, [pc, #764]	; (8005a58 <UART_SetConfig+0x378>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005764:	4313      	orrs	r3, r2
 8005766:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	6892      	ldr	r2, [r2, #8]
 8005772:	49ba      	ldr	r1, [pc, #744]	; (8005a5c <UART_SetConfig+0x37c>)
 8005774:	4011      	ands	r1, r2
 8005776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005778:	430a      	orrs	r2, r1
 800577a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4ab7      	ldr	r2, [pc, #732]	; (8005a60 <UART_SetConfig+0x380>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d134      	bne.n	80057f0 <UART_SetConfig+0x110>
 8005786:	4bb7      	ldr	r3, [pc, #732]	; (8005a64 <UART_SetConfig+0x384>)
 8005788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578a:	2203      	movs	r2, #3
 800578c:	4013      	ands	r3, r2
 800578e:	2b01      	cmp	r3, #1
 8005790:	d015      	beq.n	80057be <UART_SetConfig+0xde>
 8005792:	d304      	bcc.n	800579e <UART_SetConfig+0xbe>
 8005794:	2b02      	cmp	r3, #2
 8005796:	d00a      	beq.n	80057ae <UART_SetConfig+0xce>
 8005798:	2b03      	cmp	r3, #3
 800579a:	d018      	beq.n	80057ce <UART_SetConfig+0xee>
 800579c:	e01f      	b.n	80057de <UART_SetConfig+0xfe>
 800579e:	231b      	movs	r3, #27
 80057a0:	2218      	movs	r2, #24
 80057a2:	4694      	mov	ip, r2
 80057a4:	44bc      	add	ip, r7
 80057a6:	4463      	add	r3, ip
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e0c5      	b.n	800593a <UART_SetConfig+0x25a>
 80057ae:	231b      	movs	r3, #27
 80057b0:	2218      	movs	r2, #24
 80057b2:	4694      	mov	ip, r2
 80057b4:	44bc      	add	ip, r7
 80057b6:	4463      	add	r3, ip
 80057b8:	2202      	movs	r2, #2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e0bd      	b.n	800593a <UART_SetConfig+0x25a>
 80057be:	231b      	movs	r3, #27
 80057c0:	2218      	movs	r2, #24
 80057c2:	4694      	mov	ip, r2
 80057c4:	44bc      	add	ip, r7
 80057c6:	4463      	add	r3, ip
 80057c8:	2204      	movs	r2, #4
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	e0b5      	b.n	800593a <UART_SetConfig+0x25a>
 80057ce:	231b      	movs	r3, #27
 80057d0:	2218      	movs	r2, #24
 80057d2:	4694      	mov	ip, r2
 80057d4:	44bc      	add	ip, r7
 80057d6:	4463      	add	r3, ip
 80057d8:	2208      	movs	r2, #8
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e0ad      	b.n	800593a <UART_SetConfig+0x25a>
 80057de:	231b      	movs	r3, #27
 80057e0:	2218      	movs	r2, #24
 80057e2:	4694      	mov	ip, r2
 80057e4:	44bc      	add	ip, r7
 80057e6:	4463      	add	r3, ip
 80057e8:	2210      	movs	r2, #16
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	46c0      	nop			; (mov r8, r8)
 80057ee:	e0a4      	b.n	800593a <UART_SetConfig+0x25a>
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a9c      	ldr	r2, [pc, #624]	; (8005a68 <UART_SetConfig+0x388>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d137      	bne.n	800586a <UART_SetConfig+0x18a>
 80057fa:	4b9a      	ldr	r3, [pc, #616]	; (8005a64 <UART_SetConfig+0x384>)
 80057fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fe:	220c      	movs	r2, #12
 8005800:	4013      	ands	r3, r2
 8005802:	2b04      	cmp	r3, #4
 8005804:	d018      	beq.n	8005838 <UART_SetConfig+0x158>
 8005806:	d802      	bhi.n	800580e <UART_SetConfig+0x12e>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <UART_SetConfig+0x138>
 800580c:	e024      	b.n	8005858 <UART_SetConfig+0x178>
 800580e:	2b08      	cmp	r3, #8
 8005810:	d00a      	beq.n	8005828 <UART_SetConfig+0x148>
 8005812:	2b0c      	cmp	r3, #12
 8005814:	d018      	beq.n	8005848 <UART_SetConfig+0x168>
 8005816:	e01f      	b.n	8005858 <UART_SetConfig+0x178>
 8005818:	231b      	movs	r3, #27
 800581a:	2218      	movs	r2, #24
 800581c:	4694      	mov	ip, r2
 800581e:	44bc      	add	ip, r7
 8005820:	4463      	add	r3, ip
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e088      	b.n	800593a <UART_SetConfig+0x25a>
 8005828:	231b      	movs	r3, #27
 800582a:	2218      	movs	r2, #24
 800582c:	4694      	mov	ip, r2
 800582e:	44bc      	add	ip, r7
 8005830:	4463      	add	r3, ip
 8005832:	2202      	movs	r2, #2
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e080      	b.n	800593a <UART_SetConfig+0x25a>
 8005838:	231b      	movs	r3, #27
 800583a:	2218      	movs	r2, #24
 800583c:	4694      	mov	ip, r2
 800583e:	44bc      	add	ip, r7
 8005840:	4463      	add	r3, ip
 8005842:	2204      	movs	r2, #4
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e078      	b.n	800593a <UART_SetConfig+0x25a>
 8005848:	231b      	movs	r3, #27
 800584a:	2218      	movs	r2, #24
 800584c:	4694      	mov	ip, r2
 800584e:	44bc      	add	ip, r7
 8005850:	4463      	add	r3, ip
 8005852:	2208      	movs	r2, #8
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e070      	b.n	800593a <UART_SetConfig+0x25a>
 8005858:	231b      	movs	r3, #27
 800585a:	2218      	movs	r2, #24
 800585c:	4694      	mov	ip, r2
 800585e:	44bc      	add	ip, r7
 8005860:	4463      	add	r3, ip
 8005862:	2210      	movs	r2, #16
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	e067      	b.n	800593a <UART_SetConfig+0x25a>
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a7f      	ldr	r2, [pc, #508]	; (8005a6c <UART_SetConfig+0x38c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d107      	bne.n	8005884 <UART_SetConfig+0x1a4>
 8005874:	231b      	movs	r3, #27
 8005876:	2218      	movs	r2, #24
 8005878:	4694      	mov	ip, r2
 800587a:	44bc      	add	ip, r7
 800587c:	4463      	add	r3, ip
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	e05a      	b.n	800593a <UART_SetConfig+0x25a>
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a79      	ldr	r2, [pc, #484]	; (8005a70 <UART_SetConfig+0x390>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d107      	bne.n	800589e <UART_SetConfig+0x1be>
 800588e:	231b      	movs	r3, #27
 8005890:	2218      	movs	r2, #24
 8005892:	4694      	mov	ip, r2
 8005894:	44bc      	add	ip, r7
 8005896:	4463      	add	r3, ip
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e04d      	b.n	800593a <UART_SetConfig+0x25a>
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a6d      	ldr	r2, [pc, #436]	; (8005a58 <UART_SetConfig+0x378>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d141      	bne.n	800592c <UART_SetConfig+0x24c>
 80058a8:	4b6e      	ldr	r3, [pc, #440]	; (8005a64 <UART_SetConfig+0x384>)
 80058aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058ac:	23c0      	movs	r3, #192	; 0xc0
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	4013      	ands	r3, r2
 80058b2:	2280      	movs	r2, #128	; 0x80
 80058b4:	00d2      	lsls	r2, r2, #3
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01f      	beq.n	80058fa <UART_SetConfig+0x21a>
 80058ba:	2280      	movs	r2, #128	; 0x80
 80058bc:	00d2      	lsls	r2, r2, #3
 80058be:	4293      	cmp	r3, r2
 80058c0:	d802      	bhi.n	80058c8 <UART_SetConfig+0x1e8>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <UART_SetConfig+0x1fa>
 80058c6:	e028      	b.n	800591a <UART_SetConfig+0x23a>
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	0112      	lsls	r2, r2, #4
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00c      	beq.n	80058ea <UART_SetConfig+0x20a>
 80058d0:	22c0      	movs	r2, #192	; 0xc0
 80058d2:	0112      	lsls	r2, r2, #4
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d018      	beq.n	800590a <UART_SetConfig+0x22a>
 80058d8:	e01f      	b.n	800591a <UART_SetConfig+0x23a>
 80058da:	231b      	movs	r3, #27
 80058dc:	2218      	movs	r2, #24
 80058de:	4694      	mov	ip, r2
 80058e0:	44bc      	add	ip, r7
 80058e2:	4463      	add	r3, ip
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	e027      	b.n	800593a <UART_SetConfig+0x25a>
 80058ea:	231b      	movs	r3, #27
 80058ec:	2218      	movs	r2, #24
 80058ee:	4694      	mov	ip, r2
 80058f0:	44bc      	add	ip, r7
 80058f2:	4463      	add	r3, ip
 80058f4:	2202      	movs	r2, #2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e01f      	b.n	800593a <UART_SetConfig+0x25a>
 80058fa:	231b      	movs	r3, #27
 80058fc:	2218      	movs	r2, #24
 80058fe:	4694      	mov	ip, r2
 8005900:	44bc      	add	ip, r7
 8005902:	4463      	add	r3, ip
 8005904:	2204      	movs	r2, #4
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e017      	b.n	800593a <UART_SetConfig+0x25a>
 800590a:	231b      	movs	r3, #27
 800590c:	2218      	movs	r2, #24
 800590e:	4694      	mov	ip, r2
 8005910:	44bc      	add	ip, r7
 8005912:	4463      	add	r3, ip
 8005914:	2208      	movs	r2, #8
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	e00f      	b.n	800593a <UART_SetConfig+0x25a>
 800591a:	231b      	movs	r3, #27
 800591c:	2218      	movs	r2, #24
 800591e:	4694      	mov	ip, r2
 8005920:	44bc      	add	ip, r7
 8005922:	4463      	add	r3, ip
 8005924:	2210      	movs	r2, #16
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	46c0      	nop			; (mov r8, r8)
 800592a:	e006      	b.n	800593a <UART_SetConfig+0x25a>
 800592c:	231b      	movs	r3, #27
 800592e:	2218      	movs	r2, #24
 8005930:	4694      	mov	ip, r2
 8005932:	44bc      	add	ip, r7
 8005934:	4463      	add	r3, ip
 8005936:	2210      	movs	r2, #16
 8005938:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a46      	ldr	r2, [pc, #280]	; (8005a58 <UART_SetConfig+0x378>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d000      	beq.n	8005946 <UART_SetConfig+0x266>
 8005944:	e09e      	b.n	8005a84 <UART_SetConfig+0x3a4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005946:	231b      	movs	r3, #27
 8005948:	2218      	movs	r2, #24
 800594a:	4694      	mov	ip, r2
 800594c:	44bc      	add	ip, r7
 800594e:	4463      	add	r3, ip
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d00d      	beq.n	8005972 <UART_SetConfig+0x292>
 8005956:	dc02      	bgt.n	800595e <UART_SetConfig+0x27e>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <UART_SetConfig+0x288>
 800595c:	e01d      	b.n	800599a <UART_SetConfig+0x2ba>
 800595e:	2b04      	cmp	r3, #4
 8005960:	d012      	beq.n	8005988 <UART_SetConfig+0x2a8>
 8005962:	2b08      	cmp	r3, #8
 8005964:	d015      	beq.n	8005992 <UART_SetConfig+0x2b2>
 8005966:	e018      	b.n	800599a <UART_SetConfig+0x2ba>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005968:	f7fe fd6a 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 800596c:	0003      	movs	r3, r0
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005970:	e01b      	b.n	80059aa <UART_SetConfig+0x2ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005972:	4b3c      	ldr	r3, [pc, #240]	; (8005a64 <UART_SetConfig+0x384>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2210      	movs	r2, #16
 8005978:	4013      	ands	r3, r2
 800597a:	d002      	beq.n	8005982 <UART_SetConfig+0x2a2>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800597c:	4b3d      	ldr	r3, [pc, #244]	; (8005a74 <UART_SetConfig+0x394>)
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8005980:	e013      	b.n	80059aa <UART_SetConfig+0x2ca>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005982:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <UART_SetConfig+0x398>)
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005986:	e010      	b.n	80059aa <UART_SetConfig+0x2ca>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005988:	f7fe fcde 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 800598c:	0003      	movs	r3, r0
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005990:	e00b      	b.n	80059aa <UART_SetConfig+0x2ca>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005998:	e007      	b.n	80059aa <UART_SetConfig+0x2ca>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800599a:	2313      	movs	r3, #19
 800599c:	2218      	movs	r2, #24
 800599e:	4694      	mov	ip, r2
 80059a0:	44bc      	add	ip, r7
 80059a2:	4463      	add	r3, ip
 80059a4:	2201      	movs	r2, #1
 80059a6:	701a      	strb	r2, [r3, #0]
        break;
 80059a8:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d100      	bne.n	80059b2 <UART_SetConfig+0x2d2>
 80059b0:	e1b1      	b.n	8005d16 <UART_SetConfig+0x636>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	0013      	movs	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	189a      	adds	r2, r3, r2
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	429a      	cmp	r2, r3
 80059c0:	d805      	bhi.n	80059ce <UART_SetConfig+0x2ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d207      	bcs.n	80059de <UART_SetConfig+0x2fe>
      {
        ret = HAL_ERROR;
 80059ce:	2313      	movs	r3, #19
 80059d0:	2218      	movs	r2, #24
 80059d2:	4694      	mov	ip, r2
 80059d4:	44bc      	add	ip, r7
 80059d6:	4463      	add	r3, ip
 80059d8:	2201      	movs	r2, #1
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e19b      	b.n	8005d16 <UART_SetConfig+0x636>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	6939      	ldr	r1, [r7, #16]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	000b      	movs	r3, r1
 80059ec:	0e1b      	lsrs	r3, r3, #24
 80059ee:	0010      	movs	r0, r2
 80059f0:	0205      	lsls	r5, r0, #8
 80059f2:	431d      	orrs	r5, r3
 80059f4:	000b      	movs	r3, r1
 80059f6:	021c      	lsls	r4, r3, #8
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	68b8      	ldr	r0, [r7, #8]
 8005a06:	68f9      	ldr	r1, [r7, #12]
 8005a08:	1900      	adds	r0, r0, r4
 8005a0a:	4169      	adcs	r1, r5
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	2300      	movs	r3, #0
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f7fa fd75 	bl	8000508 <__aeabi_uldivmod>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	000c      	movs	r4, r1
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <UART_SetConfig+0x39c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d908      	bls.n	8005a3e <UART_SetConfig+0x35e>
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	4a14      	ldr	r2, [pc, #80]	; (8005a80 <UART_SetConfig+0x3a0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d804      	bhi.n	8005a3e <UART_SetConfig+0x35e>
        {
          huart->Instance->BRR = usartdiv;
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	e16b      	b.n	8005d16 <UART_SetConfig+0x636>
        }
        else
        {
          ret = HAL_ERROR;
 8005a3e:	2313      	movs	r3, #19
 8005a40:	2218      	movs	r2, #24
 8005a42:	4694      	mov	ip, r2
 8005a44:	44bc      	add	ip, r7
 8005a46:	4463      	add	r3, ip
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e163      	b.n	8005d16 <UART_SetConfig+0x636>
 8005a4e:	46c0      	nop			; (mov r8, r8)
 8005a50:	efff69f3 	.word	0xefff69f3
 8005a54:	ffffcfff 	.word	0xffffcfff
 8005a58:	40004800 	.word	0x40004800
 8005a5c:	fffff4ff 	.word	0xfffff4ff
 8005a60:	40013800 	.word	0x40013800
 8005a64:	40021000 	.word	0x40021000
 8005a68:	40004400 	.word	0x40004400
 8005a6c:	40004c00 	.word	0x40004c00
 8005a70:	40005000 	.word	0x40005000
 8005a74:	003d0900 	.word	0x003d0900
 8005a78:	00f42400 	.word	0x00f42400
 8005a7c:	000002ff 	.word	0x000002ff
 8005a80:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d000      	beq.n	8005a92 <UART_SetConfig+0x3b2>
 8005a90:	e0b3      	b.n	8005bfa <UART_SetConfig+0x51a>
  {
    switch (clocksource)
 8005a92:	231b      	movs	r3, #27
 8005a94:	2218      	movs	r2, #24
 8005a96:	4694      	mov	ip, r2
 8005a98:	44bc      	add	ip, r7
 8005a9a:	4463      	add	r3, ip
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d86d      	bhi.n	8005b7e <UART_SetConfig+0x49e>
 8005aa2:	009a      	lsls	r2, r3, #2
 8005aa4:	4ba4      	ldr	r3, [pc, #656]	; (8005d38 <UART_SetConfig+0x658>)
 8005aa6:	18d3      	adds	r3, r2, r3
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005aac:	f7fe fcc8 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	005a      	lsls	r2, r3, #1
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	18d2      	adds	r2, r2, r3
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	0010      	movs	r0, r2
 8005ac4:	f7fa fb32 	bl	800012c <__udivsi3>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ace:	e05e      	b.n	8005b8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005ad0:	f7fe fccc 	bl	800446c <HAL_RCC_GetPCLK2Freq>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	005a      	lsls	r2, r3, #1
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	18d2      	adds	r2, r2, r3
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	0010      	movs	r0, r2
 8005ae8:	f7fa fb20 	bl	800012c <__udivsi3>
 8005aec:	0003      	movs	r3, r0
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005af2:	e04c      	b.n	8005b8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005af4:	4b91      	ldr	r3, [pc, #580]	; (8005d3c <UART_SetConfig+0x65c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2210      	movs	r2, #16
 8005afa:	4013      	ands	r3, r2
 8005afc:	d00e      	beq.n	8005b1c <UART_SetConfig+0x43c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	4a8e      	ldr	r2, [pc, #568]	; (8005d40 <UART_SetConfig+0x660>)
 8005b06:	189a      	adds	r2, r3, r2
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	0010      	movs	r0, r2
 8005b10:	f7fa fb0c 	bl	800012c <__udivsi3>
 8005b14:	0003      	movs	r3, r0
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8005b1a:	e038      	b.n	8005b8e <UART_SetConfig+0x4ae>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	4a88      	ldr	r2, [pc, #544]	; (8005d44 <UART_SetConfig+0x664>)
 8005b24:	189a      	adds	r2, r3, r2
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	0019      	movs	r1, r3
 8005b2c:	0010      	movs	r0, r2
 8005b2e:	f7fa fafd 	bl	800012c <__udivsi3>
 8005b32:	0003      	movs	r3, r0
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b38:	e029      	b.n	8005b8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b3a:	f7fe fc05 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 8005b3e:	0003      	movs	r3, r0
 8005b40:	005a      	lsls	r2, r3, #1
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	18d2      	adds	r2, r2, r3
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	0019      	movs	r1, r3
 8005b50:	0010      	movs	r0, r2
 8005b52:	f7fa faeb 	bl	800012c <__udivsi3>
 8005b56:	0003      	movs	r3, r0
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b5c:	e017      	b.n	8005b8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	0252      	lsls	r2, r2, #9
 8005b68:	189a      	adds	r2, r3, r2
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	0019      	movs	r1, r3
 8005b70:	0010      	movs	r0, r2
 8005b72:	f7fa fadb 	bl	800012c <__udivsi3>
 8005b76:	0003      	movs	r3, r0
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b7c:	e007      	b.n	8005b8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005b7e:	2313      	movs	r3, #19
 8005b80:	2218      	movs	r2, #24
 8005b82:	4694      	mov	ip, r2
 8005b84:	44bc      	add	ip, r7
 8005b86:	4463      	add	r3, ip
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
        break;
 8005b8c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	2b0f      	cmp	r3, #15
 8005b92:	d92a      	bls.n	8005bea <UART_SetConfig+0x50a>
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	4a6c      	ldr	r2, [pc, #432]	; (8005d48 <UART_SetConfig+0x668>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d826      	bhi.n	8005bea <UART_SetConfig+0x50a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	230a      	movs	r3, #10
 8005ba2:	2118      	movs	r1, #24
 8005ba4:	468c      	mov	ip, r1
 8005ba6:	44bc      	add	ip, r7
 8005ba8:	4463      	add	r3, ip
 8005baa:	210f      	movs	r1, #15
 8005bac:	438a      	bics	r2, r1
 8005bae:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	085b      	lsrs	r3, r3, #1
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2207      	movs	r2, #7
 8005bb8:	4013      	ands	r3, r2
 8005bba:	b299      	uxth	r1, r3
 8005bbc:	230a      	movs	r3, #10
 8005bbe:	2218      	movs	r2, #24
 8005bc0:	4694      	mov	ip, r2
 8005bc2:	44bc      	add	ip, r7
 8005bc4:	4463      	add	r3, ip
 8005bc6:	220a      	movs	r2, #10
 8005bc8:	2018      	movs	r0, #24
 8005bca:	4684      	mov	ip, r0
 8005bcc:	44bc      	add	ip, r7
 8005bce:	4462      	add	r2, ip
 8005bd0:	8812      	ldrh	r2, [r2, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	220a      	movs	r2, #10
 8005bdc:	2118      	movs	r1, #24
 8005bde:	468c      	mov	ip, r1
 8005be0:	44bc      	add	ip, r7
 8005be2:	4462      	add	r2, ip
 8005be4:	8812      	ldrh	r2, [r2, #0]
 8005be6:	60da      	str	r2, [r3, #12]
 8005be8:	e095      	b.n	8005d16 <UART_SetConfig+0x636>
    }
    else
    {
      ret = HAL_ERROR;
 8005bea:	2313      	movs	r3, #19
 8005bec:	2218      	movs	r2, #24
 8005bee:	4694      	mov	ip, r2
 8005bf0:	44bc      	add	ip, r7
 8005bf2:	4463      	add	r3, ip
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	e08d      	b.n	8005d16 <UART_SetConfig+0x636>
    }
  }
  else
  {
    switch (clocksource)
 8005bfa:	231b      	movs	r3, #27
 8005bfc:	2218      	movs	r2, #24
 8005bfe:	4694      	mov	ip, r2
 8005c00:	44bc      	add	ip, r7
 8005c02:	4463      	add	r3, ip
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d86a      	bhi.n	8005ce0 <UART_SetConfig+0x600>
 8005c0a:	009a      	lsls	r2, r3, #2
 8005c0c:	4b4f      	ldr	r3, [pc, #316]	; (8005d4c <UART_SetConfig+0x66c>)
 8005c0e:	18d3      	adds	r3, r2, r3
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c14:	f7fe fc14 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8005c18:	0002      	movs	r2, r0
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	18d2      	adds	r2, r2, r3
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	0019      	movs	r1, r3
 8005c28:	0010      	movs	r0, r2
 8005c2a:	f7fa fa7f 	bl	800012c <__udivsi3>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c34:	e05c      	b.n	8005cf0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c36:	f7fe fc19 	bl	800446c <HAL_RCC_GetPCLK2Freq>
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	085b      	lsrs	r3, r3, #1
 8005c42:	18d2      	adds	r2, r2, r3
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	0019      	movs	r1, r3
 8005c4a:	0010      	movs	r0, r2
 8005c4c:	f7fa fa6e 	bl	800012c <__udivsi3>
 8005c50:	0003      	movs	r3, r0
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c56:	e04b      	b.n	8005cf0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c58:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <UART_SetConfig+0x65c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2210      	movs	r2, #16
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d00e      	beq.n	8005c80 <UART_SetConfig+0x5a0>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	085b      	lsrs	r3, r3, #1
 8005c68:	4a39      	ldr	r2, [pc, #228]	; (8005d50 <UART_SetConfig+0x670>)
 8005c6a:	189a      	adds	r2, r3, r2
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	0019      	movs	r1, r3
 8005c72:	0010      	movs	r0, r2
 8005c74:	f7fa fa5a 	bl	800012c <__udivsi3>
 8005c78:	0003      	movs	r3, r0
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8005c7e:	e037      	b.n	8005cf0 <UART_SetConfig+0x610>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	4a33      	ldr	r2, [pc, #204]	; (8005d54 <UART_SetConfig+0x674>)
 8005c88:	189a      	adds	r2, r3, r2
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	0019      	movs	r1, r3
 8005c90:	0010      	movs	r0, r2
 8005c92:	f7fa fa4b 	bl	800012c <__udivsi3>
 8005c96:	0003      	movs	r3, r0
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c9c:	e028      	b.n	8005cf0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005c9e:	f7fe fb53 	bl	8004348 <HAL_RCC_GetSysClockFreq>
 8005ca2:	0002      	movs	r2, r0
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	18d2      	adds	r2, r2, r3
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	0010      	movs	r0, r2
 8005cb4:	f7fa fa3a 	bl	800012c <__udivsi3>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cbe:	e017      	b.n	8005cf0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	2280      	movs	r2, #128	; 0x80
 8005cc8:	0212      	lsls	r2, r2, #8
 8005cca:	189a      	adds	r2, r3, r2
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	0010      	movs	r0, r2
 8005cd4:	f7fa fa2a 	bl	800012c <__udivsi3>
 8005cd8:	0003      	movs	r3, r0
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cde:	e007      	b.n	8005cf0 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005ce0:	2313      	movs	r3, #19
 8005ce2:	2218      	movs	r2, #24
 8005ce4:	4694      	mov	ip, r2
 8005ce6:	44bc      	add	ip, r7
 8005ce8:	4463      	add	r3, ip
 8005cea:	2201      	movs	r2, #1
 8005cec:	701a      	strb	r2, [r3, #0]
        break;
 8005cee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	d908      	bls.n	8005d08 <UART_SetConfig+0x628>
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <UART_SetConfig+0x668>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d804      	bhi.n	8005d08 <UART_SetConfig+0x628>
    {
      huart->Instance->BRR = usartdiv;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d04:	60da      	str	r2, [r3, #12]
 8005d06:	e006      	b.n	8005d16 <UART_SetConfig+0x636>
    }
    else
    {
      ret = HAL_ERROR;
 8005d08:	2313      	movs	r3, #19
 8005d0a:	2218      	movs	r2, #24
 8005d0c:	4694      	mov	ip, r2
 8005d0e:	44bc      	add	ip, r7
 8005d10:	4463      	add	r3, ip
 8005d12:	2201      	movs	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005d22:	2313      	movs	r3, #19
 8005d24:	2218      	movs	r2, #24
 8005d26:	4694      	mov	ip, r2
 8005d28:	44bc      	add	ip, r7
 8005d2a:	4463      	add	r3, ip
 8005d2c:	781b      	ldrb	r3, [r3, #0]
}
 8005d2e:	0018      	movs	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b00e      	add	sp, #56	; 0x38
 8005d34:	bdb0      	pop	{r4, r5, r7, pc}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	08009770 	.word	0x08009770
 8005d3c:	40021000 	.word	0x40021000
 8005d40:	007a1200 	.word	0x007a1200
 8005d44:	01e84800 	.word	0x01e84800
 8005d48:	0000ffff 	.word	0x0000ffff
 8005d4c:	08009794 	.word	0x08009794
 8005d50:	003d0900 	.word	0x003d0900
 8005d54:	00f42400 	.word	0x00f42400

08005d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	2201      	movs	r2, #1
 8005d66:	4013      	ands	r3, r2
 8005d68:	d00a      	beq.n	8005d80 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	6852      	ldr	r2, [r2, #4]
 8005d74:	4945      	ldr	r1, [pc, #276]	; (8005e8c <UART_AdvFeatureConfig+0x134>)
 8005d76:	4011      	ands	r1, r2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2202      	movs	r2, #2
 8005d86:	4013      	ands	r3, r2
 8005d88:	d00a      	beq.n	8005da0 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	6852      	ldr	r2, [r2, #4]
 8005d94:	493e      	ldr	r1, [pc, #248]	; (8005e90 <UART_AdvFeatureConfig+0x138>)
 8005d96:	4011      	ands	r1, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	2204      	movs	r2, #4
 8005da6:	4013      	ands	r3, r2
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6812      	ldr	r2, [r2, #0]
 8005db2:	6852      	ldr	r2, [r2, #4]
 8005db4:	4937      	ldr	r1, [pc, #220]	; (8005e94 <UART_AdvFeatureConfig+0x13c>)
 8005db6:	4011      	ands	r1, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d00a      	beq.n	8005de0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6812      	ldr	r2, [r2, #0]
 8005dd2:	6852      	ldr	r2, [r2, #4]
 8005dd4:	4930      	ldr	r1, [pc, #192]	; (8005e98 <UART_AdvFeatureConfig+0x140>)
 8005dd6:	4011      	ands	r1, r2
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2210      	movs	r2, #16
 8005de6:	4013      	ands	r3, r2
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6812      	ldr	r2, [r2, #0]
 8005df2:	6892      	ldr	r2, [r2, #8]
 8005df4:	4929      	ldr	r1, [pc, #164]	; (8005e9c <UART_AdvFeatureConfig+0x144>)
 8005df6:	4011      	ands	r1, r2
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	2220      	movs	r2, #32
 8005e06:	4013      	ands	r3, r2
 8005e08:	d00a      	beq.n	8005e20 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	6892      	ldr	r2, [r2, #8]
 8005e14:	4922      	ldr	r1, [pc, #136]	; (8005ea0 <UART_AdvFeatureConfig+0x148>)
 8005e16:	4011      	ands	r1, r2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2240      	movs	r2, #64	; 0x40
 8005e26:	4013      	ands	r3, r2
 8005e28:	d01b      	beq.n	8005e62 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	6852      	ldr	r2, [r2, #4]
 8005e34:	491b      	ldr	r1, [pc, #108]	; (8005ea4 <UART_AdvFeatureConfig+0x14c>)
 8005e36:	4011      	ands	r1, r2
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	035b      	lsls	r3, r3, #13
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d10a      	bne.n	8005e62 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	6852      	ldr	r2, [r2, #4]
 8005e56:	4914      	ldr	r1, [pc, #80]	; (8005ea8 <UART_AdvFeatureConfig+0x150>)
 8005e58:	4011      	ands	r1, r2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	2280      	movs	r2, #128	; 0x80
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	6852      	ldr	r2, [r2, #4]
 8005e76:	490d      	ldr	r1, [pc, #52]	; (8005eac <UART_AdvFeatureConfig+0x154>)
 8005e78:	4011      	ands	r1, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
  }
}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b002      	add	sp, #8
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	fffdffff 	.word	0xfffdffff
 8005e90:	fffeffff 	.word	0xfffeffff
 8005e94:	fffbffff 	.word	0xfffbffff
 8005e98:	ffff7fff 	.word	0xffff7fff
 8005e9c:	ffffefff 	.word	0xffffefff
 8005ea0:	ffffdfff 	.word	0xffffdfff
 8005ea4:	ffefffff 	.word	0xffefffff
 8005ea8:	ff9fffff 	.word	0xff9fffff
 8005eac:	fff7ffff 	.word	0xfff7ffff

08005eb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ebe:	f7fd f859 	bl	8002f74 <HAL_GetTick>
 8005ec2:	0003      	movs	r3, r0
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2208      	movs	r2, #8
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d10d      	bne.n	8005ef0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	0399      	lsls	r1, r3, #14
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	4b16      	ldr	r3, [pc, #88]	; (8005f38 <UART_CheckIdleState+0x88>)
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	0013      	movs	r3, r2
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f000 f82a 	bl	8005f3c <UART_WaitOnFlagUntilTimeout>
 8005ee8:	1e03      	subs	r3, r0, #0
 8005eea:	d001      	beq.n	8005ef0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e01f      	b.n	8005f30 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2204      	movs	r2, #4
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d10d      	bne.n	8005f1a <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	03d9      	lsls	r1, r3, #15
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <UART_CheckIdleState+0x88>)
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	0013      	movs	r3, r2
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f000 f815 	bl	8005f3c <UART_WaitOnFlagUntilTimeout>
 8005f12:	1e03      	subs	r3, r0, #0
 8005f14:	d001      	beq.n	8005f1a <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e00a      	b.n	8005f30 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2270      	movs	r2, #112	; 0x70
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	0018      	movs	r0, r3
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b004      	add	sp, #16
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	01ffffff 	.word	0x01ffffff

08005f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	1dfb      	adds	r3, r7, #7
 8005f4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4c:	e029      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	3301      	adds	r3, #1
 8005f52:	d026      	beq.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f54:	f7fd f80e 	bl	8002f74 <HAL_GetTick>
 8005f58:	0002      	movs	r2, r0
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	1ad2      	subs	r2, r2, r3
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d802      	bhi.n	8005f6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d11b      	bne.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	6812      	ldr	r2, [r2, #0]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	4915      	ldr	r1, [pc, #84]	; (8005fcc <UART_WaitOnFlagUntilTimeout+0x90>)
 8005f76:	400a      	ands	r2, r1
 8005f78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	6812      	ldr	r2, [r2, #0]
 8005f82:	6892      	ldr	r2, [r2, #8]
 8005f84:	2101      	movs	r1, #1
 8005f86:	438a      	bics	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2270      	movs	r2, #112	; 0x70
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e00f      	b.n	8005fc2 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	401a      	ands	r2, r3
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	425a      	negs	r2, r3
 8005fb2:	4153      	adcs	r3, r2
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	001a      	movs	r2, r3
 8005fb8:	1dfb      	adds	r3, r7, #7
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d0c6      	beq.n	8005f4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	b004      	add	sp, #16
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	fffffe5f 	.word	0xfffffe5f

08005fd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	6812      	ldr	r2, [r2, #0]
 8005fe2:	21c0      	movs	r1, #192	; 0xc0
 8005fe4:	438a      	bics	r2, r1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	b002      	add	sp, #8
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	490a      	ldr	r1, [pc, #40]	; (8006034 <UART_EndRxTransfer+0x3c>)
 800600c:	400a      	ands	r2, r1
 800600e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	6892      	ldr	r2, [r2, #8]
 800601a:	2101      	movs	r1, #1
 800601c:	438a      	bics	r2, r1
 800601e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800602c:	46c0      	nop			; (mov r8, r8)
 800602e:	46bd      	mov	sp, r7
 8006030:	b002      	add	sp, #8
 8006032:	bd80      	pop	{r7, pc}
 8006034:	fffffedf 	.word	0xfffffedf

08006038 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2220      	movs	r2, #32
 800604e:	4013      	ands	r3, r2
 8006050:	d11e      	bne.n	8006090 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	225a      	movs	r2, #90	; 0x5a
 8006056:	2100      	movs	r1, #0
 8006058:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	490e      	ldr	r1, [pc, #56]	; (80060a0 <UART_DMAReceiveCplt+0x68>)
 8006066:	400a      	ands	r2, r1
 8006068:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	6812      	ldr	r2, [r2, #0]
 8006072:	6892      	ldr	r2, [r2, #8]
 8006074:	2101      	movs	r1, #1
 8006076:	438a      	bics	r2, r1
 8006078:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	6892      	ldr	r2, [r2, #8]
 8006084:	2140      	movs	r1, #64	; 0x40
 8006086:	438a      	bics	r2, r1
 8006088:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2220      	movs	r2, #32
 800608e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	0018      	movs	r0, r3
 8006094:	f000 fa30 	bl	80064f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006098:	46c0      	nop			; (mov r8, r8)
 800609a:	46bd      	mov	sp, r7
 800609c:	b004      	add	sp, #16
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	fffffeff 	.word	0xfffffeff

080060a4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f000 fa3d 	bl	8006534 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	46bd      	mov	sp, r7
 80060be:	b004      	add	sp, #16
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b086      	sub	sp, #24
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060da:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2280      	movs	r2, #128	; 0x80
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b80      	cmp	r3, #128	; 0x80
 80060e8:	d10a      	bne.n	8006100 <UART_DMAError+0x3e>
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b21      	cmp	r3, #33	; 0x21
 80060ee:	d107      	bne.n	8006100 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2252      	movs	r2, #82	; 0x52
 80060f4:	2100      	movs	r1, #0
 80060f6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	0018      	movs	r0, r3
 80060fc:	f7ff ff68 	bl	8005fd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2240      	movs	r2, #64	; 0x40
 8006108:	4013      	ands	r3, r2
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d10a      	bne.n	8006124 <UART_DMAError+0x62>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b22      	cmp	r3, #34	; 0x22
 8006112:	d107      	bne.n	8006124 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	225a      	movs	r2, #90	; 0x5a
 8006118:	2100      	movs	r1, #0
 800611a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	0018      	movs	r0, r3
 8006120:	f7ff ff6a 	bl	8005ff8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006128:	2210      	movs	r2, #16
 800612a:	431a      	orrs	r2, r3
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	0018      	movs	r0, r3
 8006134:	f7ff facc 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006138:	46c0      	nop			; (mov r8, r8)
 800613a:	46bd      	mov	sp, r7
 800613c:	b006      	add	sp, #24
 800613e:	bd80      	pop	{r7, pc}

08006140 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	225a      	movs	r2, #90	; 0x5a
 8006152:	2100      	movs	r1, #0
 8006154:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2252      	movs	r2, #82	; 0x52
 800615a:	2100      	movs	r1, #0
 800615c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	0018      	movs	r0, r3
 8006162:	f7ff fab5 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	46bd      	mov	sp, r7
 800616a:	b004      	add	sp, #16
 800616c:	bd80      	pop	{r7, pc}

0800616e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	2140      	movs	r1, #64	; 0x40
 8006182:	438a      	bics	r2, r1
 8006184:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	0018      	movs	r0, r3
 8006196:	f7ff fa93 	bl	80056c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	46bd      	mov	sp, r7
 800619e:	b002      	add	sp, #8
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b002      	add	sp, #8
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <gps_open>:
#include "gps.h"

static void gps_parse_nmea(GPS_t *gpsHandle, uint8_t *data, uint16_t size);

GPS_t *gps_open(GPS_data_type_e dataType)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	0002      	movs	r2, r0
 80061ba:	1dfb      	adds	r3, r7, #7
 80061bc:	701a      	strb	r2, [r3, #0]
	GPS_t *gpsHandle = calloc(1, sizeof(GPS_t));
 80061be:	2101      	movs	r1, #1
 80061c0:	2001      	movs	r0, #1
 80061c2:	f000 ffad 	bl	8007120 <calloc>
 80061c6:	0003      	movs	r3, r0
 80061c8:	60fb      	str	r3, [r7, #12]
	if (gpsHandle != NULL)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <gps_open+0x24>
	{
		gpsHandle->dataType = GPS_DATA_TYPE_NMEA;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	701a      	strb	r2, [r3, #0]
	}

	return gpsHandle;
 80061d6:	68fb      	ldr	r3, [r7, #12]
}
 80061d8:	0018      	movs	r0, r3
 80061da:	46bd      	mov	sp, r7
 80061dc:	b004      	add	sp, #16
 80061de:	bd80      	pop	{r7, pc}

080061e0 <gps_set_input_buffer>:

void gps_set_input_buffer(GPS_t *gpsHandle, uint8_t *data, uint16_t size)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	1dbb      	adds	r3, r7, #6
 80061ec:	801a      	strh	r2, [r3, #0]
	switch (gpsHandle->dataType)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d107      	bne.n	8006206 <gps_set_input_buffer+0x26>
	{
	case GPS_DATA_TYPE_NMEA:
		gps_parse_nmea(gpsHandle, data, size);
 80061f6:	1dbb      	adds	r3, r7, #6
 80061f8:	881a      	ldrh	r2, [r3, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	0018      	movs	r0, r3
 8006200:	f000 f806 	bl	8006210 <gps_parse_nmea>
		break;
 8006204:	e000      	b.n	8006208 <gps_set_input_buffer+0x28>
	case GPS_DATA_TYPE_UBX:
		break;
 8006206:	46c0      	nop			; (mov r8, r8)
	}
}
 8006208:	46c0      	nop			; (mov r8, r8)
 800620a:	46bd      	mov	sp, r7
 800620c:	b004      	add	sp, #16
 800620e:	bd80      	pop	{r7, pc}

08006210 <gps_parse_nmea>:

extern UART_HandleTypeDef huart1;
static void gps_parse_nmea(GPS_t *gpsHandle, uint8_t *data, uint16_t size)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b097      	sub	sp, #92	; 0x5c
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	1dbb      	adds	r3, r7, #6
 800621c:	801a      	strh	r2, [r3, #0]

	char *dollar_pointer = strstr((char *)data, "$");
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2124      	movs	r1, #36	; 0x24
 8006222:	0018      	movs	r0, r3
 8006224:	f001 fa0e 	bl	8007644 <strchr>
 8006228:	0003      	movs	r3, r0
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (dollar_pointer == NULL)
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	2b00      	cmp	r3, #0
 8006230:	d100      	bne.n	8006234 <gps_parse_nmea+0x24>
 8006232:	e152      	b.n	80064da <gps_parse_nmea+0x2ca>
	{
		return;
	}
	char *star_pointer = strstr((char *)data, "*");
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	212a      	movs	r1, #42	; 0x2a
 8006238:	0018      	movs	r0, r3
 800623a:	f001 fa03 	bl	8007644 <strchr>
 800623e:	0003      	movs	r3, r0
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
	if (star_pointer == NULL)
 8006242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006244:	2b00      	cmp	r3, #0
 8006246:	d100      	bne.n	800624a <gps_parse_nmea+0x3a>
 8006248:	e149      	b.n	80064de <gps_parse_nmea+0x2ce>
	{
		return;
	}

	// Parse
	char *GPGGA = strstr((char *)data, "GPGGA");
 800624a:	4aa7      	ldr	r2, [pc, #668]	; (80064e8 <gps_parse_nmea+0x2d8>)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	0011      	movs	r1, r2
 8006250:	0018      	movs	r0, r3
 8006252:	f001 fa05 	bl	8007660 <strstr>
 8006256:	0003      	movs	r3, r0
 8006258:	647b      	str	r3, [r7, #68]	; 0x44
	if (GPGGA != NULL)
 800625a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800625c:	2b00      	cmp	r3, #0
 800625e:	d100      	bne.n	8006262 <gps_parse_nmea+0x52>
 8006260:	e13e      	b.n	80064e0 <gps_parse_nmea+0x2d0>
	{
		   const char s[2] = ",";
 8006262:	2338      	movs	r3, #56	; 0x38
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	222c      	movs	r2, #44	; 0x2c
 8006268:	801a      	strh	r2, [r3, #0]

		   GPS_GPGGA gpgga;
		   uint8_t degreeLon;
		   uint8_t degreeLat;
		   float minute;
		   token = strtok(GPGGA, s);
 800626a:	2338      	movs	r3, #56	; 0x38
 800626c:	18fa      	adds	r2, r7, r3
 800626e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006270:	0011      	movs	r1, r2
 8006272:	0018      	movs	r0, r3
 8006274:	f002 f87c 	bl	8008370 <strtok>
 8006278:	0003      	movs	r3, r0
 800627a:	657b      	str	r3, [r7, #84]	; 0x54
		   uint8_t tokenIndex = 0;
 800627c:	2353      	movs	r3, #83	; 0x53
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
		   while( token != NULL )
 8006284:	e124      	b.n	80064d0 <gps_parse_nmea+0x2c0>
		   {
			   switch(tokenIndex)
 8006286:	2353      	movs	r3, #83	; 0x53
 8006288:	18fb      	adds	r3, r7, r3
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d900      	bls.n	8006292 <gps_parse_nmea+0x82>
 8006290:	e104      	b.n	800649c <gps_parse_nmea+0x28c>
 8006292:	009a      	lsls	r2, r3, #2
 8006294:	4b95      	ldr	r3, [pc, #596]	; (80064ec <gps_parse_nmea+0x2dc>)
 8006296:	18d3      	adds	r3, r2, r3
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	469f      	mov	pc, r3
			   case 0:
				   //"GPGGA"
				   break;
			   case 1:
				   //"fixTakenAt"
				   token[6] = 0;
 800629c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800629e:	3306      	adds	r3, #6
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
				   gpgga.fixTakenAt.Second = strtol(token+4, (char **)NULL, 10);
 80062a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062a6:	3304      	adds	r3, #4
 80062a8:	220a      	movs	r2, #10
 80062aa:	2100      	movs	r1, #0
 80062ac:	0018      	movs	r0, r3
 80062ae:	f002 f93d 	bl	800852c <strtol>
 80062b2:	0003      	movs	r3, r0
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	2314      	movs	r3, #20
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	709a      	strb	r2, [r3, #2]
				   token[4] = 0;
 80062bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062be:	3304      	adds	r3, #4
 80062c0:	2200      	movs	r2, #0
 80062c2:	701a      	strb	r2, [r3, #0]
				   gpgga.fixTakenAt.Minute = strtol(token+2, (char **)NULL, 10);
 80062c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c6:	3302      	adds	r3, #2
 80062c8:	220a      	movs	r2, #10
 80062ca:	2100      	movs	r1, #0
 80062cc:	0018      	movs	r0, r3
 80062ce:	f002 f92d 	bl	800852c <strtol>
 80062d2:	0003      	movs	r3, r0
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	2314      	movs	r3, #20
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	705a      	strb	r2, [r3, #1]
				   token[2] = 0;
 80062dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062de:	3302      	adds	r3, #2
 80062e0:	2200      	movs	r2, #0
 80062e2:	701a      	strb	r2, [r3, #0]
				   gpgga.fixTakenAt.Hour = strtol(token, (char **)NULL, 10);
 80062e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062e6:	220a      	movs	r2, #10
 80062e8:	2100      	movs	r1, #0
 80062ea:	0018      	movs	r0, r3
 80062ec:	f002 f91e 	bl	800852c <strtol>
 80062f0:	0003      	movs	r3, r0
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	2314      	movs	r3, #20
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	701a      	strb	r2, [r3, #0]
				   break;
 80062fa:	e0cf      	b.n	800649c <gps_parse_nmea+0x28c>
			   case 2:
				   //Latitude 4807.038
				   degreeLat = strtol(token, (char **)NULL, 10)/100;
 80062fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062fe:	220a      	movs	r2, #10
 8006300:	2100      	movs	r1, #0
 8006302:	0018      	movs	r0, r3
 8006304:	f002 f912 	bl	800852c <strtol>
 8006308:	0003      	movs	r3, r0
 800630a:	2164      	movs	r1, #100	; 0x64
 800630c:	0018      	movs	r0, r3
 800630e:	f7f9 ff97 	bl	8000240 <__divsi3>
 8006312:	0003      	movs	r3, r0
 8006314:	001a      	movs	r2, r3
 8006316:	2343      	movs	r3, #67	; 0x43
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	701a      	strb	r2, [r3, #0]
				   minute = strtof (token, NULL)-(degreeLat*100);
 800631c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800631e:	2100      	movs	r1, #0
 8006320:	0018      	movs	r0, r3
 8006322:	f001 ffd5 	bl	80082d0 <strtof>
 8006326:	1c04      	adds	r4, r0, #0
 8006328:	2343      	movs	r3, #67	; 0x43
 800632a:	18fb      	adds	r3, r7, r3
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2264      	movs	r2, #100	; 0x64
 8006330:	4353      	muls	r3, r2
 8006332:	0018      	movs	r0, r3
 8006334:	f7fa ff1c 	bl	8001170 <__aeabi_i2f>
 8006338:	1c03      	adds	r3, r0, #0
 800633a:	1c19      	adds	r1, r3, #0
 800633c:	1c20      	adds	r0, r4, #0
 800633e:	f7fa fd63 	bl	8000e08 <__aeabi_fsub>
 8006342:	1c03      	adds	r3, r0, #0
 8006344:	63fb      	str	r3, [r7, #60]	; 0x3c
				   gpgga.latitude = minute/60 + degreeLat;
 8006346:	496a      	ldr	r1, [pc, #424]	; (80064f0 <gps_parse_nmea+0x2e0>)
 8006348:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800634a:	f7fa fb6d 	bl	8000a28 <__aeabi_fdiv>
 800634e:	1c03      	adds	r3, r0, #0
 8006350:	1c1c      	adds	r4, r3, #0
 8006352:	2343      	movs	r3, #67	; 0x43
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	0018      	movs	r0, r3
 800635a:	f7fa ff09 	bl	8001170 <__aeabi_i2f>
 800635e:	1c03      	adds	r3, r0, #0
 8006360:	1c19      	adds	r1, r3, #0
 8006362:	1c20      	adds	r0, r4, #0
 8006364:	f7fa f9ce 	bl	8000704 <__aeabi_fadd>
 8006368:	1c03      	adds	r3, r0, #0
 800636a:	1c1a      	adds	r2, r3, #0
 800636c:	2314      	movs	r3, #20
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	60da      	str	r2, [r3, #12]
				   break;
 8006372:	e093      	b.n	800649c <gps_parse_nmea+0x28c>
			   case 3:
				   //Latitude NS
				   if (token[0] == 'S')
 8006374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b53      	cmp	r3, #83	; 0x53
 800637a:	d000      	beq.n	800637e <gps_parse_nmea+0x16e>
 800637c:	e08b      	b.n	8006496 <gps_parse_nmea+0x286>
				   {
					   gpgga.latitude *= -1;
 800637e:	2314      	movs	r3, #20
 8006380:	18fb      	adds	r3, r7, r3
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2280      	movs	r2, #128	; 0x80
 8006386:	0612      	lsls	r2, r2, #24
 8006388:	405a      	eors	r2, r3
 800638a:	2314      	movs	r3, #20
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	60da      	str	r2, [r3, #12]
				   }
				   break;
 8006390:	e081      	b.n	8006496 <gps_parse_nmea+0x286>
			   case 4:
				   //Longitude 4807.038
				   degreeLon = strtol(token, (char **)NULL, 10)/100;
 8006392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006394:	220a      	movs	r2, #10
 8006396:	2100      	movs	r1, #0
 8006398:	0018      	movs	r0, r3
 800639a:	f002 f8c7 	bl	800852c <strtol>
 800639e:	0003      	movs	r3, r0
 80063a0:	2164      	movs	r1, #100	; 0x64
 80063a2:	0018      	movs	r0, r3
 80063a4:	f7f9 ff4c 	bl	8000240 <__divsi3>
 80063a8:	0003      	movs	r3, r0
 80063aa:	001a      	movs	r2, r3
 80063ac:	233b      	movs	r3, #59	; 0x3b
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	701a      	strb	r2, [r3, #0]
				   minute = strtof (token, NULL)-(degreeLon*100);
 80063b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b4:	2100      	movs	r1, #0
 80063b6:	0018      	movs	r0, r3
 80063b8:	f001 ff8a 	bl	80082d0 <strtof>
 80063bc:	1c04      	adds	r4, r0, #0
 80063be:	233b      	movs	r3, #59	; 0x3b
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2264      	movs	r2, #100	; 0x64
 80063c6:	4353      	muls	r3, r2
 80063c8:	0018      	movs	r0, r3
 80063ca:	f7fa fed1 	bl	8001170 <__aeabi_i2f>
 80063ce:	1c03      	adds	r3, r0, #0
 80063d0:	1c19      	adds	r1, r3, #0
 80063d2:	1c20      	adds	r0, r4, #0
 80063d4:	f7fa fd18 	bl	8000e08 <__aeabi_fsub>
 80063d8:	1c03      	adds	r3, r0, #0
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
				   gpgga.longitude = minute/60 + degreeLon;
 80063dc:	4944      	ldr	r1, [pc, #272]	; (80064f0 <gps_parse_nmea+0x2e0>)
 80063de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063e0:	f7fa fb22 	bl	8000a28 <__aeabi_fdiv>
 80063e4:	1c03      	adds	r3, r0, #0
 80063e6:	1c1c      	adds	r4, r3, #0
 80063e8:	233b      	movs	r3, #59	; 0x3b
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f7fa febe 	bl	8001170 <__aeabi_i2f>
 80063f4:	1c03      	adds	r3, r0, #0
 80063f6:	1c19      	adds	r1, r3, #0
 80063f8:	1c20      	adds	r0, r4, #0
 80063fa:	f7fa f983 	bl	8000704 <__aeabi_fadd>
 80063fe:	1c03      	adds	r3, r0, #0
 8006400:	1c1a      	adds	r2, r3, #0
 8006402:	2314      	movs	r3, #20
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	611a      	str	r2, [r3, #16]
				   break;
 8006408:	e048      	b.n	800649c <gps_parse_nmea+0x28c>
			   case 5:
				   //Longitude EW
				   if (token[0] == 'W')
 800640a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b57      	cmp	r3, #87	; 0x57
 8006410:	d143      	bne.n	800649a <gps_parse_nmea+0x28a>
				   {
					   gpgga.longitude *= -1;
 8006412:	2314      	movs	r3, #20
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2280      	movs	r2, #128	; 0x80
 800641a:	0612      	lsls	r2, r2, #24
 800641c:	405a      	eors	r2, r3
 800641e:	2314      	movs	r3, #20
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	611a      	str	r2, [r3, #16]
				   }
				   break;
 8006424:	e039      	b.n	800649a <gps_parse_nmea+0x28a>
			   case 6:
				   //FixQuality
				   gpgga.fixQuality = strtol(token, (char **)NULL, 10);
 8006426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006428:	220a      	movs	r2, #10
 800642a:	2100      	movs	r1, #0
 800642c:	0018      	movs	r0, r3
 800642e:	f002 f87d 	bl	800852c <strtol>
 8006432:	0003      	movs	r3, r0
 8006434:	b2da      	uxtb	r2, r3
 8006436:	2314      	movs	r3, #20
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	751a      	strb	r2, [r3, #20]
				   break;
 800643c:	e02e      	b.n	800649c <gps_parse_nmea+0x28c>
			   case 7:
				   //Number of satellites
				   gpgga.numSatellites = strtol(token, (char **)NULL, 10);
 800643e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006440:	220a      	movs	r2, #10
 8006442:	2100      	movs	r1, #0
 8006444:	0018      	movs	r0, r3
 8006446:	f002 f871 	bl	800852c <strtol>
 800644a:	0003      	movs	r3, r0
 800644c:	b2da      	uxtb	r2, r3
 800644e:	2314      	movs	r3, #20
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	755a      	strb	r2, [r3, #21]
				   break;
 8006454:	e022      	b.n	800649c <gps_parse_nmea+0x28c>
			   case 8:
				   //horizontalDilution
				   gpgga.horizontalDilution = strtof (token, NULL);
 8006456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006458:	2100      	movs	r1, #0
 800645a:	0018      	movs	r0, r3
 800645c:	f001 ff38 	bl	80082d0 <strtof>
 8006460:	1c02      	adds	r2, r0, #0
 8006462:	2314      	movs	r3, #20
 8006464:	18fb      	adds	r3, r7, r3
 8006466:	619a      	str	r2, [r3, #24]
				   break;
 8006468:	e018      	b.n	800649c <gps_parse_nmea+0x28c>
			   case 9:
				   //Altitude
				   gpgga.altitude = strtof (token, NULL);
 800646a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800646c:	2100      	movs	r1, #0
 800646e:	0018      	movs	r0, r3
 8006470:	f001 ff2e 	bl	80082d0 <strtof>
 8006474:	1c02      	adds	r2, r0, #0
 8006476:	2314      	movs	r3, #20
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	61da      	str	r2, [r3, #28]
				   break;
 800647c:	e00e      	b.n	800649c <gps_parse_nmea+0x28c>
			   case 10:
				   //Altitude quantity
				   break;
			   case 11:
				   // Height of geoid (mean sea level) above WGS84 ellipsoid
				   gpgga.heightOfGeoid = strtof (token, NULL);
 800647e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006480:	2100      	movs	r1, #0
 8006482:	0018      	movs	r0, r3
 8006484:	f001 ff24 	bl	80082d0 <strtof>
 8006488:	1c02      	adds	r2, r0, #0
 800648a:	2314      	movs	r3, #20
 800648c:	18fb      	adds	r3, r7, r3
 800648e:	621a      	str	r2, [r3, #32]
				   break;
 8006490:	e004      	b.n	800649c <gps_parse_nmea+0x28c>
			   case 12:
				   // Height of geoid quantity
				   break;
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	e002      	b.n	800649c <gps_parse_nmea+0x28c>
				   break;
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	e000      	b.n	800649c <gps_parse_nmea+0x28c>
				   break;
 800649a:	46c0      	nop			; (mov r8, r8)
			   }

			   tokenIndex++;
 800649c:	2353      	movs	r3, #83	; 0x53
 800649e:	18fb      	adds	r3, r7, r3
 80064a0:	781a      	ldrb	r2, [r3, #0]
 80064a2:	2353      	movs	r3, #83	; 0x53
 80064a4:	18fb      	adds	r3, r7, r3
 80064a6:	3201      	adds	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]
			   HAL_UART_Transmit(&huart1, (uint8_t *)token, strlen(token), 100);
 80064aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ac:	0018      	movs	r0, r3
 80064ae:	f7f9 fe2b 	bl	8000108 <strlen>
 80064b2:	0003      	movs	r3, r0
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064b8:	480e      	ldr	r0, [pc, #56]	; (80064f4 <gps_parse_nmea+0x2e4>)
 80064ba:	2364      	movs	r3, #100	; 0x64
 80064bc:	f7fe fe30 	bl	8005120 <HAL_UART_Transmit>
			   token = strtok(NULL, s);
 80064c0:	2338      	movs	r3, #56	; 0x38
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	0019      	movs	r1, r3
 80064c6:	2000      	movs	r0, #0
 80064c8:	f001 ff52 	bl	8008370 <strtok>
 80064cc:	0003      	movs	r3, r0
 80064ce:	657b      	str	r3, [r7, #84]	; 0x54
		   while( token != NULL )
 80064d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d000      	beq.n	80064d8 <gps_parse_nmea+0x2c8>
 80064d6:	e6d6      	b.n	8006286 <gps_parse_nmea+0x76>
 80064d8:	e002      	b.n	80064e0 <gps_parse_nmea+0x2d0>
		return;
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	e000      	b.n	80064e0 <gps_parse_nmea+0x2d0>
		return;
 80064de:	46c0      	nop			; (mov r8, r8)
		   }
	}
}
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b017      	add	sp, #92	; 0x5c
 80064e4:	bd90      	pop	{r4, r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	08009668 	.word	0x08009668
 80064ec:	080097b8 	.word	0x080097b8
 80064f0:	42700000 	.word	0x42700000
 80064f4:	200008bc 	.word	0x200008bc

080064f8 <HAL_UART_RxCpltCallback>:
uint8_t dma_memcpy_flag;
uint16_t gps_buffer_pointer = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4b09      	ldr	r3, [pc, #36]	; (8006528 <HAL_UART_RxCpltCallback+0x30>)
 8006504:	429a      	cmp	r2, r3
 8006506:	d10b      	bne.n	8006520 <HAL_UART_RxCpltCallback+0x28>
	{
		memcpy(GPS_buffer, &DMA_buffer[UARTDMA_BUFFER_SIZE / 2], UARTDMA_BUFFER_SIZE / 2);
 8006508:	4908      	ldr	r1, [pc, #32]	; (800652c <HAL_UART_RxCpltCallback+0x34>)
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <HAL_UART_RxCpltCallback+0x38>)
 800650c:	2204      	movs	r2, #4
 800650e:	0018      	movs	r0, r3
 8006510:	f001 f864 	bl	80075dc <memcpy>
		memset(&DMA_buffer[UARTDMA_BUFFER_SIZE / 2], 0, UARTDMA_BUFFER_SIZE / 2);
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_UART_RxCpltCallback+0x34>)
 8006516:	2204      	movs	r2, #4
 8006518:	2100      	movs	r1, #0
 800651a:	0018      	movs	r0, r3
 800651c:	f001 f867 	bl	80075ee <memset>
	}
}
 8006520:	46c0      	nop			; (mov r8, r8)
 8006522:	46bd      	mov	sp, r7
 8006524:	b002      	add	sp, #8
 8006526:	bd80      	pop	{r7, pc}
 8006528:	200008bc 	.word	0x200008bc
 800652c:	2000072c 	.word	0x2000072c
 8006530:	200007a8 	.word	0x200007a8

08006534 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	4b09      	ldr	r3, [pc, #36]	; (8006564 <HAL_UART_RxHalfCpltCallback+0x30>)
 8006540:	429a      	cmp	r2, r3
 8006542:	d10b      	bne.n	800655c <HAL_UART_RxHalfCpltCallback+0x28>
	{
		memcpy(GPS_buffer, DMA_buffer, UARTDMA_BUFFER_SIZE / 2);
 8006544:	4908      	ldr	r1, [pc, #32]	; (8006568 <HAL_UART_RxHalfCpltCallback+0x34>)
 8006546:	4b09      	ldr	r3, [pc, #36]	; (800656c <HAL_UART_RxHalfCpltCallback+0x38>)
 8006548:	2204      	movs	r2, #4
 800654a:	0018      	movs	r0, r3
 800654c:	f001 f846 	bl	80075dc <memcpy>
		memset(DMA_buffer, 0, UARTDMA_BUFFER_SIZE / 2);
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <HAL_UART_RxHalfCpltCallback+0x34>)
 8006552:	2204      	movs	r2, #4
 8006554:	2100      	movs	r1, #0
 8006556:	0018      	movs	r0, r3
 8006558:	f001 f849 	bl	80075ee <memset>
	}
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	b002      	add	sp, #8
 8006562:	bd80      	pop	{r7, pc}
 8006564:	200008bc 	.word	0x200008bc
 8006568:	20000728 	.word	0x20000728
 800656c:	200007a8 	.word	0x200007a8

08006570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006574:	f7fc fca8 	bl	8002ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006578:	f000 f82a 	bl	80065d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800657c:	f000 fa46 	bl	8006a0c <MX_GPIO_Init>
  MX_DMA_Init();
 8006580:	f000 fa26 	bl	80069d0 <MX_DMA_Init>
  MX_RTC_Init();
 8006584:	f000 f8ae 	bl	80066e4 <MX_RTC_Init>
  MX_SPI1_Init();
 8006588:	f000 f954 	bl	8006834 <MX_SPI1_Init>
  MX_SPI2_Init();
 800658c:	f000 f98a 	bl	80068a4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8006590:	f000 f9ee 	bl	8006970 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8006594:	f000 f9bc 	bl	8006910 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  gpsHandle = gps_open(GPS_DATA_TYPE_NMEA);
 8006598:	2000      	movs	r0, #0
 800659a:	f7ff fe0a 	bl	80061b2 <gps_open>
 800659e:	0002      	movs	r2, r0
 80065a0:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <main+0x54>)
 80065a2:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80065a4:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <main+0x58>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a07      	ldr	r2, [pc, #28]	; (80065c8 <main+0x58>)
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	2110      	movs	r1, #16
 80065b0:	430a      	orrs	r2, r1
 80065b2:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_DMA(&huart1, DMA_buffer, UARTDMA_BUFFER_SIZE);
 80065b4:	4905      	ldr	r1, [pc, #20]	; (80065cc <main+0x5c>)
 80065b6:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <main+0x58>)
 80065b8:	2208      	movs	r2, #8
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7fe fe56 	bl	800526c <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80065c0:	e7fe      	b.n	80065c0 <main+0x50>
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	200006cc 	.word	0x200006cc
 80065c8:	200008bc 	.word	0x200008bc
 80065cc:	20000728 	.word	0x20000728

080065d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b09c      	sub	sp, #112	; 0x70
 80065d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80065d6:	2338      	movs	r3, #56	; 0x38
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	0018      	movs	r0, r3
 80065dc:	2338      	movs	r3, #56	; 0x38
 80065de:	001a      	movs	r2, r3
 80065e0:	2100      	movs	r1, #0
 80065e2:	f001 f804 	bl	80075ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065e6:	2324      	movs	r3, #36	; 0x24
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	0018      	movs	r0, r3
 80065ec:	2314      	movs	r3, #20
 80065ee:	001a      	movs	r2, r3
 80065f0:	2100      	movs	r1, #0
 80065f2:	f000 fffc 	bl	80075ee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065f6:	003b      	movs	r3, r7
 80065f8:	0018      	movs	r0, r3
 80065fa:	2324      	movs	r3, #36	; 0x24
 80065fc:	001a      	movs	r2, r3
 80065fe:	2100      	movs	r1, #0
 8006600:	f000 fff5 	bl	80075ee <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006604:	4b35      	ldr	r3, [pc, #212]	; (80066dc <SystemClock_Config+0x10c>)
 8006606:	4a35      	ldr	r2, [pc, #212]	; (80066dc <SystemClock_Config+0x10c>)
 8006608:	6812      	ldr	r2, [r2, #0]
 800660a:	4935      	ldr	r1, [pc, #212]	; (80066e0 <SystemClock_Config+0x110>)
 800660c:	400a      	ands	r2, r1
 800660e:	2180      	movs	r1, #128	; 0x80
 8006610:	0109      	lsls	r1, r1, #4
 8006612:	430a      	orrs	r2, r1
 8006614:	601a      	str	r2, [r3, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006616:	2338      	movs	r3, #56	; 0x38
 8006618:	18fb      	adds	r3, r7, r3
 800661a:	220a      	movs	r2, #10
 800661c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800661e:	2338      	movs	r3, #56	; 0x38
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	2201      	movs	r2, #1
 8006624:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006626:	2338      	movs	r3, #56	; 0x38
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	2210      	movs	r2, #16
 800662c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800662e:	2338      	movs	r3, #56	; 0x38
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	2201      	movs	r2, #1
 8006634:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006636:	2338      	movs	r3, #56	; 0x38
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	2202      	movs	r2, #2
 800663c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800663e:	2338      	movs	r3, #56	; 0x38
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	2200      	movs	r2, #0
 8006644:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8006646:	2338      	movs	r3, #56	; 0x38
 8006648:	18fb      	adds	r3, r7, r3
 800664a:	2280      	movs	r2, #128	; 0x80
 800664c:	0312      	lsls	r2, r2, #12
 800664e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8006650:	2338      	movs	r3, #56	; 0x38
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	2280      	movs	r2, #128	; 0x80
 8006656:	0412      	lsls	r2, r2, #16
 8006658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800665a:	2338      	movs	r3, #56	; 0x38
 800665c:	18fb      	adds	r3, r7, r3
 800665e:	0018      	movs	r0, r3
 8006660:	f7fd f97c 	bl	800395c <HAL_RCC_OscConfig>
 8006664:	1e03      	subs	r3, r0, #0
 8006666:	d001      	beq.n	800666c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8006668:	f000 fa8c 	bl	8006b84 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800666c:	2324      	movs	r3, #36	; 0x24
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	220f      	movs	r2, #15
 8006672:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006674:	2324      	movs	r3, #36	; 0x24
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	2203      	movs	r2, #3
 800667a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800667c:	2324      	movs	r3, #36	; 0x24
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	2200      	movs	r2, #0
 8006682:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006684:	2324      	movs	r3, #36	; 0x24
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	2200      	movs	r2, #0
 800668a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800668c:	2324      	movs	r3, #36	; 0x24
 800668e:	18fb      	adds	r3, r7, r3
 8006690:	2200      	movs	r2, #0
 8006692:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006694:	2324      	movs	r3, #36	; 0x24
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	2101      	movs	r1, #1
 800669a:	0018      	movs	r0, r3
 800669c:	f7fd fd2a 	bl	80040f4 <HAL_RCC_ClockConfig>
 80066a0:	1e03      	subs	r3, r0, #0
 80066a2:	d001      	beq.n	80066a8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80066a4:	f000 fa6e 	bl	8006b84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80066a8:	003b      	movs	r3, r7
 80066aa:	2223      	movs	r2, #35	; 0x23
 80066ac:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80066ae:	003b      	movs	r3, r7
 80066b0:	2200      	movs	r2, #0
 80066b2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80066b4:	003b      	movs	r3, r7
 80066b6:	2200      	movs	r2, #0
 80066b8:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80066ba:	003b      	movs	r3, r7
 80066bc:	2280      	movs	r2, #128	; 0x80
 80066be:	0292      	lsls	r2, r2, #10
 80066c0:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80066c2:	003b      	movs	r3, r7
 80066c4:	0018      	movs	r0, r3
 80066c6:	f7fd fee7 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 80066ca:	1e03      	subs	r3, r0, #0
 80066cc:	d001      	beq.n	80066d2 <SystemClock_Config+0x102>
  {
    Error_Handler();
 80066ce:	f000 fa59 	bl	8006b84 <Error_Handler>
  }
}
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	46bd      	mov	sp, r7
 80066d6:	b01c      	add	sp, #112	; 0x70
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	40007000 	.word	0x40007000
 80066e0:	ffffe7ff 	.word	0xffffe7ff

080066e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b090      	sub	sp, #64	; 0x40
 80066e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80066ea:	232c      	movs	r3, #44	; 0x2c
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	0018      	movs	r0, r3
 80066f0:	2314      	movs	r3, #20
 80066f2:	001a      	movs	r2, r3
 80066f4:	2100      	movs	r1, #0
 80066f6:	f000 ff7a 	bl	80075ee <memset>
  RTC_DateTypeDef sDate = {0};
 80066fa:	2328      	movs	r3, #40	; 0x28
 80066fc:	18fb      	adds	r3, r7, r3
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8006702:	003b      	movs	r3, r7
 8006704:	0018      	movs	r0, r3
 8006706:	2328      	movs	r3, #40	; 0x28
 8006708:	001a      	movs	r2, r3
 800670a:	2100      	movs	r1, #0
 800670c:	f000 ff6f 	bl	80075ee <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8006710:	4b45      	ldr	r3, [pc, #276]	; (8006828 <MX_RTC_Init+0x144>)
 8006712:	4a46      	ldr	r2, [pc, #280]	; (800682c <MX_RTC_Init+0x148>)
 8006714:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006716:	4b44      	ldr	r3, [pc, #272]	; (8006828 <MX_RTC_Init+0x144>)
 8006718:	2200      	movs	r2, #0
 800671a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 800671c:	4b42      	ldr	r3, [pc, #264]	; (8006828 <MX_RTC_Init+0x144>)
 800671e:	221f      	movs	r2, #31
 8006720:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 8006722:	4b41      	ldr	r3, [pc, #260]	; (8006828 <MX_RTC_Init+0x144>)
 8006724:	4a42      	ldr	r2, [pc, #264]	; (8006830 <MX_RTC_Init+0x14c>)
 8006726:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006728:	4b3f      	ldr	r3, [pc, #252]	; (8006828 <MX_RTC_Init+0x144>)
 800672a:	2200      	movs	r2, #0
 800672c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800672e:	4b3e      	ldr	r3, [pc, #248]	; (8006828 <MX_RTC_Init+0x144>)
 8006730:	2200      	movs	r2, #0
 8006732:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006734:	4b3c      	ldr	r3, [pc, #240]	; (8006828 <MX_RTC_Init+0x144>)
 8006736:	2200      	movs	r2, #0
 8006738:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800673a:	4b3b      	ldr	r3, [pc, #236]	; (8006828 <MX_RTC_Init+0x144>)
 800673c:	2200      	movs	r2, #0
 800673e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006740:	4b39      	ldr	r3, [pc, #228]	; (8006828 <MX_RTC_Init+0x144>)
 8006742:	0018      	movs	r0, r3
 8006744:	f7fd fffa 	bl	800473c <HAL_RTC_Init>
 8006748:	1e03      	subs	r3, r0, #0
 800674a:	d001      	beq.n	8006750 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 800674c:	f000 fa1a 	bl	8006b84 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /**Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8006750:	232c      	movs	r3, #44	; 0x2c
 8006752:	18fb      	adds	r3, r7, r3
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8006758:	232c      	movs	r3, #44	; 0x2c
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	2200      	movs	r2, #0
 800675e:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8006760:	232c      	movs	r3, #44	; 0x2c
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	2200      	movs	r2, #0
 8006766:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006768:	232c      	movs	r3, #44	; 0x2c
 800676a:	18fb      	adds	r3, r7, r3
 800676c:	2200      	movs	r2, #0
 800676e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006770:	232c      	movs	r3, #44	; 0x2c
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	2200      	movs	r2, #0
 8006776:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8006778:	232c      	movs	r3, #44	; 0x2c
 800677a:	18f9      	adds	r1, r7, r3
 800677c:	4b2a      	ldr	r3, [pc, #168]	; (8006828 <MX_RTC_Init+0x144>)
 800677e:	2200      	movs	r2, #0
 8006780:	0018      	movs	r0, r3
 8006782:	f7fe f879 	bl	8004878 <HAL_RTC_SetTime>
 8006786:	1e03      	subs	r3, r0, #0
 8006788:	d001      	beq.n	800678e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800678a:	f000 f9fb 	bl	8006b84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800678e:	2328      	movs	r3, #40	; 0x28
 8006790:	18fb      	adds	r3, r7, r3
 8006792:	2201      	movs	r2, #1
 8006794:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8006796:	2328      	movs	r3, #40	; 0x28
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	2201      	movs	r2, #1
 800679c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800679e:	2328      	movs	r3, #40	; 0x28
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	2201      	movs	r2, #1
 80067a4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80067a6:	2328      	movs	r3, #40	; 0x28
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	2200      	movs	r2, #0
 80067ac:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80067ae:	2328      	movs	r3, #40	; 0x28
 80067b0:	18f9      	adds	r1, r7, r3
 80067b2:	4b1d      	ldr	r3, [pc, #116]	; (8006828 <MX_RTC_Init+0x144>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	0018      	movs	r0, r3
 80067b8:	f7fe f922 	bl	8004a00 <HAL_RTC_SetDate>
 80067bc:	1e03      	subs	r3, r0, #0
 80067be:	d001      	beq.n	80067c4 <MX_RTC_Init+0xe0>
  {
    Error_Handler();
 80067c0:	f000 f9e0 	bl	8006b84 <Error_Handler>
  }
  /**Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 80067c4:	003b      	movs	r3, r7
 80067c6:	2200      	movs	r2, #0
 80067c8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80067ca:	003b      	movs	r3, r7
 80067cc:	2200      	movs	r2, #0
 80067ce:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80067d0:	003b      	movs	r3, r7
 80067d2:	2200      	movs	r2, #0
 80067d4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80067d6:	003b      	movs	r3, r7
 80067d8:	2200      	movs	r2, #0
 80067da:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80067dc:	003b      	movs	r3, r7
 80067de:	2200      	movs	r2, #0
 80067e0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80067e2:	003b      	movs	r3, r7
 80067e4:	2200      	movs	r2, #0
 80067e6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80067e8:	003b      	movs	r3, r7
 80067ea:	2200      	movs	r2, #0
 80067ec:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80067ee:	003b      	movs	r3, r7
 80067f0:	22f0      	movs	r2, #240	; 0xf0
 80067f2:	0512      	lsls	r2, r2, #20
 80067f4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80067f6:	003b      	movs	r3, r7
 80067f8:	2200      	movs	r2, #0
 80067fa:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80067fc:	003b      	movs	r3, r7
 80067fe:	2220      	movs	r2, #32
 8006800:	2101      	movs	r1, #1
 8006802:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8006804:	003b      	movs	r3, r7
 8006806:	2280      	movs	r2, #128	; 0x80
 8006808:	0052      	lsls	r2, r2, #1
 800680a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800680c:	0039      	movs	r1, r7
 800680e:	4b06      	ldr	r3, [pc, #24]	; (8006828 <MX_RTC_Init+0x144>)
 8006810:	2200      	movs	r2, #0
 8006812:	0018      	movs	r0, r3
 8006814:	f7fe f9a2 	bl	8004b5c <HAL_RTC_SetAlarm_IT>
 8006818:	1e03      	subs	r3, r0, #0
 800681a:	d001      	beq.n	8006820 <MX_RTC_Init+0x13c>
  {
    Error_Handler();
 800681c:	f000 f9b2 	bl	8006b84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006820:	46c0      	nop			; (mov r8, r8)
 8006822:	46bd      	mov	sp, r7
 8006824:	b010      	add	sp, #64	; 0x40
 8006826:	bd80      	pop	{r7, pc}
 8006828:	2000093c 	.word	0x2000093c
 800682c:	40002800 	.word	0x40002800
 8006830:	000003ff 	.word	0x000003ff

08006834 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006838:	4b18      	ldr	r3, [pc, #96]	; (800689c <MX_SPI1_Init+0x68>)
 800683a:	4a19      	ldr	r2, [pc, #100]	; (80068a0 <MX_SPI1_Init+0x6c>)
 800683c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800683e:	4b17      	ldr	r3, [pc, #92]	; (800689c <MX_SPI1_Init+0x68>)
 8006840:	2282      	movs	r2, #130	; 0x82
 8006842:	0052      	lsls	r2, r2, #1
 8006844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006846:	4b15      	ldr	r3, [pc, #84]	; (800689c <MX_SPI1_Init+0x68>)
 8006848:	2200      	movs	r2, #0
 800684a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800684c:	4b13      	ldr	r3, [pc, #76]	; (800689c <MX_SPI1_Init+0x68>)
 800684e:	2200      	movs	r2, #0
 8006850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <MX_SPI1_Init+0x68>)
 8006854:	2200      	movs	r2, #0
 8006856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006858:	4b10      	ldr	r3, [pc, #64]	; (800689c <MX_SPI1_Init+0x68>)
 800685a:	2200      	movs	r2, #0
 800685c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800685e:	4b0f      	ldr	r3, [pc, #60]	; (800689c <MX_SPI1_Init+0x68>)
 8006860:	2280      	movs	r2, #128	; 0x80
 8006862:	0092      	lsls	r2, r2, #2
 8006864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006866:	4b0d      	ldr	r3, [pc, #52]	; (800689c <MX_SPI1_Init+0x68>)
 8006868:	2220      	movs	r2, #32
 800686a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <MX_SPI1_Init+0x68>)
 800686e:	2200      	movs	r2, #0
 8006870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006872:	4b0a      	ldr	r3, [pc, #40]	; (800689c <MX_SPI1_Init+0x68>)
 8006874:	2200      	movs	r2, #0
 8006876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006878:	4b08      	ldr	r3, [pc, #32]	; (800689c <MX_SPI1_Init+0x68>)
 800687a:	2200      	movs	r2, #0
 800687c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800687e:	4b07      	ldr	r3, [pc, #28]	; (800689c <MX_SPI1_Init+0x68>)
 8006880:	2207      	movs	r2, #7
 8006882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <MX_SPI1_Init+0x68>)
 8006886:	0018      	movs	r0, r3
 8006888:	f7fe fb8e 	bl	8004fa8 <HAL_SPI_Init>
 800688c:	1e03      	subs	r3, r0, #0
 800688e:	d001      	beq.n	8006894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006890:	f000 f978 	bl	8006b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006894:	46c0      	nop			; (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	20000960 	.word	0x20000960
 80068a0:	40013000 	.word	0x40013000

080068a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80068a8:	4b17      	ldr	r3, [pc, #92]	; (8006908 <MX_SPI2_Init+0x64>)
 80068aa:	4a18      	ldr	r2, [pc, #96]	; (800690c <MX_SPI2_Init+0x68>)
 80068ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80068ae:	4b16      	ldr	r3, [pc, #88]	; (8006908 <MX_SPI2_Init+0x64>)
 80068b0:	2282      	movs	r2, #130	; 0x82
 80068b2:	0052      	lsls	r2, r2, #1
 80068b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80068b6:	4b14      	ldr	r3, [pc, #80]	; (8006908 <MX_SPI2_Init+0x64>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80068bc:	4b12      	ldr	r3, [pc, #72]	; (8006908 <MX_SPI2_Init+0x64>)
 80068be:	2200      	movs	r2, #0
 80068c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80068c2:	4b11      	ldr	r3, [pc, #68]	; (8006908 <MX_SPI2_Init+0x64>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80068c8:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <MX_SPI2_Init+0x64>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80068ce:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <MX_SPI2_Init+0x64>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068d4:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <MX_SPI2_Init+0x64>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80068da:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <MX_SPI2_Init+0x64>)
 80068dc:	2200      	movs	r2, #0
 80068de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80068e0:	4b09      	ldr	r3, [pc, #36]	; (8006908 <MX_SPI2_Init+0x64>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068e6:	4b08      	ldr	r3, [pc, #32]	; (8006908 <MX_SPI2_Init+0x64>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80068ec:	4b06      	ldr	r3, [pc, #24]	; (8006908 <MX_SPI2_Init+0x64>)
 80068ee:	2207      	movs	r2, #7
 80068f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80068f2:	4b05      	ldr	r3, [pc, #20]	; (8006908 <MX_SPI2_Init+0x64>)
 80068f4:	0018      	movs	r0, r3
 80068f6:	f7fe fb57 	bl	8004fa8 <HAL_SPI_Init>
 80068fa:	1e03      	subs	r3, r0, #0
 80068fc:	d001      	beq.n	8006902 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 80068fe:	f000 f941 	bl	8006b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	200006d0 	.word	0x200006d0
 800690c:	40003800 	.word	0x40003800

08006910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006914:	4b14      	ldr	r3, [pc, #80]	; (8006968 <MX_USART1_UART_Init+0x58>)
 8006916:	4a15      	ldr	r2, [pc, #84]	; (800696c <MX_USART1_UART_Init+0x5c>)
 8006918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <MX_USART1_UART_Init+0x58>)
 800691c:	2296      	movs	r2, #150	; 0x96
 800691e:	0192      	lsls	r2, r2, #6
 8006920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <MX_USART1_UART_Init+0x58>)
 8006924:	2200      	movs	r2, #0
 8006926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006928:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <MX_USART1_UART_Init+0x58>)
 800692a:	2200      	movs	r2, #0
 800692c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800692e:	4b0e      	ldr	r3, [pc, #56]	; (8006968 <MX_USART1_UART_Init+0x58>)
 8006930:	2200      	movs	r2, #0
 8006932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <MX_USART1_UART_Init+0x58>)
 8006936:	220c      	movs	r2, #12
 8006938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800693a:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <MX_USART1_UART_Init+0x58>)
 800693c:	2200      	movs	r2, #0
 800693e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006940:	4b09      	ldr	r3, [pc, #36]	; (8006968 <MX_USART1_UART_Init+0x58>)
 8006942:	2200      	movs	r2, #0
 8006944:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006946:	4b08      	ldr	r3, [pc, #32]	; (8006968 <MX_USART1_UART_Init+0x58>)
 8006948:	2200      	movs	r2, #0
 800694a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <MX_USART1_UART_Init+0x58>)
 800694e:	2200      	movs	r2, #0
 8006950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006952:	4b05      	ldr	r3, [pc, #20]	; (8006968 <MX_USART1_UART_Init+0x58>)
 8006954:	0018      	movs	r0, r3
 8006956:	f7fe fb8f 	bl	8005078 <HAL_UART_Init>
 800695a:	1e03      	subs	r3, r0, #0
 800695c:	d001      	beq.n	8006962 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800695e:	f000 f911 	bl	8006b84 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */


  /* USER CODE END USART1_Init 2 */

}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	200008bc 	.word	0x200008bc
 800696c:	40013800 	.word	0x40013800

08006970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006974:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 8006976:	4a15      	ldr	r2, [pc, #84]	; (80069cc <MX_USART2_UART_Init+0x5c>)
 8006978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800697a:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 800697c:	22e1      	movs	r2, #225	; 0xe1
 800697e:	0252      	lsls	r2, r2, #9
 8006980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006982:	4b11      	ldr	r3, [pc, #68]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 8006984:	2200      	movs	r2, #0
 8006986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 800698a:	2200      	movs	r2, #0
 800698c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800698e:	4b0e      	ldr	r3, [pc, #56]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 8006990:	2200      	movs	r2, #0
 8006992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006994:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 8006996:	220c      	movs	r2, #12
 8006998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 800699c:	2200      	movs	r2, #0
 800699e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80069a0:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80069a6:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80069b2:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <MX_USART2_UART_Init+0x58>)
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7fe fb5f 	bl	8005078 <HAL_UART_Init>
 80069ba:	1e03      	subs	r3, r0, #0
 80069bc:	d001      	beq.n	80069c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80069be:	f000 f8e1 	bl	8006b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	200009b8 	.word	0x200009b8
 80069cc:	40004400 	.word	0x40004400

080069d0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80069d6:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <MX_DMA_Init+0x38>)
 80069d8:	4a0b      	ldr	r2, [pc, #44]	; (8006a08 <MX_DMA_Init+0x38>)
 80069da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069dc:	2101      	movs	r1, #1
 80069de:	430a      	orrs	r2, r1
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <MX_DMA_Init+0x38>)
 80069e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e6:	2201      	movs	r2, #1
 80069e8:	4013      	ands	r3, r2
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80069ee:	2200      	movs	r2, #0
 80069f0:	2100      	movs	r1, #0
 80069f2:	200a      	movs	r0, #10
 80069f4:	f7fc fb70 	bl	80030d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80069f8:	200a      	movs	r0, #10
 80069fa:	f7fc fb83 	bl	8003104 <HAL_NVIC_EnableIRQ>

}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b002      	add	sp, #8
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	40021000 	.word	0x40021000

08006a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a12:	2314      	movs	r3, #20
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	0018      	movs	r0, r3
 8006a18:	2314      	movs	r3, #20
 8006a1a:	001a      	movs	r2, r3
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	f000 fde6 	bl	80075ee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a22:	4b53      	ldr	r3, [pc, #332]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a24:	4a52      	ldr	r2, [pc, #328]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a28:	2101      	movs	r1, #1
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a2e:	4b50      	ldr	r3, [pc, #320]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	2201      	movs	r2, #1
 8006a34:	4013      	ands	r3, r2
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a3a:	4b4d      	ldr	r3, [pc, #308]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a3c:	4a4c      	ldr	r2, [pc, #304]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a40:	2102      	movs	r1, #2
 8006a42:	430a      	orrs	r2, r1
 8006a44:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a46:	4b4a      	ldr	r3, [pc, #296]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a52:	4b47      	ldr	r3, [pc, #284]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a54:	4a46      	ldr	r2, [pc, #280]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a58:	2104      	movs	r1, #4
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a5e:	4b44      	ldr	r3, [pc, #272]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a62:	2204      	movs	r2, #4
 8006a64:	4013      	ands	r3, r2
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a6a:	4b41      	ldr	r3, [pc, #260]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a6c:	4a40      	ldr	r2, [pc, #256]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a70:	2180      	movs	r1, #128	; 0x80
 8006a72:	430a      	orrs	r2, r1
 8006a74:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a76:	4b3e      	ldr	r3, [pc, #248]	; (8006b70 <MX_GPIO_Init+0x164>)
 8006a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7a:	2280      	movs	r2, #128	; 0x80
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	607b      	str	r3, [r7, #4]
 8006a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin, GPIO_PIN_RESET);
 8006a82:	493c      	ldr	r1, [pc, #240]	; (8006b74 <MX_GPIO_Init+0x168>)
 8006a84:	23a0      	movs	r3, #160	; 0xa0
 8006a86:	05db      	lsls	r3, r3, #23
 8006a88:	2200      	movs	r2, #0
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7fc ff22 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin, GPIO_PIN_RESET);
 8006a90:	4b39      	ldr	r3, [pc, #228]	; (8006b78 <MX_GPIO_Init+0x16c>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	2107      	movs	r1, #7
 8006a96:	0018      	movs	r0, r3
 8006a98:	f7fc ff1c 	bl	80038d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RADIO_NSS_Pin RADIO_TCXO_VCC_Pin RADIO_ANT_SWITCH_RX_Pin */
  GPIO_InitStruct.Pin = RADIO_NSS_Pin|RADIO_TCXO_VCC_Pin|RADIO_ANT_SWITCH_RX_Pin;
 8006a9c:	2314      	movs	r3, #20
 8006a9e:	18fb      	adds	r3, r7, r3
 8006aa0:	4a34      	ldr	r2, [pc, #208]	; (8006b74 <MX_GPIO_Init+0x168>)
 8006aa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aa4:	2314      	movs	r3, #20
 8006aa6:	18fb      	adds	r3, r7, r3
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aac:	2314      	movs	r3, #20
 8006aae:	18fb      	adds	r3, r7, r3
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ab4:	2314      	movs	r3, #20
 8006ab6:	18fb      	adds	r3, r7, r3
 8006ab8:	2202      	movs	r2, #2
 8006aba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006abc:	2314      	movs	r3, #20
 8006abe:	18fa      	adds	r2, r7, r3
 8006ac0:	23a0      	movs	r3, #160	; 0xa0
 8006ac2:	05db      	lsls	r3, r3, #23
 8006ac4:	0011      	movs	r1, r2
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f7fc fd86 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_DIO_0_Pin RADIO_DIO_1_Pin RADIO_DIO_2_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_0_Pin|RADIO_DIO_1_Pin|RADIO_DIO_2_Pin;
 8006acc:	2314      	movs	r3, #20
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	2213      	movs	r2, #19
 8006ad2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006ad4:	2314      	movs	r3, #20
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	4a28      	ldr	r2, [pc, #160]	; (8006b7c <MX_GPIO_Init+0x170>)
 8006ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006adc:	2314      	movs	r3, #20
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ae4:	2314      	movs	r3, #20
 8006ae6:	18fb      	adds	r3, r7, r3
 8006ae8:	4a25      	ldr	r2, [pc, #148]	; (8006b80 <MX_GPIO_Init+0x174>)
 8006aea:	0019      	movs	r1, r3
 8006aec:	0010      	movs	r0, r2
 8006aee:	f7fc fd73 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_DIO_3_Pin */
  GPIO_InitStruct.Pin = RADIO_DIO_3_Pin;
 8006af2:	2314      	movs	r3, #20
 8006af4:	18fb      	adds	r3, r7, r3
 8006af6:	2280      	movs	r2, #128	; 0x80
 8006af8:	0192      	lsls	r2, r2, #6
 8006afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006afc:	2314      	movs	r3, #20
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	4a1e      	ldr	r2, [pc, #120]	; (8006b7c <MX_GPIO_Init+0x170>)
 8006b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b04:	2314      	movs	r3, #20
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	2200      	movs	r2, #0
 8006b0a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RADIO_DIO_3_GPIO_Port, &GPIO_InitStruct);
 8006b0c:	2314      	movs	r3, #20
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <MX_GPIO_Init+0x16c>)
 8006b12:	0019      	movs	r1, r3
 8006b14:	0010      	movs	r0, r2
 8006b16:	f7fc fd5f 	bl	80035d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RADIO_ANT_SWITCH_TX_BOOST_Pin RADIO_RESET_Pin RADIO_ANT_SWITCH_TX_RFO_Pin */
  GPIO_InitStruct.Pin = RADIO_ANT_SWITCH_TX_BOOST_Pin|RADIO_RESET_Pin|RADIO_ANT_SWITCH_TX_RFO_Pin;
 8006b1a:	2314      	movs	r3, #20
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	2207      	movs	r2, #7
 8006b20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b22:	2314      	movs	r3, #20
 8006b24:	18fb      	adds	r3, r7, r3
 8006b26:	2201      	movs	r2, #1
 8006b28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2a:	2314      	movs	r3, #20
 8006b2c:	18fb      	adds	r3, r7, r3
 8006b2e:	2200      	movs	r2, #0
 8006b30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b32:	2314      	movs	r3, #20
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	2202      	movs	r2, #2
 8006b38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b3a:	2314      	movs	r3, #20
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	4a0e      	ldr	r2, [pc, #56]	; (8006b78 <MX_GPIO_Init+0x16c>)
 8006b40:	0019      	movs	r1, r3
 8006b42:	0010      	movs	r0, r2
 8006b44:	f7fc fd48 	bl	80035d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	2005      	movs	r0, #5
 8006b4e:	f7fc fac3 	bl	80030d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8006b52:	2005      	movs	r0, #5
 8006b54:	f7fc fad6 	bl	8003104 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	2007      	movs	r0, #7
 8006b5e:	f7fc fabb 	bl	80030d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8006b62:	2007      	movs	r0, #7
 8006b64:	f7fc face 	bl	8003104 <HAL_NVIC_EnableIRQ>

}
 8006b68:	46c0      	nop			; (mov r8, r8)
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b00a      	add	sp, #40	; 0x28
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	40021000 	.word	0x40021000
 8006b74:	00009002 	.word	0x00009002
 8006b78:	50000800 	.word	0x50000800
 8006b7c:	10110000 	.word	0x10110000
 8006b80:	50000400 	.word	0x50000400

08006b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006b88:	46c0      	nop			; (mov r8, r8)
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
	...

08006b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b94:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <HAL_MspInit+0x24>)
 8006b96:	4a07      	ldr	r2, [pc, #28]	; (8006bb4 <HAL_MspInit+0x24>)
 8006b98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ba0:	4b04      	ldr	r3, [pc, #16]	; (8006bb4 <HAL_MspInit+0x24>)
 8006ba2:	4a04      	ldr	r2, [pc, #16]	; (8006bb4 <HAL_MspInit+0x24>)
 8006ba4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ba6:	2180      	movs	r1, #128	; 0x80
 8006ba8:	0549      	lsls	r1, r1, #21
 8006baa:	430a      	orrs	r2, r1
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40021000 	.word	0x40021000

08006bb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]

  if(hrtc->Instance==RTC)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a0a      	ldr	r2, [pc, #40]	; (8006bf0 <HAL_RTC_MspInit+0x38>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10e      	bne.n	8006be8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006bca:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <HAL_RTC_MspInit+0x3c>)
 8006bcc:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <HAL_RTC_MspInit+0x3c>)
 8006bce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006bd0:	2180      	movs	r1, #128	; 0x80
 8006bd2:	02c9      	lsls	r1, r1, #11
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2100      	movs	r1, #0
 8006bdc:	2002      	movs	r0, #2
 8006bde:	f7fc fa7b 	bl	80030d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8006be2:	2002      	movs	r0, #2
 8006be4:	f7fc fa8e 	bl	8003104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006be8:	46c0      	nop			; (mov r8, r8)
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b002      	add	sp, #8
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	40002800 	.word	0x40002800
 8006bf4:	40021000 	.word	0x40021000

08006bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	; 0x28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c00:	2314      	movs	r3, #20
 8006c02:	18fb      	adds	r3, r7, r3
 8006c04:	0018      	movs	r0, r3
 8006c06:	2314      	movs	r3, #20
 8006c08:	001a      	movs	r2, r3
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	f000 fcef 	bl	80075ee <memset>
  if(hspi->Instance==SPI1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a48      	ldr	r2, [pc, #288]	; (8006d38 <HAL_SPI_MspInit+0x140>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d156      	bne.n	8006cc8 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006c1a:	4b48      	ldr	r3, [pc, #288]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006c1c:	4a47      	ldr	r2, [pc, #284]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006c1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c20:	2180      	movs	r1, #128	; 0x80
 8006c22:	0149      	lsls	r1, r1, #5
 8006c24:	430a      	orrs	r2, r1
 8006c26:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c28:	4b44      	ldr	r3, [pc, #272]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006c2a:	4a44      	ldr	r2, [pc, #272]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006c2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c2e:	2102      	movs	r1, #2
 8006c30:	430a      	orrs	r2, r1
 8006c32:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c34:	4b41      	ldr	r3, [pc, #260]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	2202      	movs	r2, #2
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c40:	4b3e      	ldr	r3, [pc, #248]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006c42:	4a3e      	ldr	r2, [pc, #248]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006c44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006c46:	2101      	movs	r1, #1
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c4c:	4b3b      	ldr	r3, [pc, #236]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	2201      	movs	r2, #1
 8006c52:	4013      	ands	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = RADIO_SCLK_Pin;
 8006c58:	2314      	movs	r3, #20
 8006c5a:	18fb      	adds	r3, r7, r3
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c60:	2314      	movs	r3, #20
 8006c62:	18fb      	adds	r3, r7, r3
 8006c64:	2202      	movs	r2, #2
 8006c66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c68:	2314      	movs	r3, #20
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c70:	2314      	movs	r3, #20
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	2203      	movs	r2, #3
 8006c76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006c78:	2314      	movs	r3, #20
 8006c7a:	18fb      	adds	r3, r7, r3
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RADIO_SCLK_GPIO_Port, &GPIO_InitStruct);
 8006c80:	2314      	movs	r3, #20
 8006c82:	18fb      	adds	r3, r7, r3
 8006c84:	4a2e      	ldr	r2, [pc, #184]	; (8006d40 <HAL_SPI_MspInit+0x148>)
 8006c86:	0019      	movs	r1, r3
 8006c88:	0010      	movs	r0, r2
 8006c8a:	f7fc fca5 	bl	80035d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RADIO_MOSI_Pin|RADIO_MISO_Pin;
 8006c8e:	2314      	movs	r3, #20
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	22c0      	movs	r2, #192	; 0xc0
 8006c94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c96:	2314      	movs	r3, #20
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9e:	2314      	movs	r3, #20
 8006ca0:	18fb      	adds	r3, r7, r3
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ca6:	2314      	movs	r3, #20
 8006ca8:	18fb      	adds	r3, r7, r3
 8006caa:	2203      	movs	r2, #3
 8006cac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006cae:	2314      	movs	r3, #20
 8006cb0:	18fb      	adds	r3, r7, r3
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cb6:	2314      	movs	r3, #20
 8006cb8:	18fa      	adds	r2, r7, r3
 8006cba:	23a0      	movs	r3, #160	; 0xa0
 8006cbc:	05db      	lsls	r3, r3, #23
 8006cbe:	0011      	movs	r1, r2
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fc fc89 	bl	80035d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006cc6:	e033      	b.n	8006d30 <HAL_SPI_MspInit+0x138>
  else if(hspi->Instance==SPI2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	; (8006d44 <HAL_SPI_MspInit+0x14c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d12e      	bne.n	8006d30 <HAL_SPI_MspInit+0x138>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006cd2:	4b1a      	ldr	r3, [pc, #104]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006cd4:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006cd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cd8:	2180      	movs	r1, #128	; 0x80
 8006cda:	01c9      	lsls	r1, r1, #7
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ce0:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006ce2:	4a16      	ldr	r2, [pc, #88]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006ce4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ce6:	2102      	movs	r1, #2
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cec:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <HAL_SPI_MspInit+0x144>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	60bb      	str	r3, [r7, #8]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12;
 8006cf8:	2314      	movs	r3, #20
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	22f0      	movs	r2, #240	; 0xf0
 8006cfe:	0212      	lsls	r2, r2, #8
 8006d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d02:	2314      	movs	r3, #20
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	2202      	movs	r2, #2
 8006d08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d0a:	2314      	movs	r3, #20
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	2200      	movs	r2, #0
 8006d10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d12:	2314      	movs	r3, #20
 8006d14:	18fb      	adds	r3, r7, r3
 8006d16:	2203      	movs	r2, #3
 8006d18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006d1a:	2314      	movs	r3, #20
 8006d1c:	18fb      	adds	r3, r7, r3
 8006d1e:	2200      	movs	r2, #0
 8006d20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d22:	2314      	movs	r3, #20
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <HAL_SPI_MspInit+0x148>)
 8006d28:	0019      	movs	r1, r3
 8006d2a:	0010      	movs	r0, r2
 8006d2c:	f7fc fc54 	bl	80035d8 <HAL_GPIO_Init>
}
 8006d30:	46c0      	nop			; (mov r8, r8)
 8006d32:	46bd      	mov	sp, r7
 8006d34:	b00a      	add	sp, #40	; 0x28
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40013000 	.word	0x40013000
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	50000400 	.word	0x50000400
 8006d44:	40003800 	.word	0x40003800

08006d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	; 0x28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d50:	2314      	movs	r3, #20
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	0018      	movs	r0, r3
 8006d56:	2314      	movs	r3, #20
 8006d58:	001a      	movs	r2, r3
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	f000 fc47 	bl	80075ee <memset>
  if(huart->Instance==USART1)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a67      	ldr	r2, [pc, #412]	; (8006f04 <HAL_UART_MspInit+0x1bc>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d000      	beq.n	8006d6c <HAL_UART_MspInit+0x24>
 8006d6a:	e08a      	b.n	8006e82 <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006d6c:	4b66      	ldr	r3, [pc, #408]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006d6e:	4a66      	ldr	r2, [pc, #408]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006d70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d72:	2180      	movs	r1, #128	; 0x80
 8006d74:	01c9      	lsls	r1, r1, #7
 8006d76:	430a      	orrs	r2, r1
 8006d78:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d7a:	4b63      	ldr	r3, [pc, #396]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006d7c:	4a62      	ldr	r2, [pc, #392]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006d7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d80:	2101      	movs	r1, #1
 8006d82:	430a      	orrs	r2, r1
 8006d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d86:	4b60      	ldr	r3, [pc, #384]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8006d92:	2314      	movs	r3, #20
 8006d94:	18fb      	adds	r3, r7, r3
 8006d96:	22c0      	movs	r2, #192	; 0xc0
 8006d98:	00d2      	lsls	r2, r2, #3
 8006d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d9c:	2314      	movs	r3, #20
 8006d9e:	18fb      	adds	r3, r7, r3
 8006da0:	2202      	movs	r2, #2
 8006da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da4:	2314      	movs	r3, #20
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	2200      	movs	r2, #0
 8006daa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dac:	2314      	movs	r3, #20
 8006dae:	18fb      	adds	r3, r7, r3
 8006db0:	2203      	movs	r2, #3
 8006db2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006db4:	2314      	movs	r3, #20
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	2204      	movs	r2, #4
 8006dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dbc:	2314      	movs	r3, #20
 8006dbe:	18fa      	adds	r2, r7, r3
 8006dc0:	23a0      	movs	r3, #160	; 0xa0
 8006dc2:	05db      	lsls	r3, r3, #23
 8006dc4:	0011      	movs	r1, r2
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f7fc fc06 	bl	80035d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8006dcc:	4b4f      	ldr	r3, [pc, #316]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006dce:	4a50      	ldr	r2, [pc, #320]	; (8006f10 <HAL_UART_MspInit+0x1c8>)
 8006dd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8006dd2:	4b4e      	ldr	r3, [pc, #312]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006dd4:	2203      	movs	r2, #3
 8006dd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006dd8:	4b4c      	ldr	r3, [pc, #304]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dde:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006de4:	4b49      	ldr	r3, [pc, #292]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006de6:	2280      	movs	r2, #128	; 0x80
 8006de8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dea:	4b48      	ldr	r3, [pc, #288]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006df0:	4b46      	ldr	r3, [pc, #280]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8006df6:	4b45      	ldr	r3, [pc, #276]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006df8:	2220      	movs	r2, #32
 8006dfa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006dfc:	4b43      	ldr	r3, [pc, #268]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006e02:	4b42      	ldr	r3, [pc, #264]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006e04:	0018      	movs	r0, r3
 8006e06:	f7fc f99b 	bl	8003140 <HAL_DMA_Init>
 8006e0a:	1e03      	subs	r3, r0, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8006e0e:	f7ff feb9 	bl	8006b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a3d      	ldr	r2, [pc, #244]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006e16:	66da      	str	r2, [r3, #108]	; 0x6c
 8006e18:	4b3c      	ldr	r3, [pc, #240]	; (8006f0c <HAL_UART_MspInit+0x1c4>)
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8006e1e:	4b3d      	ldr	r3, [pc, #244]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e20:	4a3d      	ldr	r2, [pc, #244]	; (8006f18 <HAL_UART_MspInit+0x1d0>)
 8006e22:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8006e24:	4b3b      	ldr	r3, [pc, #236]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e26:	2203      	movs	r2, #3
 8006e28:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e2a:	4b3a      	ldr	r3, [pc, #232]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e2c:	2210      	movs	r2, #16
 8006e2e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e30:	4b38      	ldr	r3, [pc, #224]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e36:	4b37      	ldr	r3, [pc, #220]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e3c:	4b35      	ldr	r3, [pc, #212]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e3e:	2200      	movs	r2, #0
 8006e40:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e42:	4b34      	ldr	r3, [pc, #208]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006e48:	4b32      	ldr	r3, [pc, #200]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e4e:	4b31      	ldr	r3, [pc, #196]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006e54:	4b2f      	ldr	r3, [pc, #188]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e56:	0018      	movs	r0, r3
 8006e58:	f7fc f972 	bl	8003140 <HAL_DMA_Init>
 8006e5c:	1e03      	subs	r3, r0, #0
 8006e5e:	d001      	beq.n	8006e64 <HAL_UART_MspInit+0x11c>
    {
      Error_Handler();
 8006e60:	f7ff fe90 	bl	8006b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a2b      	ldr	r2, [pc, #172]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e68:	669a      	str	r2, [r3, #104]	; 0x68
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <HAL_UART_MspInit+0x1cc>)
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006e70:	2200      	movs	r2, #0
 8006e72:	2100      	movs	r1, #0
 8006e74:	201b      	movs	r0, #27
 8006e76:	f7fc f92f 	bl	80030d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006e7a:	201b      	movs	r0, #27
 8006e7c:	f7fc f942 	bl	8003104 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006e80:	e03b      	b.n	8006efa <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a25      	ldr	r2, [pc, #148]	; (8006f1c <HAL_UART_MspInit+0x1d4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d136      	bne.n	8006efa <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e8c:	4b1e      	ldr	r3, [pc, #120]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006e8e:	4a1e      	ldr	r2, [pc, #120]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006e90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e92:	2180      	movs	r1, #128	; 0x80
 8006e94:	0289      	lsls	r1, r1, #10
 8006e96:	430a      	orrs	r2, r1
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e9a:	4b1b      	ldr	r3, [pc, #108]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006e9c:	4a1a      	ldr	r2, [pc, #104]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006e9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ea6:	4b18      	ldr	r3, [pc, #96]	; (8006f08 <HAL_UART_MspInit+0x1c0>)
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	2201      	movs	r2, #1
 8006eac:	4013      	ands	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006eb2:	2314      	movs	r3, #20
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	220c      	movs	r2, #12
 8006eb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eba:	2314      	movs	r3, #20
 8006ebc:	18fb      	adds	r3, r7, r3
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec2:	2314      	movs	r3, #20
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eca:	2314      	movs	r3, #20
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	2203      	movs	r2, #3
 8006ed0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8006ed2:	2314      	movs	r3, #20
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eda:	2314      	movs	r3, #20
 8006edc:	18fa      	adds	r2, r7, r3
 8006ede:	23a0      	movs	r3, #160	; 0xa0
 8006ee0:	05db      	lsls	r3, r3, #23
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f7fc fb77 	bl	80035d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006eea:	2200      	movs	r2, #0
 8006eec:	2100      	movs	r1, #0
 8006eee:	201c      	movs	r0, #28
 8006ef0:	f7fc f8f2 	bl	80030d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006ef4:	201c      	movs	r0, #28
 8006ef6:	f7fc f905 	bl	8003104 <HAL_NVIC_EnableIRQ>
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b00a      	add	sp, #40	; 0x28
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	40013800 	.word	0x40013800
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	20000874 	.word	0x20000874
 8006f10:	40020030 	.word	0x40020030
 8006f14:	2000082c 	.word	0x2000082c
 8006f18:	4002001c 	.word	0x4002001c
 8006f1c:	40004400 	.word	0x40004400

08006f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006f24:	46c0      	nop			; (mov r8, r8)
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f2e:	e7fe      	b.n	8006f2e <HardFault_Handler+0x4>

08006f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006f34:	46c0      	nop			; (mov r8, r8)
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f3e:	46c0      	nop			; (mov r8, r8)
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f48:	f7fc f808 	bl	8002f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f4c:	46c0      	nop			; (mov r8, r8)
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8006f58:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <RTC_IRQHandler+0x14>)
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f7fd ff4a 	bl	8004df4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8006f60:	46c0      	nop			; (mov r8, r8)
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	46c0      	nop			; (mov r8, r8)
 8006f68:	2000093c 	.word	0x2000093c

08006f6c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006f70:	2001      	movs	r0, #1
 8006f72:	f7fc fccd 	bl	8003910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8006f76:	2002      	movs	r0, #2
 8006f78:	f7fc fcca 	bl	8003910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8006f86:	2010      	movs	r0, #16
 8006f88:	f7fc fcc2 	bl	8003910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	019b      	lsls	r3, r3, #6
 8006f90:	0018      	movs	r0, r3
 8006f92:	f7fc fcbd 	bl	8003910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f7fc fa32 	bl	800340c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006fa8:	4b04      	ldr	r3, [pc, #16]	; (8006fbc <DMA1_Channel2_3_IRQHandler+0x20>)
 8006faa:	0018      	movs	r0, r3
 8006fac:	f7fc fa2e 	bl	800340c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8006fb0:	46c0      	nop			; (mov r8, r8)
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	46c0      	nop			; (mov r8, r8)
 8006fb8:	2000082c 	.word	0x2000082c
 8006fbc:	20000874 	.word	0x20000874

08006fc0 <USART1_IRQHandler>:
#define UARTDMA_BUFFER_SIZE 8
/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(__HAL_UART_GET_IT(&huart1, UART_IT_IDLE))
 8006fc4:	4b18      	ldr	r3, [pc, #96]	; (8007028 <USART1_IRQHandler+0x68>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	2210      	movs	r2, #16
 8006fcc:	4013      	ands	r3, r2
 8006fce:	d024      	beq.n	800701a <USART1_IRQHandler+0x5a>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8006fd0:	4b15      	ldr	r3, [pc, #84]	; (8007028 <USART1_IRQHandler+0x68>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	621a      	str	r2, [r3, #32]

		if (gpsHandle != NULL)
 8006fd8:	4b14      	ldr	r3, [pc, #80]	; (800702c <USART1_IRQHandler+0x6c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01c      	beq.n	800701a <USART1_IRQHandler+0x5a>
		{
			HAL_UART_DMAStop(&huart1);
 8006fe0:	4b11      	ldr	r3, [pc, #68]	; (8007028 <USART1_IRQHandler+0x68>)
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f7fe f9da 	bl	800539c <HAL_UART_DMAStop>
			memcpy(GPS_buffer, DMA_buffer, UARTDMA_BUFFER_SIZE);
 8006fe8:	4911      	ldr	r1, [pc, #68]	; (8007030 <USART1_IRQHandler+0x70>)
 8006fea:	4b12      	ldr	r3, [pc, #72]	; (8007034 <USART1_IRQHandler+0x74>)
 8006fec:	2208      	movs	r2, #8
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f000 faf4 	bl	80075dc <memcpy>
			memset(DMA_buffer, 0, UARTDMA_BUFFER_SIZE);
 8006ff4:	4b0e      	ldr	r3, [pc, #56]	; (8007030 <USART1_IRQHandler+0x70>)
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f000 faf7 	bl	80075ee <memset>
			gps_set_input_buffer(gpsHandle, GPS_buffer, UARTDMA_BUFFER_SIZE);
 8007000:	4b0a      	ldr	r3, [pc, #40]	; (800702c <USART1_IRQHandler+0x6c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	490b      	ldr	r1, [pc, #44]	; (8007034 <USART1_IRQHandler+0x74>)
 8007006:	2208      	movs	r2, #8
 8007008:	0018      	movs	r0, r3
 800700a:	f7ff f8e9 	bl	80061e0 <gps_set_input_buffer>
			//HAL_UART_DMAResume(&huart1);
			HAL_UART_Receive_DMA(&huart1, DMA_buffer, UARTDMA_BUFFER_SIZE);
 800700e:	4908      	ldr	r1, [pc, #32]	; (8007030 <USART1_IRQHandler+0x70>)
 8007010:	4b05      	ldr	r3, [pc, #20]	; (8007028 <USART1_IRQHandler+0x68>)
 8007012:	2208      	movs	r2, #8
 8007014:	0018      	movs	r0, r3
 8007016:	f7fe f929 	bl	800526c <HAL_UART_Receive_DMA>
		}

	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800701a:	4b03      	ldr	r3, [pc, #12]	; (8007028 <USART1_IRQHandler+0x68>)
 800701c:	0018      	movs	r0, r3
 800701e:	f7fe fa29 	bl	8005474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007022:	46c0      	nop			; (mov r8, r8)
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	200008bc 	.word	0x200008bc
 800702c:	200006cc 	.word	0x200006cc
 8007030:	20000728 	.word	0x20000728
 8007034:	200007a8 	.word	0x200007a8

08007038 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800703c:	4b03      	ldr	r3, [pc, #12]	; (800704c <USART2_IRQHandler+0x14>)
 800703e:	0018      	movs	r0, r3
 8007040:	f7fe fa18 	bl	8005474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007044:	46c0      	nop			; (mov r8, r8)
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	200009b8 	.word	0x200009b8

08007050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8007054:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <SystemInit+0x64>)
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <SystemInit+0x64>)
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	2180      	movs	r1, #128	; 0x80
 800705c:	0049      	lsls	r1, r1, #1
 800705e:	430a      	orrs	r2, r1
 8007060:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8007062:	4b14      	ldr	r3, [pc, #80]	; (80070b4 <SystemInit+0x64>)
 8007064:	4a13      	ldr	r2, [pc, #76]	; (80070b4 <SystemInit+0x64>)
 8007066:	68d2      	ldr	r2, [r2, #12]
 8007068:	4913      	ldr	r1, [pc, #76]	; (80070b8 <SystemInit+0x68>)
 800706a:	400a      	ands	r2, r1
 800706c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800706e:	4b11      	ldr	r3, [pc, #68]	; (80070b4 <SystemInit+0x64>)
 8007070:	4a10      	ldr	r2, [pc, #64]	; (80070b4 <SystemInit+0x64>)
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	4911      	ldr	r1, [pc, #68]	; (80070bc <SystemInit+0x6c>)
 8007076:	400a      	ands	r2, r1
 8007078:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800707a:	4b0e      	ldr	r3, [pc, #56]	; (80070b4 <SystemInit+0x64>)
 800707c:	4a0d      	ldr	r2, [pc, #52]	; (80070b4 <SystemInit+0x64>)
 800707e:	6892      	ldr	r2, [r2, #8]
 8007080:	2101      	movs	r1, #1
 8007082:	438a      	bics	r2, r1
 8007084:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <SystemInit+0x64>)
 8007088:	4a0a      	ldr	r2, [pc, #40]	; (80070b4 <SystemInit+0x64>)
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	490c      	ldr	r1, [pc, #48]	; (80070c0 <SystemInit+0x70>)
 800708e:	400a      	ands	r2, r1
 8007090:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8007092:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <SystemInit+0x64>)
 8007094:	4a07      	ldr	r2, [pc, #28]	; (80070b4 <SystemInit+0x64>)
 8007096:	68d2      	ldr	r2, [r2, #12]
 8007098:	490a      	ldr	r1, [pc, #40]	; (80070c4 <SystemInit+0x74>)
 800709a:	400a      	ands	r2, r1
 800709c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <SystemInit+0x64>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80070a4:	4b08      	ldr	r3, [pc, #32]	; (80070c8 <SystemInit+0x78>)
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	0512      	lsls	r2, r2, #20
 80070aa:	609a      	str	r2, [r3, #8]
#endif
}
 80070ac:	46c0      	nop			; (mov r8, r8)
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	46c0      	nop			; (mov r8, r8)
 80070b4:	40021000 	.word	0x40021000
 80070b8:	88ff400c 	.word	0x88ff400c
 80070bc:	fef6fff6 	.word	0xfef6fff6
 80070c0:	fffbffff 	.word	0xfffbffff
 80070c4:	ff02ffff 	.word	0xff02ffff
 80070c8:	e000ed00 	.word	0xe000ed00

080070cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80070cc:	480d      	ldr	r0, [pc, #52]	; (8007104 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80070ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80070d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80070d2:	e003      	b.n	80070dc <LoopCopyDataInit>

080070d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80070d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80070d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80070da:	3104      	adds	r1, #4

080070dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80070dc:	480b      	ldr	r0, [pc, #44]	; (800710c <LoopForever+0xa>)
  ldr  r3, =_edata
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <LoopForever+0xe>)
  adds  r2, r0, r1
 80070e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80070e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80070e4:	d3f6      	bcc.n	80070d4 <CopyDataInit>
  ldr  r2, =_sbss
 80070e6:	4a0b      	ldr	r2, [pc, #44]	; (8007114 <LoopForever+0x12>)
  b  LoopFillZerobss
 80070e8:	e002      	b.n	80070f0 <LoopFillZerobss>

080070ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80070ea:	2300      	movs	r3, #0
  str  r3, [r2]
 80070ec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070ee:	3204      	adds	r2, #4

080070f0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80070f0:	4b09      	ldr	r3, [pc, #36]	; (8007118 <LoopForever+0x16>)
  cmp  r2, r3
 80070f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80070f4:	d3f9      	bcc.n	80070ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80070f6:	f7ff ffab 	bl	8007050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070fa:	f000 f847 	bl	800718c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80070fe:	f7ff fa37 	bl	8006570 <main>

08007102 <LoopForever>:

LoopForever:
    b LoopForever
 8007102:	e7fe      	b.n	8007102 <LoopForever>
   ldr   r0, =_estack
 8007104:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8007108:	08009a90 	.word	0x08009a90
  ldr  r0, =_sdata
 800710c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007110:	20000674 	.word	0x20000674
  ldr  r2, =_sbss
 8007114:	20000674 	.word	0x20000674
  ldr  r3, = _ebss
 8007118:	20000a48 	.word	0x20000a48

0800711c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800711c:	e7fe      	b.n	800711c <ADC1_COMP_IRQHandler>
	...

08007120 <calloc>:
 8007120:	b510      	push	{r4, lr}
 8007122:	4b03      	ldr	r3, [pc, #12]	; (8007130 <calloc+0x10>)
 8007124:	000a      	movs	r2, r1
 8007126:	0001      	movs	r1, r0
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f000 f803 	bl	8007134 <_calloc_r>
 800712e:	bd10      	pop	{r4, pc}
 8007130:	20000004 	.word	0x20000004

08007134 <_calloc_r>:
 8007134:	b510      	push	{r4, lr}
 8007136:	4351      	muls	r1, r2
 8007138:	f000 f84c 	bl	80071d4 <_malloc_r>
 800713c:	1e04      	subs	r4, r0, #0
 800713e:	d01a      	beq.n	8007176 <_calloc_r+0x42>
 8007140:	0003      	movs	r3, r0
 8007142:	3b08      	subs	r3, #8
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	2303      	movs	r3, #3
 8007148:	439a      	bics	r2, r3
 800714a:	3a04      	subs	r2, #4
 800714c:	2a24      	cmp	r2, #36	; 0x24
 800714e:	d819      	bhi.n	8007184 <_calloc_r+0x50>
 8007150:	0003      	movs	r3, r0
 8007152:	2a13      	cmp	r2, #19
 8007154:	d90b      	bls.n	800716e <_calloc_r+0x3a>
 8007156:	2100      	movs	r1, #0
 8007158:	3308      	adds	r3, #8
 800715a:	6001      	str	r1, [r0, #0]
 800715c:	6041      	str	r1, [r0, #4]
 800715e:	2a1b      	cmp	r2, #27
 8007160:	d905      	bls.n	800716e <_calloc_r+0x3a>
 8007162:	6081      	str	r1, [r0, #8]
 8007164:	60c1      	str	r1, [r0, #12]
 8007166:	2a24      	cmp	r2, #36	; 0x24
 8007168:	d007      	beq.n	800717a <_calloc_r+0x46>
 800716a:	0003      	movs	r3, r0
 800716c:	3310      	adds	r3, #16
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	605a      	str	r2, [r3, #4]
 8007174:	609a      	str	r2, [r3, #8]
 8007176:	0020      	movs	r0, r4
 8007178:	bd10      	pop	{r4, pc}
 800717a:	0003      	movs	r3, r0
 800717c:	6101      	str	r1, [r0, #16]
 800717e:	3318      	adds	r3, #24
 8007180:	6141      	str	r1, [r0, #20]
 8007182:	e7f4      	b.n	800716e <_calloc_r+0x3a>
 8007184:	2100      	movs	r1, #0
 8007186:	f000 fa32 	bl	80075ee <memset>
 800718a:	e7f4      	b.n	8007176 <_calloc_r+0x42>

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	2600      	movs	r6, #0
 8007190:	4d0c      	ldr	r5, [pc, #48]	; (80071c4 <__libc_init_array+0x38>)
 8007192:	4c0d      	ldr	r4, [pc, #52]	; (80071c8 <__libc_init_array+0x3c>)
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	2600      	movs	r6, #0
 800719e:	f002 fa55 	bl	800964c <_init>
 80071a2:	4d0a      	ldr	r5, [pc, #40]	; (80071cc <__libc_init_array+0x40>)
 80071a4:	4c0a      	ldr	r4, [pc, #40]	; (80071d0 <__libc_init_array+0x44>)
 80071a6:	1b64      	subs	r4, r4, r5
 80071a8:	10a4      	asrs	r4, r4, #2
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	00b3      	lsls	r3, r6, #2
 80071b2:	58eb      	ldr	r3, [r5, r3]
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	00b3      	lsls	r3, r6, #2
 80071bc:	58eb      	ldr	r3, [r5, r3]
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	08009a88 	.word	0x08009a88
 80071c8:	08009a88 	.word	0x08009a88
 80071cc:	08009a88 	.word	0x08009a88
 80071d0:	08009a8c 	.word	0x08009a8c

080071d4 <_malloc_r>:
 80071d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d6:	000d      	movs	r5, r1
 80071d8:	b085      	sub	sp, #20
 80071da:	350b      	adds	r5, #11
 80071dc:	9001      	str	r0, [sp, #4]
 80071de:	2d16      	cmp	r5, #22
 80071e0:	d908      	bls.n	80071f4 <_malloc_r+0x20>
 80071e2:	2307      	movs	r3, #7
 80071e4:	439d      	bics	r5, r3
 80071e6:	d506      	bpl.n	80071f6 <_malloc_r+0x22>
 80071e8:	230c      	movs	r3, #12
 80071ea:	9a01      	ldr	r2, [sp, #4]
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	2000      	movs	r0, #0
 80071f0:	b005      	add	sp, #20
 80071f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f4:	2510      	movs	r5, #16
 80071f6:	428d      	cmp	r5, r1
 80071f8:	d3f6      	bcc.n	80071e8 <_malloc_r+0x14>
 80071fa:	9801      	ldr	r0, [sp, #4]
 80071fc:	f000 fa00 	bl	8007600 <__malloc_lock>
 8007200:	23f8      	movs	r3, #248	; 0xf8
 8007202:	33ff      	adds	r3, #255	; 0xff
 8007204:	48ba      	ldr	r0, [pc, #744]	; (80074f0 <_malloc_r+0x31c>)
 8007206:	429d      	cmp	r5, r3
 8007208:	d81f      	bhi.n	800724a <_malloc_r+0x76>
 800720a:	002a      	movs	r2, r5
 800720c:	3208      	adds	r2, #8
 800720e:	1882      	adds	r2, r0, r2
 8007210:	0011      	movs	r1, r2
 8007212:	6854      	ldr	r4, [r2, #4]
 8007214:	3908      	subs	r1, #8
 8007216:	08eb      	lsrs	r3, r5, #3
 8007218:	428c      	cmp	r4, r1
 800721a:	d103      	bne.n	8007224 <_malloc_r+0x50>
 800721c:	68d4      	ldr	r4, [r2, #12]
 800721e:	3302      	adds	r3, #2
 8007220:	42a2      	cmp	r2, r4
 8007222:	d029      	beq.n	8007278 <_malloc_r+0xa4>
 8007224:	2303      	movs	r3, #3
 8007226:	6862      	ldr	r2, [r4, #4]
 8007228:	68a1      	ldr	r1, [r4, #8]
 800722a:	439a      	bics	r2, r3
 800722c:	0013      	movs	r3, r2
 800722e:	68e2      	ldr	r2, [r4, #12]
 8007230:	18e3      	adds	r3, r4, r3
 8007232:	60ca      	str	r2, [r1, #12]
 8007234:	6091      	str	r1, [r2, #8]
 8007236:	2201      	movs	r2, #1
 8007238:	6859      	ldr	r1, [r3, #4]
 800723a:	430a      	orrs	r2, r1
 800723c:	605a      	str	r2, [r3, #4]
 800723e:	9801      	ldr	r0, [sp, #4]
 8007240:	f000 f9e6 	bl	8007610 <__malloc_unlock>
 8007244:	0020      	movs	r0, r4
 8007246:	3008      	adds	r0, #8
 8007248:	e7d2      	b.n	80071f0 <_malloc_r+0x1c>
 800724a:	0a6a      	lsrs	r2, r5, #9
 800724c:	233f      	movs	r3, #63	; 0x3f
 800724e:	2a00      	cmp	r2, #0
 8007250:	d003      	beq.n	800725a <_malloc_r+0x86>
 8007252:	2a04      	cmp	r2, #4
 8007254:	d828      	bhi.n	80072a8 <_malloc_r+0xd4>
 8007256:	09ab      	lsrs	r3, r5, #6
 8007258:	3338      	adds	r3, #56	; 0x38
 800725a:	2203      	movs	r2, #3
 800725c:	4694      	mov	ip, r2
 800725e:	00d9      	lsls	r1, r3, #3
 8007260:	1809      	adds	r1, r1, r0
 8007262:	68cc      	ldr	r4, [r1, #12]
 8007264:	428c      	cmp	r4, r1
 8007266:	d006      	beq.n	8007276 <_malloc_r+0xa2>
 8007268:	4666      	mov	r6, ip
 800726a:	6862      	ldr	r2, [r4, #4]
 800726c:	43b2      	bics	r2, r6
 800726e:	1b57      	subs	r7, r2, r5
 8007270:	2f0f      	cmp	r7, #15
 8007272:	dd31      	ble.n	80072d8 <_malloc_r+0x104>
 8007274:	3b01      	subs	r3, #1
 8007276:	3301      	adds	r3, #1
 8007278:	0001      	movs	r1, r0
 800727a:	6904      	ldr	r4, [r0, #16]
 800727c:	3108      	adds	r1, #8
 800727e:	428c      	cmp	r4, r1
 8007280:	d04e      	beq.n	8007320 <_malloc_r+0x14c>
 8007282:	2203      	movs	r2, #3
 8007284:	6866      	ldr	r6, [r4, #4]
 8007286:	4396      	bics	r6, r2
 8007288:	0032      	movs	r2, r6
 800728a:	1b76      	subs	r6, r6, r5
 800728c:	2e0f      	cmp	r6, #15
 800728e:	dd31      	ble.n	80072f4 <_malloc_r+0x120>
 8007290:	2701      	movs	r7, #1
 8007292:	1963      	adds	r3, r4, r5
 8007294:	433d      	orrs	r5, r7
 8007296:	4337      	orrs	r7, r6
 8007298:	6065      	str	r5, [r4, #4]
 800729a:	6143      	str	r3, [r0, #20]
 800729c:	6103      	str	r3, [r0, #16]
 800729e:	60d9      	str	r1, [r3, #12]
 80072a0:	6099      	str	r1, [r3, #8]
 80072a2:	605f      	str	r7, [r3, #4]
 80072a4:	50a6      	str	r6, [r4, r2]
 80072a6:	e7ca      	b.n	800723e <_malloc_r+0x6a>
 80072a8:	2a14      	cmp	r2, #20
 80072aa:	d802      	bhi.n	80072b2 <_malloc_r+0xde>
 80072ac:	0013      	movs	r3, r2
 80072ae:	335b      	adds	r3, #91	; 0x5b
 80072b0:	e7d3      	b.n	800725a <_malloc_r+0x86>
 80072b2:	2a54      	cmp	r2, #84	; 0x54
 80072b4:	d802      	bhi.n	80072bc <_malloc_r+0xe8>
 80072b6:	0b2b      	lsrs	r3, r5, #12
 80072b8:	336e      	adds	r3, #110	; 0x6e
 80072ba:	e7ce      	b.n	800725a <_malloc_r+0x86>
 80072bc:	23aa      	movs	r3, #170	; 0xaa
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d802      	bhi.n	80072ca <_malloc_r+0xf6>
 80072c4:	0beb      	lsrs	r3, r5, #15
 80072c6:	3377      	adds	r3, #119	; 0x77
 80072c8:	e7c7      	b.n	800725a <_malloc_r+0x86>
 80072ca:	498a      	ldr	r1, [pc, #552]	; (80074f4 <_malloc_r+0x320>)
 80072cc:	237e      	movs	r3, #126	; 0x7e
 80072ce:	428a      	cmp	r2, r1
 80072d0:	d8c3      	bhi.n	800725a <_malloc_r+0x86>
 80072d2:	0cab      	lsrs	r3, r5, #18
 80072d4:	337c      	adds	r3, #124	; 0x7c
 80072d6:	e7c0      	b.n	800725a <_malloc_r+0x86>
 80072d8:	68e6      	ldr	r6, [r4, #12]
 80072da:	2f00      	cmp	r7, #0
 80072dc:	db08      	blt.n	80072f0 <_malloc_r+0x11c>
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	60de      	str	r6, [r3, #12]
 80072e2:	60b3      	str	r3, [r6, #8]
 80072e4:	2301      	movs	r3, #1
 80072e6:	18a2      	adds	r2, r4, r2
 80072e8:	6851      	ldr	r1, [r2, #4]
 80072ea:	430b      	orrs	r3, r1
 80072ec:	6053      	str	r3, [r2, #4]
 80072ee:	e7a6      	b.n	800723e <_malloc_r+0x6a>
 80072f0:	0034      	movs	r4, r6
 80072f2:	e7b7      	b.n	8007264 <_malloc_r+0x90>
 80072f4:	6141      	str	r1, [r0, #20]
 80072f6:	6101      	str	r1, [r0, #16]
 80072f8:	2e00      	cmp	r6, #0
 80072fa:	daf3      	bge.n	80072e4 <_malloc_r+0x110>
 80072fc:	497e      	ldr	r1, [pc, #504]	; (80074f8 <_malloc_r+0x324>)
 80072fe:	428a      	cmp	r2, r1
 8007300:	d842      	bhi.n	8007388 <_malloc_r+0x1b4>
 8007302:	08d2      	lsrs	r2, r2, #3
 8007304:	39ff      	subs	r1, #255	; 0xff
 8007306:	1096      	asrs	r6, r2, #2
 8007308:	39ff      	subs	r1, #255	; 0xff
 800730a:	40b1      	lsls	r1, r6
 800730c:	6846      	ldr	r6, [r0, #4]
 800730e:	00d2      	lsls	r2, r2, #3
 8007310:	4331      	orrs	r1, r6
 8007312:	6041      	str	r1, [r0, #4]
 8007314:	1810      	adds	r0, r2, r0
 8007316:	6882      	ldr	r2, [r0, #8]
 8007318:	60e0      	str	r0, [r4, #12]
 800731a:	60a2      	str	r2, [r4, #8]
 800731c:	6084      	str	r4, [r0, #8]
 800731e:	60d4      	str	r4, [r2, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	1099      	asrs	r1, r3, #2
 8007324:	408a      	lsls	r2, r1
 8007326:	4972      	ldr	r1, [pc, #456]	; (80074f0 <_malloc_r+0x31c>)
 8007328:	6848      	ldr	r0, [r1, #4]
 800732a:	4282      	cmp	r2, r0
 800732c:	d900      	bls.n	8007330 <_malloc_r+0x15c>
 800732e:	e097      	b.n	8007460 <_malloc_r+0x28c>
 8007330:	4210      	tst	r0, r2
 8007332:	d105      	bne.n	8007340 <_malloc_r+0x16c>
 8007334:	2403      	movs	r4, #3
 8007336:	43a3      	bics	r3, r4
 8007338:	0052      	lsls	r2, r2, #1
 800733a:	3304      	adds	r3, #4
 800733c:	4210      	tst	r0, r2
 800733e:	d0fb      	beq.n	8007338 <_malloc_r+0x164>
 8007340:	469c      	mov	ip, r3
 8007342:	00d8      	lsls	r0, r3, #3
 8007344:	1808      	adds	r0, r1, r0
 8007346:	9002      	str	r0, [sp, #8]
 8007348:	9c02      	ldr	r4, [sp, #8]
 800734a:	68e4      	ldr	r4, [r4, #12]
 800734c:	9e02      	ldr	r6, [sp, #8]
 800734e:	42b4      	cmp	r4, r6
 8007350:	d158      	bne.n	8007404 <_malloc_r+0x230>
 8007352:	0034      	movs	r4, r6
 8007354:	3408      	adds	r4, #8
 8007356:	9402      	str	r4, [sp, #8]
 8007358:	2401      	movs	r4, #1
 800735a:	44a4      	add	ip, r4
 800735c:	4664      	mov	r4, ip
 800735e:	2603      	movs	r6, #3
 8007360:	4234      	tst	r4, r6
 8007362:	d1f1      	bne.n	8007348 <_malloc_r+0x174>
 8007364:	2403      	movs	r4, #3
 8007366:	4223      	tst	r3, r4
 8007368:	d174      	bne.n	8007454 <_malloc_r+0x280>
 800736a:	684b      	ldr	r3, [r1, #4]
 800736c:	4393      	bics	r3, r2
 800736e:	604b      	str	r3, [r1, #4]
 8007370:	6848      	ldr	r0, [r1, #4]
 8007372:	0052      	lsls	r2, r2, #1
 8007374:	4282      	cmp	r2, r0
 8007376:	d873      	bhi.n	8007460 <_malloc_r+0x28c>
 8007378:	2a00      	cmp	r2, #0
 800737a:	d071      	beq.n	8007460 <_malloc_r+0x28c>
 800737c:	4663      	mov	r3, ip
 800737e:	4210      	tst	r0, r2
 8007380:	d1de      	bne.n	8007340 <_malloc_r+0x16c>
 8007382:	3304      	adds	r3, #4
 8007384:	0052      	lsls	r2, r2, #1
 8007386:	e7fa      	b.n	800737e <_malloc_r+0x1aa>
 8007388:	0a56      	lsrs	r6, r2, #9
 800738a:	2e04      	cmp	r6, #4
 800738c:	d816      	bhi.n	80073bc <_malloc_r+0x1e8>
 800738e:	0991      	lsrs	r1, r2, #6
 8007390:	3138      	adds	r1, #56	; 0x38
 8007392:	00cf      	lsls	r7, r1, #3
 8007394:	183e      	adds	r6, r7, r0
 8007396:	2703      	movs	r7, #3
 8007398:	9602      	str	r6, [sp, #8]
 800739a:	46bc      	mov	ip, r7
 800739c:	68b6      	ldr	r6, [r6, #8]
 800739e:	9f02      	ldr	r7, [sp, #8]
 80073a0:	42b7      	cmp	r7, r6
 80073a2:	d127      	bne.n	80073f4 <_malloc_r+0x220>
 80073a4:	2201      	movs	r2, #1
 80073a6:	1089      	asrs	r1, r1, #2
 80073a8:	408a      	lsls	r2, r1
 80073aa:	6841      	ldr	r1, [r0, #4]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	6042      	str	r2, [r0, #4]
 80073b0:	9a02      	ldr	r2, [sp, #8]
 80073b2:	60a6      	str	r6, [r4, #8]
 80073b4:	60e2      	str	r2, [r4, #12]
 80073b6:	6094      	str	r4, [r2, #8]
 80073b8:	60f4      	str	r4, [r6, #12]
 80073ba:	e7b1      	b.n	8007320 <_malloc_r+0x14c>
 80073bc:	2e14      	cmp	r6, #20
 80073be:	d802      	bhi.n	80073c6 <_malloc_r+0x1f2>
 80073c0:	0031      	movs	r1, r6
 80073c2:	315b      	adds	r1, #91	; 0x5b
 80073c4:	e7e5      	b.n	8007392 <_malloc_r+0x1be>
 80073c6:	2e54      	cmp	r6, #84	; 0x54
 80073c8:	d802      	bhi.n	80073d0 <_malloc_r+0x1fc>
 80073ca:	0b11      	lsrs	r1, r2, #12
 80073cc:	316e      	adds	r1, #110	; 0x6e
 80073ce:	e7e0      	b.n	8007392 <_malloc_r+0x1be>
 80073d0:	21aa      	movs	r1, #170	; 0xaa
 80073d2:	0049      	lsls	r1, r1, #1
 80073d4:	428e      	cmp	r6, r1
 80073d6:	d802      	bhi.n	80073de <_malloc_r+0x20a>
 80073d8:	0bd1      	lsrs	r1, r2, #15
 80073da:	3177      	adds	r1, #119	; 0x77
 80073dc:	e7d9      	b.n	8007392 <_malloc_r+0x1be>
 80073de:	4f45      	ldr	r7, [pc, #276]	; (80074f4 <_malloc_r+0x320>)
 80073e0:	217e      	movs	r1, #126	; 0x7e
 80073e2:	42be      	cmp	r6, r7
 80073e4:	d8d5      	bhi.n	8007392 <_malloc_r+0x1be>
 80073e6:	0c91      	lsrs	r1, r2, #18
 80073e8:	317c      	adds	r1, #124	; 0x7c
 80073ea:	e7d2      	b.n	8007392 <_malloc_r+0x1be>
 80073ec:	68b6      	ldr	r6, [r6, #8]
 80073ee:	9902      	ldr	r1, [sp, #8]
 80073f0:	42b1      	cmp	r1, r6
 80073f2:	d004      	beq.n	80073fe <_malloc_r+0x22a>
 80073f4:	4660      	mov	r0, ip
 80073f6:	6871      	ldr	r1, [r6, #4]
 80073f8:	4381      	bics	r1, r0
 80073fa:	428a      	cmp	r2, r1
 80073fc:	d3f6      	bcc.n	80073ec <_malloc_r+0x218>
 80073fe:	68f2      	ldr	r2, [r6, #12]
 8007400:	9202      	str	r2, [sp, #8]
 8007402:	e7d5      	b.n	80073b0 <_malloc_r+0x1dc>
 8007404:	2603      	movs	r6, #3
 8007406:	6867      	ldr	r7, [r4, #4]
 8007408:	43b7      	bics	r7, r6
 800740a:	9703      	str	r7, [sp, #12]
 800740c:	1b7e      	subs	r6, r7, r5
 800740e:	2e0f      	cmp	r6, #15
 8007410:	dd11      	ble.n	8007436 <_malloc_r+0x262>
 8007412:	2201      	movs	r2, #1
 8007414:	1963      	adds	r3, r4, r5
 8007416:	4315      	orrs	r5, r2
 8007418:	6065      	str	r5, [r4, #4]
 800741a:	68e0      	ldr	r0, [r4, #12]
 800741c:	68a5      	ldr	r5, [r4, #8]
 800741e:	3108      	adds	r1, #8
 8007420:	60e8      	str	r0, [r5, #12]
 8007422:	4332      	orrs	r2, r6
 8007424:	6085      	str	r5, [r0, #8]
 8007426:	60cb      	str	r3, [r1, #12]
 8007428:	608b      	str	r3, [r1, #8]
 800742a:	60d9      	str	r1, [r3, #12]
 800742c:	6099      	str	r1, [r3, #8]
 800742e:	605a      	str	r2, [r3, #4]
 8007430:	003b      	movs	r3, r7
 8007432:	50e6      	str	r6, [r4, r3]
 8007434:	e703      	b.n	800723e <_malloc_r+0x6a>
 8007436:	68e7      	ldr	r7, [r4, #12]
 8007438:	2e00      	cmp	r6, #0
 800743a:	db09      	blt.n	8007450 <_malloc_r+0x27c>
 800743c:	2201      	movs	r2, #1
 800743e:	9b03      	ldr	r3, [sp, #12]
 8007440:	18e3      	adds	r3, r4, r3
 8007442:	6859      	ldr	r1, [r3, #4]
 8007444:	430a      	orrs	r2, r1
 8007446:	605a      	str	r2, [r3, #4]
 8007448:	68a3      	ldr	r3, [r4, #8]
 800744a:	60df      	str	r7, [r3, #12]
 800744c:	60bb      	str	r3, [r7, #8]
 800744e:	e6f6      	b.n	800723e <_malloc_r+0x6a>
 8007450:	003c      	movs	r4, r7
 8007452:	e77b      	b.n	800734c <_malloc_r+0x178>
 8007454:	3808      	subs	r0, #8
 8007456:	6884      	ldr	r4, [r0, #8]
 8007458:	3b01      	subs	r3, #1
 800745a:	42a0      	cmp	r0, r4
 800745c:	d082      	beq.n	8007364 <_malloc_r+0x190>
 800745e:	e787      	b.n	8007370 <_malloc_r+0x19c>
 8007460:	2303      	movs	r3, #3
 8007462:	688f      	ldr	r7, [r1, #8]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	439a      	bics	r2, r3
 8007468:	9202      	str	r2, [sp, #8]
 800746a:	4295      	cmp	r5, r2
 800746c:	d803      	bhi.n	8007476 <_malloc_r+0x2a2>
 800746e:	1b52      	subs	r2, r2, r5
 8007470:	2a0f      	cmp	r2, #15
 8007472:	dd00      	ble.n	8007476 <_malloc_r+0x2a2>
 8007474:	e09f      	b.n	80075b6 <_malloc_r+0x3e2>
 8007476:	9b02      	ldr	r3, [sp, #8]
 8007478:	18fb      	adds	r3, r7, r3
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	4b1f      	ldr	r3, [pc, #124]	; (80074fc <_malloc_r+0x328>)
 800747e:	681e      	ldr	r6, [r3, #0]
 8007480:	4b1f      	ldr	r3, [pc, #124]	; (8007500 <_malloc_r+0x32c>)
 8007482:	3610      	adds	r6, #16
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	1976      	adds	r6, r6, r5
 8007488:	3301      	adds	r3, #1
 800748a:	d005      	beq.n	8007498 <_malloc_r+0x2c4>
 800748c:	4b1d      	ldr	r3, [pc, #116]	; (8007504 <_malloc_r+0x330>)
 800748e:	3b01      	subs	r3, #1
 8007490:	199e      	adds	r6, r3, r6
 8007492:	4b1c      	ldr	r3, [pc, #112]	; (8007504 <_malloc_r+0x330>)
 8007494:	425b      	negs	r3, r3
 8007496:	401e      	ands	r6, r3
 8007498:	0031      	movs	r1, r6
 800749a:	9801      	ldr	r0, [sp, #4]
 800749c:	f000 f8c0 	bl	8007620 <_sbrk_r>
 80074a0:	0004      	movs	r4, r0
 80074a2:	1c43      	adds	r3, r0, #1
 80074a4:	d05f      	beq.n	8007566 <_malloc_r+0x392>
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	4283      	cmp	r3, r0
 80074aa:	d902      	bls.n	80074b2 <_malloc_r+0x2de>
 80074ac:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <_malloc_r+0x31c>)
 80074ae:	429f      	cmp	r7, r3
 80074b0:	d159      	bne.n	8007566 <_malloc_r+0x392>
 80074b2:	4b15      	ldr	r3, [pc, #84]	; (8007508 <_malloc_r+0x334>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	18b1      	adds	r1, r6, r2
 80074b8:	6019      	str	r1, [r3, #0]
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <_malloc_r+0x330>)
 80074bc:	1e5a      	subs	r2, r3, #1
 80074be:	9b03      	ldr	r3, [sp, #12]
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	d127      	bne.n	8007514 <_malloc_r+0x340>
 80074c4:	4213      	tst	r3, r2
 80074c6:	d125      	bne.n	8007514 <_malloc_r+0x340>
 80074c8:	9a02      	ldr	r2, [sp, #8]
 80074ca:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <_malloc_r+0x31c>)
 80074cc:	1992      	adds	r2, r2, r6
 80074ce:	2601      	movs	r6, #1
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	4316      	orrs	r6, r2
 80074d4:	605e      	str	r6, [r3, #4]
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <_malloc_r+0x334>)
 80074d8:	4a0c      	ldr	r2, [pc, #48]	; (800750c <_malloc_r+0x338>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6811      	ldr	r1, [r2, #0]
 80074de:	428b      	cmp	r3, r1
 80074e0:	d900      	bls.n	80074e4 <_malloc_r+0x310>
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	4a0a      	ldr	r2, [pc, #40]	; (8007510 <_malloc_r+0x33c>)
 80074e6:	6811      	ldr	r1, [r2, #0]
 80074e8:	428b      	cmp	r3, r1
 80074ea:	d93c      	bls.n	8007566 <_malloc_r+0x392>
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	e03a      	b.n	8007566 <_malloc_r+0x392>
 80074f0:	200000f8 	.word	0x200000f8
 80074f4:	00000554 	.word	0x00000554
 80074f8:	000001ff 	.word	0x000001ff
 80074fc:	200006c0 	.word	0x200006c0
 8007500:	20000500 	.word	0x20000500
 8007504:	00000080 	.word	0x00000080
 8007508:	20000690 	.word	0x20000690
 800750c:	200006b8 	.word	0x200006b8
 8007510:	200006bc 	.word	0x200006bc
 8007514:	4b2d      	ldr	r3, [pc, #180]	; (80075cc <_malloc_r+0x3f8>)
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	3001      	adds	r0, #1
 800751a:	d132      	bne.n	8007582 <_malloc_r+0x3ae>
 800751c:	601c      	str	r4, [r3, #0]
 800751e:	2007      	movs	r0, #7
 8007520:	4020      	ands	r0, r4
 8007522:	d002      	beq.n	800752a <_malloc_r+0x356>
 8007524:	2308      	movs	r3, #8
 8007526:	1a18      	subs	r0, r3, r0
 8007528:	1824      	adds	r4, r4, r0
 800752a:	4b29      	ldr	r3, [pc, #164]	; (80075d0 <_malloc_r+0x3fc>)
 800752c:	19a6      	adds	r6, r4, r6
 800752e:	1818      	adds	r0, r3, r0
 8007530:	4016      	ands	r6, r2
 8007532:	1b86      	subs	r6, r0, r6
 8007534:	0031      	movs	r1, r6
 8007536:	9801      	ldr	r0, [sp, #4]
 8007538:	f000 f872 	bl	8007620 <_sbrk_r>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d101      	bne.n	8007544 <_malloc_r+0x370>
 8007540:	0020      	movs	r0, r4
 8007542:	2600      	movs	r6, #0
 8007544:	4a23      	ldr	r2, [pc, #140]	; (80075d4 <_malloc_r+0x400>)
 8007546:	1b00      	subs	r0, r0, r4
 8007548:	6813      	ldr	r3, [r2, #0]
 800754a:	199b      	adds	r3, r3, r6
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	2301      	movs	r3, #1
 8007550:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <_malloc_r+0x404>)
 8007552:	1986      	adds	r6, r0, r6
 8007554:	431e      	orrs	r6, r3
 8007556:	6094      	str	r4, [r2, #8]
 8007558:	6066      	str	r6, [r4, #4]
 800755a:	4297      	cmp	r7, r2
 800755c:	d0bb      	beq.n	80074d6 <_malloc_r+0x302>
 800755e:	9a02      	ldr	r2, [sp, #8]
 8007560:	2a0f      	cmp	r2, #15
 8007562:	d814      	bhi.n	800758e <_malloc_r+0x3ba>
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	2203      	movs	r2, #3
 8007568:	4b1b      	ldr	r3, [pc, #108]	; (80075d8 <_malloc_r+0x404>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	4393      	bics	r3, r2
 8007570:	1b5a      	subs	r2, r3, r5
 8007572:	429d      	cmp	r5, r3
 8007574:	d801      	bhi.n	800757a <_malloc_r+0x3a6>
 8007576:	2a0f      	cmp	r2, #15
 8007578:	dc1d      	bgt.n	80075b6 <_malloc_r+0x3e2>
 800757a:	9801      	ldr	r0, [sp, #4]
 800757c:	f000 f848 	bl	8007610 <__malloc_unlock>
 8007580:	e635      	b.n	80071ee <_malloc_r+0x1a>
 8007582:	9b03      	ldr	r3, [sp, #12]
 8007584:	1ae3      	subs	r3, r4, r3
 8007586:	185b      	adds	r3, r3, r1
 8007588:	4912      	ldr	r1, [pc, #72]	; (80075d4 <_malloc_r+0x400>)
 800758a:	600b      	str	r3, [r1, #0]
 800758c:	e7c7      	b.n	800751e <_malloc_r+0x34a>
 800758e:	2207      	movs	r2, #7
 8007590:	9e02      	ldr	r6, [sp, #8]
 8007592:	3e0c      	subs	r6, #12
 8007594:	4396      	bics	r6, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	4013      	ands	r3, r2
 800759a:	2205      	movs	r2, #5
 800759c:	4333      	orrs	r3, r6
 800759e:	607b      	str	r3, [r7, #4]
 80075a0:	19bb      	adds	r3, r7, r6
 80075a2:	605a      	str	r2, [r3, #4]
 80075a4:	609a      	str	r2, [r3, #8]
 80075a6:	2e0f      	cmp	r6, #15
 80075a8:	d995      	bls.n	80074d6 <_malloc_r+0x302>
 80075aa:	0039      	movs	r1, r7
 80075ac:	9801      	ldr	r0, [sp, #4]
 80075ae:	3108      	adds	r1, #8
 80075b0:	f001 f824 	bl	80085fc <_free_r>
 80075b4:	e78f      	b.n	80074d6 <_malloc_r+0x302>
 80075b6:	2301      	movs	r3, #1
 80075b8:	0018      	movs	r0, r3
 80075ba:	4907      	ldr	r1, [pc, #28]	; (80075d8 <_malloc_r+0x404>)
 80075bc:	4328      	orrs	r0, r5
 80075be:	688c      	ldr	r4, [r1, #8]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	1965      	adds	r5, r4, r5
 80075c4:	6060      	str	r0, [r4, #4]
 80075c6:	608d      	str	r5, [r1, #8]
 80075c8:	606b      	str	r3, [r5, #4]
 80075ca:	e638      	b.n	800723e <_malloc_r+0x6a>
 80075cc:	20000500 	.word	0x20000500
 80075d0:	00000080 	.word	0x00000080
 80075d4:	20000690 	.word	0x20000690
 80075d8:	200000f8 	.word	0x200000f8

080075dc <memcpy>:
 80075dc:	2300      	movs	r3, #0
 80075de:	b510      	push	{r4, lr}
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d100      	bne.n	80075e6 <memcpy+0xa>
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	5ccc      	ldrb	r4, [r1, r3]
 80075e8:	54c4      	strb	r4, [r0, r3]
 80075ea:	3301      	adds	r3, #1
 80075ec:	e7f8      	b.n	80075e0 <memcpy+0x4>

080075ee <memset>:
 80075ee:	0003      	movs	r3, r0
 80075f0:	1882      	adds	r2, r0, r2
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d100      	bne.n	80075f8 <memset+0xa>
 80075f6:	4770      	bx	lr
 80075f8:	7019      	strb	r1, [r3, #0]
 80075fa:	3301      	adds	r3, #1
 80075fc:	e7f9      	b.n	80075f2 <memset+0x4>
	...

08007600 <__malloc_lock>:
 8007600:	b510      	push	{r4, lr}
 8007602:	4802      	ldr	r0, [pc, #8]	; (800760c <__malloc_lock+0xc>)
 8007604:	f001 fbde 	bl	8008dc4 <__retarget_lock_acquire_recursive>
 8007608:	bd10      	pop	{r4, pc}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	20000a3c 	.word	0x20000a3c

08007610 <__malloc_unlock>:
 8007610:	b510      	push	{r4, lr}
 8007612:	4802      	ldr	r0, [pc, #8]	; (800761c <__malloc_unlock+0xc>)
 8007614:	f001 fbd7 	bl	8008dc6 <__retarget_lock_release_recursive>
 8007618:	bd10      	pop	{r4, pc}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	20000a3c 	.word	0x20000a3c

08007620 <_sbrk_r>:
 8007620:	2300      	movs	r3, #0
 8007622:	b570      	push	{r4, r5, r6, lr}
 8007624:	4c06      	ldr	r4, [pc, #24]	; (8007640 <_sbrk_r+0x20>)
 8007626:	0005      	movs	r5, r0
 8007628:	0008      	movs	r0, r1
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	f001 fffe 	bl	800962c <_sbrk>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d103      	bne.n	800763c <_sbrk_r+0x1c>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d000      	beq.n	800763c <_sbrk_r+0x1c>
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	bd70      	pop	{r4, r5, r6, pc}
 800763e:	46c0      	nop			; (mov r8, r8)
 8007640:	20000a44 	.word	0x20000a44

08007644 <strchr>:
 8007644:	b2c9      	uxtb	r1, r1
 8007646:	7803      	ldrb	r3, [r0, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <strchr+0x12>
 800764c:	4299      	cmp	r1, r3
 800764e:	d100      	bne.n	8007652 <strchr+0xe>
 8007650:	4770      	bx	lr
 8007652:	3001      	adds	r0, #1
 8007654:	e7f7      	b.n	8007646 <strchr+0x2>
 8007656:	424b      	negs	r3, r1
 8007658:	4159      	adcs	r1, r3
 800765a:	4249      	negs	r1, r1
 800765c:	4008      	ands	r0, r1
 800765e:	e7f7      	b.n	8007650 <strchr+0xc>

08007660 <strstr>:
 8007660:	b510      	push	{r4, lr}
 8007662:	0002      	movs	r2, r0
 8007664:	7800      	ldrb	r0, [r0, #0]
 8007666:	2800      	cmp	r0, #0
 8007668:	d104      	bne.n	8007674 <strstr+0x14>
 800766a:	7809      	ldrb	r1, [r1, #0]
 800766c:	2900      	cmp	r1, #0
 800766e:	d00d      	beq.n	800768c <strstr+0x2c>
 8007670:	bd10      	pop	{r4, pc}
 8007672:	3201      	adds	r2, #1
 8007674:	7810      	ldrb	r0, [r2, #0]
 8007676:	2800      	cmp	r0, #0
 8007678:	d0fa      	beq.n	8007670 <strstr+0x10>
 800767a:	2300      	movs	r3, #0
 800767c:	5cc8      	ldrb	r0, [r1, r3]
 800767e:	2800      	cmp	r0, #0
 8007680:	d004      	beq.n	800768c <strstr+0x2c>
 8007682:	5cd4      	ldrb	r4, [r2, r3]
 8007684:	4284      	cmp	r4, r0
 8007686:	d1f4      	bne.n	8007672 <strstr+0x12>
 8007688:	3301      	adds	r3, #1
 800768a:	e7f7      	b.n	800767c <strstr+0x1c>
 800768c:	0010      	movs	r0, r2
 800768e:	e7ef      	b.n	8007670 <strstr+0x10>

08007690 <sulp>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	0016      	movs	r6, r2
 8007694:	000d      	movs	r5, r1
 8007696:	f001 fe81 	bl	800939c <__ulp>
 800769a:	2e00      	cmp	r6, #0
 800769c:	d00d      	beq.n	80076ba <sulp+0x2a>
 800769e:	236b      	movs	r3, #107	; 0x6b
 80076a0:	006a      	lsls	r2, r5, #1
 80076a2:	0d52      	lsrs	r2, r2, #21
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	dd07      	ble.n	80076ba <sulp+0x2a>
 80076aa:	2400      	movs	r4, #0
 80076ac:	4a03      	ldr	r2, [pc, #12]	; (80076bc <sulp+0x2c>)
 80076ae:	051b      	lsls	r3, r3, #20
 80076b0:	189d      	adds	r5, r3, r2
 80076b2:	002b      	movs	r3, r5
 80076b4:	0022      	movs	r2, r4
 80076b6:	f7fa fcef 	bl	8002098 <__aeabi_dmul>
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	3ff00000 	.word	0x3ff00000

080076c0 <_strtod_l>:
 80076c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c2:	b0a5      	sub	sp, #148	; 0x94
 80076c4:	9307      	str	r3, [sp, #28]
 80076c6:	2300      	movs	r3, #0
 80076c8:	9004      	str	r0, [sp, #16]
 80076ca:	9807      	ldr	r0, [sp, #28]
 80076cc:	9320      	str	r3, [sp, #128]	; 0x80
 80076ce:	9106      	str	r1, [sp, #24]
 80076d0:	921a      	str	r2, [sp, #104]	; 0x68
 80076d2:	f001 fb75 	bl	8008dc0 <__localeconv_l>
 80076d6:	0005      	movs	r5, r0
 80076d8:	6800      	ldr	r0, [r0, #0]
 80076da:	f7f8 fd15 	bl	8000108 <strlen>
 80076de:	2600      	movs	r6, #0
 80076e0:	2700      	movs	r7, #0
 80076e2:	9b06      	ldr	r3, [sp, #24]
 80076e4:	9005      	str	r0, [sp, #20]
 80076e6:	931f      	str	r3, [sp, #124]	; 0x7c
 80076e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	2a0d      	cmp	r2, #13
 80076ee:	d839      	bhi.n	8007764 <_strtod_l+0xa4>
 80076f0:	2a09      	cmp	r2, #9
 80076f2:	d23d      	bcs.n	8007770 <_strtod_l+0xb0>
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	d044      	beq.n	8007782 <_strtod_l+0xc2>
 80076f8:	2300      	movs	r3, #0
 80076fa:	9312      	str	r3, [sp, #72]	; 0x48
 80076fc:	2200      	movs	r2, #0
 80076fe:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8007700:	920c      	str	r2, [sp, #48]	; 0x30
 8007702:	7823      	ldrb	r3, [r4, #0]
 8007704:	2b30      	cmp	r3, #48	; 0x30
 8007706:	d000      	beq.n	800770a <_strtod_l+0x4a>
 8007708:	e07e      	b.n	8007808 <_strtod_l+0x148>
 800770a:	7863      	ldrb	r3, [r4, #1]
 800770c:	2b58      	cmp	r3, #88	; 0x58
 800770e:	d002      	beq.n	8007716 <_strtod_l+0x56>
 8007710:	2b78      	cmp	r3, #120	; 0x78
 8007712:	d000      	beq.n	8007716 <_strtod_l+0x56>
 8007714:	e06e      	b.n	80077f4 <_strtod_l+0x134>
 8007716:	9b07      	ldr	r3, [sp, #28]
 8007718:	4ab7      	ldr	r2, [pc, #732]	; (80079f8 <_strtod_l+0x338>)
 800771a:	9302      	str	r3, [sp, #8]
 800771c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800771e:	a91f      	add	r1, sp, #124	; 0x7c
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	ab20      	add	r3, sp, #128	; 0x80
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	9804      	ldr	r0, [sp, #16]
 8007728:	ab21      	add	r3, sp, #132	; 0x84
 800772a:	f001 f862 	bl	80087f2 <__gethex>
 800772e:	2507      	movs	r5, #7
 8007730:	9005      	str	r0, [sp, #20]
 8007732:	4005      	ands	r5, r0
 8007734:	d005      	beq.n	8007742 <_strtod_l+0x82>
 8007736:	2d06      	cmp	r5, #6
 8007738:	d12f      	bne.n	800779a <_strtod_l+0xda>
 800773a:	2300      	movs	r3, #0
 800773c:	3401      	adds	r4, #1
 800773e:	941f      	str	r4, [sp, #124]	; 0x7c
 8007740:	9312      	str	r3, [sp, #72]	; 0x48
 8007742:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <_strtod_l+0x8e>
 8007748:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800774a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007750:	2b00      	cmp	r3, #0
 8007752:	d01d      	beq.n	8007790 <_strtod_l+0xd0>
 8007754:	2380      	movs	r3, #128	; 0x80
 8007756:	0032      	movs	r2, r6
 8007758:	061b      	lsls	r3, r3, #24
 800775a:	18fb      	adds	r3, r7, r3
 800775c:	0010      	movs	r0, r2
 800775e:	0019      	movs	r1, r3
 8007760:	b025      	add	sp, #148	; 0x94
 8007762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007764:	2a2b      	cmp	r2, #43	; 0x2b
 8007766:	d005      	beq.n	8007774 <_strtod_l+0xb4>
 8007768:	2a2d      	cmp	r2, #45	; 0x2d
 800776a:	d014      	beq.n	8007796 <_strtod_l+0xd6>
 800776c:	2a20      	cmp	r2, #32
 800776e:	d1c3      	bne.n	80076f8 <_strtod_l+0x38>
 8007770:	3301      	adds	r3, #1
 8007772:	e7b8      	b.n	80076e6 <_strtod_l+0x26>
 8007774:	2200      	movs	r2, #0
 8007776:	9212      	str	r2, [sp, #72]	; 0x48
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	921f      	str	r2, [sp, #124]	; 0x7c
 800777c:	785b      	ldrb	r3, [r3, #1]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1bc      	bne.n	80076fc <_strtod_l+0x3c>
 8007782:	9b06      	ldr	r3, [sp, #24]
 8007784:	931f      	str	r3, [sp, #124]	; 0x7c
 8007786:	2300      	movs	r3, #0
 8007788:	9312      	str	r3, [sp, #72]	; 0x48
 800778a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1db      	bne.n	8007748 <_strtod_l+0x88>
 8007790:	0032      	movs	r2, r6
 8007792:	003b      	movs	r3, r7
 8007794:	e7e2      	b.n	800775c <_strtod_l+0x9c>
 8007796:	2201      	movs	r2, #1
 8007798:	e7ed      	b.n	8007776 <_strtod_l+0xb6>
 800779a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800779c:	2a00      	cmp	r2, #0
 800779e:	d007      	beq.n	80077b0 <_strtod_l+0xf0>
 80077a0:	2135      	movs	r1, #53	; 0x35
 80077a2:	a822      	add	r0, sp, #136	; 0x88
 80077a4:	f001 fee7 	bl	8009576 <__copybits>
 80077a8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80077aa:	9804      	ldr	r0, [sp, #16]
 80077ac:	f001 fb60 	bl	8008e70 <_Bfree>
 80077b0:	1e68      	subs	r0, r5, #1
 80077b2:	2804      	cmp	r0, #4
 80077b4:	d806      	bhi.n	80077c4 <_strtod_l+0x104>
 80077b6:	f7f8 fcaf 	bl	8000118 <__gnu_thumb1_case_uqi>
 80077ba:	030c      	.short	0x030c
 80077bc:	1917      	.short	0x1917
 80077be:	0c          	.byte	0x0c
 80077bf:	00          	.byte	0x00
 80077c0:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80077c2:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 80077c4:	9b05      	ldr	r3, [sp, #20]
 80077c6:	071b      	lsls	r3, r3, #28
 80077c8:	d5bb      	bpl.n	8007742 <_strtod_l+0x82>
 80077ca:	2380      	movs	r3, #128	; 0x80
 80077cc:	061b      	lsls	r3, r3, #24
 80077ce:	431f      	orrs	r7, r3
 80077d0:	e7b7      	b.n	8007742 <_strtod_l+0x82>
 80077d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077d4:	4a89      	ldr	r2, [pc, #548]	; (80079fc <_strtod_l+0x33c>)
 80077d6:	498a      	ldr	r1, [pc, #552]	; (8007a00 <_strtod_l+0x340>)
 80077d8:	401a      	ands	r2, r3
 80077da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077dc:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80077de:	185b      	adds	r3, r3, r1
 80077e0:	051b      	lsls	r3, r3, #20
 80077e2:	431a      	orrs	r2, r3
 80077e4:	0017      	movs	r7, r2
 80077e6:	e7ed      	b.n	80077c4 <_strtod_l+0x104>
 80077e8:	4f86      	ldr	r7, [pc, #536]	; (8007a04 <_strtod_l+0x344>)
 80077ea:	e7eb      	b.n	80077c4 <_strtod_l+0x104>
 80077ec:	2601      	movs	r6, #1
 80077ee:	4f86      	ldr	r7, [pc, #536]	; (8007a08 <_strtod_l+0x348>)
 80077f0:	4276      	negs	r6, r6
 80077f2:	e7e7      	b.n	80077c4 <_strtod_l+0x104>
 80077f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077f6:	1c5a      	adds	r2, r3, #1
 80077f8:	921f      	str	r2, [sp, #124]	; 0x7c
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b30      	cmp	r3, #48	; 0x30
 80077fe:	d0f9      	beq.n	80077f4 <_strtod_l+0x134>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d09e      	beq.n	8007742 <_strtod_l+0x82>
 8007804:	2301      	movs	r3, #1
 8007806:	930c      	str	r3, [sp, #48]	; 0x30
 8007808:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800780a:	220a      	movs	r2, #10
 800780c:	9313      	str	r3, [sp, #76]	; 0x4c
 800780e:	2300      	movs	r3, #0
 8007810:	930b      	str	r3, [sp, #44]	; 0x2c
 8007812:	930a      	str	r3, [sp, #40]	; 0x28
 8007814:	9308      	str	r3, [sp, #32]
 8007816:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007818:	7804      	ldrb	r4, [r0, #0]
 800781a:	0023      	movs	r3, r4
 800781c:	3b30      	subs	r3, #48	; 0x30
 800781e:	b2d9      	uxtb	r1, r3
 8007820:	2909      	cmp	r1, #9
 8007822:	d926      	bls.n	8007872 <_strtod_l+0x1b2>
 8007824:	9a05      	ldr	r2, [sp, #20]
 8007826:	6829      	ldr	r1, [r5, #0]
 8007828:	f001 fee2 	bl	80095f0 <strncmp>
 800782c:	2800      	cmp	r0, #0
 800782e:	d032      	beq.n	8007896 <_strtod_l+0x1d6>
 8007830:	2000      	movs	r0, #0
 8007832:	0023      	movs	r3, r4
 8007834:	4684      	mov	ip, r0
 8007836:	9a08      	ldr	r2, [sp, #32]
 8007838:	9007      	str	r0, [sp, #28]
 800783a:	9205      	str	r2, [sp, #20]
 800783c:	2220      	movs	r2, #32
 800783e:	0019      	movs	r1, r3
 8007840:	4391      	bics	r1, r2
 8007842:	000a      	movs	r2, r1
 8007844:	2100      	movs	r1, #0
 8007846:	2a45      	cmp	r2, #69	; 0x45
 8007848:	d000      	beq.n	800784c <_strtod_l+0x18c>
 800784a:	e0a8      	b.n	800799e <_strtod_l+0x2de>
 800784c:	9b05      	ldr	r3, [sp, #20]
 800784e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007850:	4303      	orrs	r3, r0
 8007852:	4313      	orrs	r3, r2
 8007854:	428b      	cmp	r3, r1
 8007856:	d094      	beq.n	8007782 <_strtod_l+0xc2>
 8007858:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800785a:	9306      	str	r3, [sp, #24]
 800785c:	3301      	adds	r3, #1
 800785e:	931f      	str	r3, [sp, #124]	; 0x7c
 8007860:	9b06      	ldr	r3, [sp, #24]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b2b      	cmp	r3, #43	; 0x2b
 8007866:	d072      	beq.n	800794e <_strtod_l+0x28e>
 8007868:	000c      	movs	r4, r1
 800786a:	2b2d      	cmp	r3, #45	; 0x2d
 800786c:	d175      	bne.n	800795a <_strtod_l+0x29a>
 800786e:	2401      	movs	r4, #1
 8007870:	e06e      	b.n	8007950 <_strtod_l+0x290>
 8007872:	9908      	ldr	r1, [sp, #32]
 8007874:	2908      	cmp	r1, #8
 8007876:	dc09      	bgt.n	800788c <_strtod_l+0x1cc>
 8007878:	990a      	ldr	r1, [sp, #40]	; 0x28
 800787a:	4351      	muls	r1, r2
 800787c:	185b      	adds	r3, r3, r1
 800787e:	930a      	str	r3, [sp, #40]	; 0x28
 8007880:	9b08      	ldr	r3, [sp, #32]
 8007882:	3001      	adds	r0, #1
 8007884:	3301      	adds	r3, #1
 8007886:	9308      	str	r3, [sp, #32]
 8007888:	901f      	str	r0, [sp, #124]	; 0x7c
 800788a:	e7c4      	b.n	8007816 <_strtod_l+0x156>
 800788c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800788e:	4351      	muls	r1, r2
 8007890:	185b      	adds	r3, r3, r1
 8007892:	930b      	str	r3, [sp, #44]	; 0x2c
 8007894:	e7f4      	b.n	8007880 <_strtod_l+0x1c0>
 8007896:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007898:	9b05      	ldr	r3, [sp, #20]
 800789a:	4694      	mov	ip, r2
 800789c:	9a08      	ldr	r2, [sp, #32]
 800789e:	4463      	add	r3, ip
 80078a0:	931f      	str	r3, [sp, #124]	; 0x7c
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	d149      	bne.n	800793c <_strtod_l+0x27c>
 80078a8:	0010      	movs	r0, r2
 80078aa:	2b30      	cmp	r3, #48	; 0x30
 80078ac:	d028      	beq.n	8007900 <_strtod_l+0x240>
 80078ae:	001a      	movs	r2, r3
 80078b0:	3a31      	subs	r2, #49	; 0x31
 80078b2:	2a08      	cmp	r2, #8
 80078b4:	d846      	bhi.n	8007944 <_strtod_l+0x284>
 80078b6:	4684      	mov	ip, r0
 80078b8:	2000      	movs	r0, #0
 80078ba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80078bc:	9005      	str	r0, [sp, #20]
 80078be:	9213      	str	r2, [sp, #76]	; 0x4c
 80078c0:	3b30      	subs	r3, #48	; 0x30
 80078c2:	1c42      	adds	r2, r0, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00f      	beq.n	80078e8 <_strtod_l+0x228>
 80078c8:	210a      	movs	r1, #10
 80078ca:	4494      	add	ip, r2
 80078cc:	9a05      	ldr	r2, [sp, #20]
 80078ce:	1810      	adds	r0, r2, r0
 80078d0:	4282      	cmp	r2, r0
 80078d2:	d11b      	bne.n	800790c <_strtod_l+0x24c>
 80078d4:	1c51      	adds	r1, r2, #1
 80078d6:	9105      	str	r1, [sp, #20]
 80078d8:	2a08      	cmp	r2, #8
 80078da:	dc25      	bgt.n	8007928 <_strtod_l+0x268>
 80078dc:	220a      	movs	r2, #10
 80078de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80078e0:	434a      	muls	r2, r1
 80078e2:	189b      	adds	r3, r3, r2
 80078e4:	2200      	movs	r2, #0
 80078e6:	930a      	str	r3, [sp, #40]	; 0x28
 80078e8:	0010      	movs	r0, r2
 80078ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80078ec:	1c59      	adds	r1, r3, #1
 80078ee:	911f      	str	r1, [sp, #124]	; 0x7c
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	001a      	movs	r2, r3
 80078f4:	3a30      	subs	r2, #48	; 0x30
 80078f6:	2a09      	cmp	r2, #9
 80078f8:	d9e2      	bls.n	80078c0 <_strtod_l+0x200>
 80078fa:	2201      	movs	r2, #1
 80078fc:	9207      	str	r2, [sp, #28]
 80078fe:	e79d      	b.n	800783c <_strtod_l+0x17c>
 8007900:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007902:	3001      	adds	r0, #1
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	921f      	str	r2, [sp, #124]	; 0x7c
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	e7ce      	b.n	80078aa <_strtod_l+0x1ea>
 800790c:	3201      	adds	r2, #1
 800790e:	1e54      	subs	r4, r2, #1
 8007910:	2c08      	cmp	r4, #8
 8007912:	dc03      	bgt.n	800791c <_strtod_l+0x25c>
 8007914:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007916:	434c      	muls	r4, r1
 8007918:	940a      	str	r4, [sp, #40]	; 0x28
 800791a:	e7d9      	b.n	80078d0 <_strtod_l+0x210>
 800791c:	2a10      	cmp	r2, #16
 800791e:	dcd7      	bgt.n	80078d0 <_strtod_l+0x210>
 8007920:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007922:	434c      	muls	r4, r1
 8007924:	940b      	str	r4, [sp, #44]	; 0x2c
 8007926:	e7d3      	b.n	80078d0 <_strtod_l+0x210>
 8007928:	9905      	ldr	r1, [sp, #20]
 800792a:	2200      	movs	r2, #0
 800792c:	2910      	cmp	r1, #16
 800792e:	dcdb      	bgt.n	80078e8 <_strtod_l+0x228>
 8007930:	210a      	movs	r1, #10
 8007932:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007934:	4341      	muls	r1, r0
 8007936:	185b      	adds	r3, r3, r1
 8007938:	930b      	str	r3, [sp, #44]	; 0x2c
 800793a:	e7d5      	b.n	80078e8 <_strtod_l+0x228>
 800793c:	9a08      	ldr	r2, [sp, #32]
 800793e:	4684      	mov	ip, r0
 8007940:	9205      	str	r2, [sp, #20]
 8007942:	e7d6      	b.n	80078f2 <_strtod_l+0x232>
 8007944:	2200      	movs	r2, #0
 8007946:	4694      	mov	ip, r2
 8007948:	9205      	str	r2, [sp, #20]
 800794a:	3201      	adds	r2, #1
 800794c:	e7d6      	b.n	80078fc <_strtod_l+0x23c>
 800794e:	000c      	movs	r4, r1
 8007950:	9b06      	ldr	r3, [sp, #24]
 8007952:	3302      	adds	r3, #2
 8007954:	931f      	str	r3, [sp, #124]	; 0x7c
 8007956:	9b06      	ldr	r3, [sp, #24]
 8007958:	789b      	ldrb	r3, [r3, #2]
 800795a:	001a      	movs	r2, r3
 800795c:	3a30      	subs	r2, #48	; 0x30
 800795e:	2a09      	cmp	r2, #9
 8007960:	d861      	bhi.n	8007a26 <_strtod_l+0x366>
 8007962:	2b30      	cmp	r3, #48	; 0x30
 8007964:	d042      	beq.n	80079ec <_strtod_l+0x32c>
 8007966:	001a      	movs	r2, r3
 8007968:	3a31      	subs	r2, #49	; 0x31
 800796a:	2100      	movs	r1, #0
 800796c:	2a08      	cmp	r2, #8
 800796e:	d816      	bhi.n	800799e <_strtod_l+0x2de>
 8007970:	3b30      	subs	r3, #48	; 0x30
 8007972:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8007974:	930e      	str	r3, [sp, #56]	; 0x38
 8007976:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007978:	1c59      	adds	r1, r3, #1
 800797a:	911f      	str	r1, [sp, #124]	; 0x7c
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	001a      	movs	r2, r3
 8007980:	3a30      	subs	r2, #48	; 0x30
 8007982:	2a09      	cmp	r2, #9
 8007984:	d948      	bls.n	8007a18 <_strtod_l+0x358>
 8007986:	1b4a      	subs	r2, r1, r5
 8007988:	4d20      	ldr	r5, [pc, #128]	; (8007a0c <_strtod_l+0x34c>)
 800798a:	0029      	movs	r1, r5
 800798c:	2a08      	cmp	r2, #8
 800798e:	dc03      	bgt.n	8007998 <_strtod_l+0x2d8>
 8007990:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007992:	42a9      	cmp	r1, r5
 8007994:	dd00      	ble.n	8007998 <_strtod_l+0x2d8>
 8007996:	0029      	movs	r1, r5
 8007998:	2c00      	cmp	r4, #0
 800799a:	d000      	beq.n	800799e <_strtod_l+0x2de>
 800799c:	4249      	negs	r1, r1
 800799e:	9a05      	ldr	r2, [sp, #20]
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	d163      	bne.n	8007a6c <_strtod_l+0x3ac>
 80079a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079a6:	4310      	orrs	r0, r2
 80079a8:	d000      	beq.n	80079ac <_strtod_l+0x2ec>
 80079aa:	e6ca      	b.n	8007742 <_strtod_l+0x82>
 80079ac:	9a07      	ldr	r2, [sp, #28]
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	d000      	beq.n	80079b4 <_strtod_l+0x2f4>
 80079b2:	e6e6      	b.n	8007782 <_strtod_l+0xc2>
 80079b4:	2b4e      	cmp	r3, #78	; 0x4e
 80079b6:	d03f      	beq.n	8007a38 <_strtod_l+0x378>
 80079b8:	dc39      	bgt.n	8007a2e <_strtod_l+0x36e>
 80079ba:	2b49      	cmp	r3, #73	; 0x49
 80079bc:	d000      	beq.n	80079c0 <_strtod_l+0x300>
 80079be:	e6e0      	b.n	8007782 <_strtod_l+0xc2>
 80079c0:	4913      	ldr	r1, [pc, #76]	; (8007a10 <_strtod_l+0x350>)
 80079c2:	a81f      	add	r0, sp, #124	; 0x7c
 80079c4:	f001 f94e 	bl	8008c64 <__match>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d100      	bne.n	80079ce <_strtod_l+0x30e>
 80079cc:	e6d9      	b.n	8007782 <_strtod_l+0xc2>
 80079ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079d0:	4910      	ldr	r1, [pc, #64]	; (8007a14 <_strtod_l+0x354>)
 80079d2:	3b01      	subs	r3, #1
 80079d4:	a81f      	add	r0, sp, #124	; 0x7c
 80079d6:	931f      	str	r3, [sp, #124]	; 0x7c
 80079d8:	f001 f944 	bl	8008c64 <__match>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d102      	bne.n	80079e6 <_strtod_l+0x326>
 80079e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079e2:	3301      	adds	r3, #1
 80079e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80079e6:	4f07      	ldr	r7, [pc, #28]	; (8007a04 <_strtod_l+0x344>)
 80079e8:	2600      	movs	r6, #0
 80079ea:	e6aa      	b.n	8007742 <_strtod_l+0x82>
 80079ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	921f      	str	r2, [sp, #124]	; 0x7c
 80079f2:	785b      	ldrb	r3, [r3, #1]
 80079f4:	e7b5      	b.n	8007962 <_strtod_l+0x2a2>
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	0800981c 	.word	0x0800981c
 80079fc:	ffefffff 	.word	0xffefffff
 8007a00:	00000433 	.word	0x00000433
 8007a04:	7ff00000 	.word	0x7ff00000
 8007a08:	7fffffff 	.word	0x7fffffff
 8007a0c:	00004e1f 	.word	0x00004e1f
 8007a10:	0800980d 	.word	0x0800980d
 8007a14:	08009810 	.word	0x08009810
 8007a18:	220a      	movs	r2, #10
 8007a1a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007a1c:	434a      	muls	r2, r1
 8007a1e:	18d2      	adds	r2, r2, r3
 8007a20:	3a30      	subs	r2, #48	; 0x30
 8007a22:	920e      	str	r2, [sp, #56]	; 0x38
 8007a24:	e7a7      	b.n	8007976 <_strtod_l+0x2b6>
 8007a26:	9a06      	ldr	r2, [sp, #24]
 8007a28:	2100      	movs	r1, #0
 8007a2a:	921f      	str	r2, [sp, #124]	; 0x7c
 8007a2c:	e7b7      	b.n	800799e <_strtod_l+0x2de>
 8007a2e:	2b69      	cmp	r3, #105	; 0x69
 8007a30:	d0c6      	beq.n	80079c0 <_strtod_l+0x300>
 8007a32:	2b6e      	cmp	r3, #110	; 0x6e
 8007a34:	d000      	beq.n	8007a38 <_strtod_l+0x378>
 8007a36:	e6a4      	b.n	8007782 <_strtod_l+0xc2>
 8007a38:	498b      	ldr	r1, [pc, #556]	; (8007c68 <_strtod_l+0x5a8>)
 8007a3a:	a81f      	add	r0, sp, #124	; 0x7c
 8007a3c:	f001 f912 	bl	8008c64 <__match>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d100      	bne.n	8007a46 <_strtod_l+0x386>
 8007a44:	e69d      	b.n	8007782 <_strtod_l+0xc2>
 8007a46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b28      	cmp	r3, #40	; 0x28
 8007a4c:	d10c      	bne.n	8007a68 <_strtod_l+0x3a8>
 8007a4e:	aa22      	add	r2, sp, #136	; 0x88
 8007a50:	4986      	ldr	r1, [pc, #536]	; (8007c6c <_strtod_l+0x5ac>)
 8007a52:	a81f      	add	r0, sp, #124	; 0x7c
 8007a54:	f001 f91a 	bl	8008c8c <__hexnan>
 8007a58:	2805      	cmp	r0, #5
 8007a5a:	d105      	bne.n	8007a68 <_strtod_l+0x3a8>
 8007a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a5e:	4a84      	ldr	r2, [pc, #528]	; (8007c70 <_strtod_l+0x5b0>)
 8007a60:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8007a62:	431a      	orrs	r2, r3
 8007a64:	0017      	movs	r7, r2
 8007a66:	e66c      	b.n	8007742 <_strtod_l+0x82>
 8007a68:	4f82      	ldr	r7, [pc, #520]	; (8007c74 <_strtod_l+0x5b4>)
 8007a6a:	e7bd      	b.n	80079e8 <_strtod_l+0x328>
 8007a6c:	4663      	mov	r3, ip
 8007a6e:	1acb      	subs	r3, r1, r3
 8007a70:	9307      	str	r3, [sp, #28]
 8007a72:	9b08      	ldr	r3, [sp, #32]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <_strtod_l+0x3bc>
 8007a78:	9b05      	ldr	r3, [sp, #20]
 8007a7a:	9308      	str	r3, [sp, #32]
 8007a7c:	9c05      	ldr	r4, [sp, #20]
 8007a7e:	2c10      	cmp	r4, #16
 8007a80:	dd00      	ble.n	8007a84 <_strtod_l+0x3c4>
 8007a82:	2410      	movs	r4, #16
 8007a84:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007a86:	f7fb f933 	bl	8002cf0 <__aeabi_ui2d>
 8007a8a:	0006      	movs	r6, r0
 8007a8c:	000f      	movs	r7, r1
 8007a8e:	2c09      	cmp	r4, #9
 8007a90:	dd15      	ble.n	8007abe <_strtod_l+0x3fe>
 8007a92:	0022      	movs	r2, r4
 8007a94:	4b78      	ldr	r3, [pc, #480]	; (8007c78 <_strtod_l+0x5b8>)
 8007a96:	3a09      	subs	r2, #9
 8007a98:	00d2      	lsls	r2, r2, #3
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f7fa fafa 	bl	8002098 <__aeabi_dmul>
 8007aa4:	0006      	movs	r6, r0
 8007aa6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007aa8:	000f      	movs	r7, r1
 8007aaa:	f7fb f921 	bl	8002cf0 <__aeabi_ui2d>
 8007aae:	0002      	movs	r2, r0
 8007ab0:	000b      	movs	r3, r1
 8007ab2:	0030      	movs	r0, r6
 8007ab4:	0039      	movs	r1, r7
 8007ab6:	f7f9 fbab 	bl	8001210 <__aeabi_dadd>
 8007aba:	0006      	movs	r6, r0
 8007abc:	000f      	movs	r7, r1
 8007abe:	9b05      	ldr	r3, [sp, #20]
 8007ac0:	2b0f      	cmp	r3, #15
 8007ac2:	dc39      	bgt.n	8007b38 <_strtod_l+0x478>
 8007ac4:	9b07      	ldr	r3, [sp, #28]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d100      	bne.n	8007acc <_strtod_l+0x40c>
 8007aca:	e63a      	b.n	8007742 <_strtod_l+0x82>
 8007acc:	dd26      	ble.n	8007b1c <_strtod_l+0x45c>
 8007ace:	2b16      	cmp	r3, #22
 8007ad0:	dc0b      	bgt.n	8007aea <_strtod_l+0x42a>
 8007ad2:	4969      	ldr	r1, [pc, #420]	; (8007c78 <_strtod_l+0x5b8>)
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	18c9      	adds	r1, r1, r3
 8007ad8:	0032      	movs	r2, r6
 8007ada:	6808      	ldr	r0, [r1, #0]
 8007adc:	6849      	ldr	r1, [r1, #4]
 8007ade:	003b      	movs	r3, r7
 8007ae0:	f7fa fada 	bl	8002098 <__aeabi_dmul>
 8007ae4:	0006      	movs	r6, r0
 8007ae6:	000f      	movs	r7, r1
 8007ae8:	e62b      	b.n	8007742 <_strtod_l+0x82>
 8007aea:	2325      	movs	r3, #37	; 0x25
 8007aec:	9a05      	ldr	r2, [sp, #20]
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	9a07      	ldr	r2, [sp, #28]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	dc20      	bgt.n	8007b38 <_strtod_l+0x478>
 8007af6:	240f      	movs	r4, #15
 8007af8:	9b05      	ldr	r3, [sp, #20]
 8007afa:	4d5f      	ldr	r5, [pc, #380]	; (8007c78 <_strtod_l+0x5b8>)
 8007afc:	1ae4      	subs	r4, r4, r3
 8007afe:	00e1      	lsls	r1, r4, #3
 8007b00:	1869      	adds	r1, r5, r1
 8007b02:	0032      	movs	r2, r6
 8007b04:	6808      	ldr	r0, [r1, #0]
 8007b06:	6849      	ldr	r1, [r1, #4]
 8007b08:	003b      	movs	r3, r7
 8007b0a:	f7fa fac5 	bl	8002098 <__aeabi_dmul>
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	1b1c      	subs	r4, r3, r4
 8007b12:	00e4      	lsls	r4, r4, #3
 8007b14:	192c      	adds	r4, r5, r4
 8007b16:	6822      	ldr	r2, [r4, #0]
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	e7e1      	b.n	8007ae0 <_strtod_l+0x420>
 8007b1c:	9b07      	ldr	r3, [sp, #28]
 8007b1e:	3316      	adds	r3, #22
 8007b20:	db0a      	blt.n	8007b38 <_strtod_l+0x478>
 8007b22:	9b07      	ldr	r3, [sp, #28]
 8007b24:	0030      	movs	r0, r6
 8007b26:	00da      	lsls	r2, r3, #3
 8007b28:	4b53      	ldr	r3, [pc, #332]	; (8007c78 <_strtod_l+0x5b8>)
 8007b2a:	0039      	movs	r1, r7
 8007b2c:	1a9b      	subs	r3, r3, r2
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f7f9 fe7d 	bl	8001830 <__aeabi_ddiv>
 8007b36:	e7d5      	b.n	8007ae4 <_strtod_l+0x424>
 8007b38:	9b05      	ldr	r3, [sp, #20]
 8007b3a:	1b1c      	subs	r4, r3, r4
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	18e4      	adds	r4, r4, r3
 8007b40:	2c00      	cmp	r4, #0
 8007b42:	dd6e      	ble.n	8007c22 <_strtod_l+0x562>
 8007b44:	230f      	movs	r3, #15
 8007b46:	4023      	ands	r3, r4
 8007b48:	d00a      	beq.n	8007b60 <_strtod_l+0x4a0>
 8007b4a:	494b      	ldr	r1, [pc, #300]	; (8007c78 <_strtod_l+0x5b8>)
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	18c9      	adds	r1, r1, r3
 8007b50:	0032      	movs	r2, r6
 8007b52:	6808      	ldr	r0, [r1, #0]
 8007b54:	6849      	ldr	r1, [r1, #4]
 8007b56:	003b      	movs	r3, r7
 8007b58:	f7fa fa9e 	bl	8002098 <__aeabi_dmul>
 8007b5c:	0006      	movs	r6, r0
 8007b5e:	000f      	movs	r7, r1
 8007b60:	230f      	movs	r3, #15
 8007b62:	439c      	bics	r4, r3
 8007b64:	d048      	beq.n	8007bf8 <_strtod_l+0x538>
 8007b66:	3326      	adds	r3, #38	; 0x26
 8007b68:	33ff      	adds	r3, #255	; 0xff
 8007b6a:	429c      	cmp	r4, r3
 8007b6c:	dd21      	ble.n	8007bb2 <_strtod_l+0x4f2>
 8007b6e:	2400      	movs	r4, #0
 8007b70:	9405      	str	r4, [sp, #20]
 8007b72:	940a      	str	r4, [sp, #40]	; 0x28
 8007b74:	9407      	str	r4, [sp, #28]
 8007b76:	2322      	movs	r3, #34	; 0x22
 8007b78:	2600      	movs	r6, #0
 8007b7a:	9a04      	ldr	r2, [sp, #16]
 8007b7c:	4f3c      	ldr	r7, [pc, #240]	; (8007c70 <_strtod_l+0x5b0>)
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b82:	42b3      	cmp	r3, r6
 8007b84:	d100      	bne.n	8007b88 <_strtod_l+0x4c8>
 8007b86:	e5dc      	b.n	8007742 <_strtod_l+0x82>
 8007b88:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007b8a:	9804      	ldr	r0, [sp, #16]
 8007b8c:	f001 f970 	bl	8008e70 <_Bfree>
 8007b90:	9907      	ldr	r1, [sp, #28]
 8007b92:	9804      	ldr	r0, [sp, #16]
 8007b94:	f001 f96c 	bl	8008e70 <_Bfree>
 8007b98:	9905      	ldr	r1, [sp, #20]
 8007b9a:	9804      	ldr	r0, [sp, #16]
 8007b9c:	f001 f968 	bl	8008e70 <_Bfree>
 8007ba0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ba2:	9804      	ldr	r0, [sp, #16]
 8007ba4:	f001 f964 	bl	8008e70 <_Bfree>
 8007ba8:	0021      	movs	r1, r4
 8007baa:	9804      	ldr	r0, [sp, #16]
 8007bac:	f001 f960 	bl	8008e70 <_Bfree>
 8007bb0:	e5c7      	b.n	8007742 <_strtod_l+0x82>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	0030      	movs	r0, r6
 8007bb6:	0039      	movs	r1, r7
 8007bb8:	001d      	movs	r5, r3
 8007bba:	1124      	asrs	r4, r4, #4
 8007bbc:	2c01      	cmp	r4, #1
 8007bbe:	dc1e      	bgt.n	8007bfe <_strtod_l+0x53e>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <_strtod_l+0x508>
 8007bc4:	0006      	movs	r6, r0
 8007bc6:	000f      	movs	r7, r1
 8007bc8:	4b2c      	ldr	r3, [pc, #176]	; (8007c7c <_strtod_l+0x5bc>)
 8007bca:	00ed      	lsls	r5, r5, #3
 8007bcc:	18ff      	adds	r7, r7, r3
 8007bce:	4b2c      	ldr	r3, [pc, #176]	; (8007c80 <_strtod_l+0x5c0>)
 8007bd0:	0032      	movs	r2, r6
 8007bd2:	195d      	adds	r5, r3, r5
 8007bd4:	6828      	ldr	r0, [r5, #0]
 8007bd6:	6869      	ldr	r1, [r5, #4]
 8007bd8:	003b      	movs	r3, r7
 8007bda:	f7fa fa5d 	bl	8002098 <__aeabi_dmul>
 8007bde:	4b24      	ldr	r3, [pc, #144]	; (8007c70 <_strtod_l+0x5b0>)
 8007be0:	000f      	movs	r7, r1
 8007be2:	400b      	ands	r3, r1
 8007be4:	4927      	ldr	r1, [pc, #156]	; (8007c84 <_strtod_l+0x5c4>)
 8007be6:	0006      	movs	r6, r0
 8007be8:	428b      	cmp	r3, r1
 8007bea:	d8c0      	bhi.n	8007b6e <_strtod_l+0x4ae>
 8007bec:	4926      	ldr	r1, [pc, #152]	; (8007c88 <_strtod_l+0x5c8>)
 8007bee:	428b      	cmp	r3, r1
 8007bf0:	d913      	bls.n	8007c1a <_strtod_l+0x55a>
 8007bf2:	2601      	movs	r6, #1
 8007bf4:	4f25      	ldr	r7, [pc, #148]	; (8007c8c <_strtod_l+0x5cc>)
 8007bf6:	4276      	negs	r6, r6
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	9306      	str	r3, [sp, #24]
 8007bfc:	e074      	b.n	8007ce8 <_strtod_l+0x628>
 8007bfe:	2201      	movs	r2, #1
 8007c00:	4214      	tst	r4, r2
 8007c02:	d007      	beq.n	8007c14 <_strtod_l+0x554>
 8007c04:	4a1e      	ldr	r2, [pc, #120]	; (8007c80 <_strtod_l+0x5c0>)
 8007c06:	00eb      	lsls	r3, r5, #3
 8007c08:	189b      	adds	r3, r3, r2
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f7fa fa43 	bl	8002098 <__aeabi_dmul>
 8007c12:	2301      	movs	r3, #1
 8007c14:	3501      	adds	r5, #1
 8007c16:	1064      	asrs	r4, r4, #1
 8007c18:	e7d0      	b.n	8007bbc <_strtod_l+0x4fc>
 8007c1a:	23d4      	movs	r3, #212	; 0xd4
 8007c1c:	049b      	lsls	r3, r3, #18
 8007c1e:	18ff      	adds	r7, r7, r3
 8007c20:	e7ea      	b.n	8007bf8 <_strtod_l+0x538>
 8007c22:	2c00      	cmp	r4, #0
 8007c24:	d0e8      	beq.n	8007bf8 <_strtod_l+0x538>
 8007c26:	230f      	movs	r3, #15
 8007c28:	4264      	negs	r4, r4
 8007c2a:	4023      	ands	r3, r4
 8007c2c:	d00a      	beq.n	8007c44 <_strtod_l+0x584>
 8007c2e:	4a12      	ldr	r2, [pc, #72]	; (8007c78 <_strtod_l+0x5b8>)
 8007c30:	00db      	lsls	r3, r3, #3
 8007c32:	18d3      	adds	r3, r2, r3
 8007c34:	0030      	movs	r0, r6
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	0039      	movs	r1, r7
 8007c3c:	f7f9 fdf8 	bl	8001830 <__aeabi_ddiv>
 8007c40:	0006      	movs	r6, r0
 8007c42:	000f      	movs	r7, r1
 8007c44:	1124      	asrs	r4, r4, #4
 8007c46:	d0d7      	beq.n	8007bf8 <_strtod_l+0x538>
 8007c48:	2c1f      	cmp	r4, #31
 8007c4a:	dd21      	ble.n	8007c90 <_strtod_l+0x5d0>
 8007c4c:	2400      	movs	r4, #0
 8007c4e:	9405      	str	r4, [sp, #20]
 8007c50:	940a      	str	r4, [sp, #40]	; 0x28
 8007c52:	9407      	str	r4, [sp, #28]
 8007c54:	2322      	movs	r3, #34	; 0x22
 8007c56:	9a04      	ldr	r2, [sp, #16]
 8007c58:	2600      	movs	r6, #0
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c5e:	2700      	movs	r7, #0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d191      	bne.n	8007b88 <_strtod_l+0x4c8>
 8007c64:	e56d      	b.n	8007742 <_strtod_l+0x82>
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	08009816 	.word	0x08009816
 8007c6c:	08009830 	.word	0x08009830
 8007c70:	7ff00000 	.word	0x7ff00000
 8007c74:	fff80000 	.word	0xfff80000
 8007c78:	080098a8 	.word	0x080098a8
 8007c7c:	fcb00000 	.word	0xfcb00000
 8007c80:	08009880 	.word	0x08009880
 8007c84:	7ca00000 	.word	0x7ca00000
 8007c88:	7c900000 	.word	0x7c900000
 8007c8c:	7fefffff 	.word	0x7fefffff
 8007c90:	2310      	movs	r3, #16
 8007c92:	4023      	ands	r3, r4
 8007c94:	9306      	str	r3, [sp, #24]
 8007c96:	d001      	beq.n	8007c9c <_strtod_l+0x5dc>
 8007c98:	236a      	movs	r3, #106	; 0x6a
 8007c9a:	9306      	str	r3, [sp, #24]
 8007c9c:	0030      	movs	r0, r6
 8007c9e:	0039      	movs	r1, r7
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	4dca      	ldr	r5, [pc, #808]	; (8007fcc <_strtod_l+0x90c>)
 8007ca4:	2c00      	cmp	r4, #0
 8007ca6:	dd00      	ble.n	8007caa <_strtod_l+0x5ea>
 8007ca8:	e103      	b.n	8007eb2 <_strtod_l+0x7f2>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <_strtod_l+0x5f2>
 8007cae:	0006      	movs	r6, r0
 8007cb0:	000f      	movs	r7, r1
 8007cb2:	9b06      	ldr	r3, [sp, #24]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00f      	beq.n	8007cd8 <_strtod_l+0x618>
 8007cb8:	236b      	movs	r3, #107	; 0x6b
 8007cba:	0079      	lsls	r1, r7, #1
 8007cbc:	0d49      	lsrs	r1, r1, #21
 8007cbe:	003a      	movs	r2, r7
 8007cc0:	1a5b      	subs	r3, r3, r1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dd08      	ble.n	8007cd8 <_strtod_l+0x618>
 8007cc6:	2b1f      	cmp	r3, #31
 8007cc8:	dc00      	bgt.n	8007ccc <_strtod_l+0x60c>
 8007cca:	e104      	b.n	8007ed6 <_strtod_l+0x816>
 8007ccc:	2600      	movs	r6, #0
 8007cce:	2b34      	cmp	r3, #52	; 0x34
 8007cd0:	dc00      	bgt.n	8007cd4 <_strtod_l+0x614>
 8007cd2:	e0f9      	b.n	8007ec8 <_strtod_l+0x808>
 8007cd4:	27dc      	movs	r7, #220	; 0xdc
 8007cd6:	04bf      	lsls	r7, r7, #18
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	0030      	movs	r0, r6
 8007cde:	0039      	movs	r1, r7
 8007ce0:	f7f8 fbaa 	bl	8000438 <__aeabi_dcmpeq>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d1b1      	bne.n	8007c4c <_strtod_l+0x58c>
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cea:	9a08      	ldr	r2, [sp, #32]
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	9804      	ldr	r0, [sp, #16]
 8007cf4:	f001 f911 	bl	8008f1a <__s2b>
 8007cf8:	900a      	str	r0, [sp, #40]	; 0x28
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d100      	bne.n	8007d00 <_strtod_l+0x640>
 8007cfe:	e736      	b.n	8007b6e <_strtod_l+0x4ae>
 8007d00:	9b07      	ldr	r3, [sp, #28]
 8007d02:	2400      	movs	r4, #0
 8007d04:	17da      	asrs	r2, r3, #31
 8007d06:	425b      	negs	r3, r3
 8007d08:	401a      	ands	r2, r3
 8007d0a:	9b07      	ldr	r3, [sp, #28]
 8007d0c:	9215      	str	r2, [sp, #84]	; 0x54
 8007d0e:	43db      	mvns	r3, r3
 8007d10:	9a07      	ldr	r2, [sp, #28]
 8007d12:	17db      	asrs	r3, r3, #31
 8007d14:	401a      	ands	r2, r3
 8007d16:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d18:	9405      	str	r4, [sp, #20]
 8007d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d1c:	9804      	ldr	r0, [sp, #16]
 8007d1e:	6859      	ldr	r1, [r3, #4]
 8007d20:	f001 f86e 	bl	8008e00 <_Balloc>
 8007d24:	9007      	str	r0, [sp, #28]
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d100      	bne.n	8007d2c <_strtod_l+0x66c>
 8007d2a:	e724      	b.n	8007b76 <_strtod_l+0x4b6>
 8007d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	310c      	adds	r1, #12
 8007d34:	1c9a      	adds	r2, r3, #2
 8007d36:	0092      	lsls	r2, r2, #2
 8007d38:	300c      	adds	r0, #12
 8007d3a:	9308      	str	r3, [sp, #32]
 8007d3c:	f7ff fc4e 	bl	80075dc <memcpy>
 8007d40:	ab22      	add	r3, sp, #136	; 0x88
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	ab21      	add	r3, sp, #132	; 0x84
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	0032      	movs	r2, r6
 8007d4a:	003b      	movs	r3, r7
 8007d4c:	9804      	ldr	r0, [sp, #16]
 8007d4e:	960e      	str	r6, [sp, #56]	; 0x38
 8007d50:	970f      	str	r7, [sp, #60]	; 0x3c
 8007d52:	f001 fb95 	bl	8009480 <__d2b>
 8007d56:	9020      	str	r0, [sp, #128]	; 0x80
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d100      	bne.n	8007d5e <_strtod_l+0x69e>
 8007d5c:	e70b      	b.n	8007b76 <_strtod_l+0x4b6>
 8007d5e:	2101      	movs	r1, #1
 8007d60:	9804      	ldr	r0, [sp, #16]
 8007d62:	f001 f962 	bl	800902a <__i2b>
 8007d66:	9005      	str	r0, [sp, #20]
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d100      	bne.n	8007d6e <_strtod_l+0x6ae>
 8007d6c:	e703      	b.n	8007b76 <_strtod_l+0x4b6>
 8007d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	da00      	bge.n	8007d76 <_strtod_l+0x6b6>
 8007d74:	e0b4      	b.n	8007ee0 <_strtod_l+0x820>
 8007d76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d78:	18d5      	adds	r5, r2, r3
 8007d7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d7c:	4694      	mov	ip, r2
 8007d7e:	9906      	ldr	r1, [sp, #24]
 8007d80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d82:	1a5b      	subs	r3, r3, r1
 8007d84:	2136      	movs	r1, #54	; 0x36
 8007d86:	189b      	adds	r3, r3, r2
 8007d88:	1a8a      	subs	r2, r1, r2
 8007d8a:	4991      	ldr	r1, [pc, #580]	; (8007fd0 <_strtod_l+0x910>)
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	2001      	movs	r0, #1
 8007d90:	428b      	cmp	r3, r1
 8007d92:	db00      	blt.n	8007d96 <_strtod_l+0x6d6>
 8007d94:	e0b0      	b.n	8007ef8 <_strtod_l+0x838>
 8007d96:	1ac9      	subs	r1, r1, r3
 8007d98:	1a52      	subs	r2, r2, r1
 8007d9a:	291f      	cmp	r1, #31
 8007d9c:	dd00      	ble.n	8007da0 <_strtod_l+0x6e0>
 8007d9e:	e0a4      	b.n	8007eea <_strtod_l+0x82a>
 8007da0:	4088      	lsls	r0, r1
 8007da2:	2300      	movs	r3, #0
 8007da4:	9014      	str	r0, [sp, #80]	; 0x50
 8007da6:	930c      	str	r3, [sp, #48]	; 0x30
 8007da8:	18ab      	adds	r3, r5, r2
 8007daa:	9308      	str	r3, [sp, #32]
 8007dac:	0013      	movs	r3, r2
 8007dae:	9a06      	ldr	r2, [sp, #24]
 8007db0:	4463      	add	r3, ip
 8007db2:	18d3      	adds	r3, r2, r3
 8007db4:	9a08      	ldr	r2, [sp, #32]
 8007db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007db8:	002b      	movs	r3, r5
 8007dba:	4295      	cmp	r5, r2
 8007dbc:	dd00      	ble.n	8007dc0 <_strtod_l+0x700>
 8007dbe:	0013      	movs	r3, r2
 8007dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	dd00      	ble.n	8007dc8 <_strtod_l+0x708>
 8007dc6:	0013      	movs	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dd06      	ble.n	8007dda <_strtod_l+0x71a>
 8007dcc:	9a08      	ldr	r2, [sp, #32]
 8007dce:	1aed      	subs	r5, r5, r3
 8007dd0:	1ad2      	subs	r2, r2, r3
 8007dd2:	9208      	str	r2, [sp, #32]
 8007dd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007dd6:	1ad2      	subs	r2, r2, r3
 8007dd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d017      	beq.n	8007e10 <_strtod_l+0x750>
 8007de0:	001a      	movs	r2, r3
 8007de2:	9905      	ldr	r1, [sp, #20]
 8007de4:	9804      	ldr	r0, [sp, #16]
 8007de6:	f001 f9b9 	bl	800915c <__pow5mult>
 8007dea:	9005      	str	r0, [sp, #20]
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d100      	bne.n	8007df2 <_strtod_l+0x732>
 8007df0:	e6c1      	b.n	8007b76 <_strtod_l+0x4b6>
 8007df2:	0001      	movs	r1, r0
 8007df4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007df6:	9804      	ldr	r0, [sp, #16]
 8007df8:	f001 f920 	bl	800903c <__multiply>
 8007dfc:	901b      	str	r0, [sp, #108]	; 0x6c
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d100      	bne.n	8007e04 <_strtod_l+0x744>
 8007e02:	e6b8      	b.n	8007b76 <_strtod_l+0x4b6>
 8007e04:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007e06:	9804      	ldr	r0, [sp, #16]
 8007e08:	f001 f832 	bl	8008e70 <_Bfree>
 8007e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e0e:	9320      	str	r3, [sp, #128]	; 0x80
 8007e10:	9b08      	ldr	r3, [sp, #32]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	dc73      	bgt.n	8007efe <_strtod_l+0x83e>
 8007e16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d179      	bne.n	8007f10 <_strtod_l+0x850>
 8007e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dd08      	ble.n	8007e34 <_strtod_l+0x774>
 8007e22:	001a      	movs	r2, r3
 8007e24:	9907      	ldr	r1, [sp, #28]
 8007e26:	9804      	ldr	r0, [sp, #16]
 8007e28:	f001 f9ea 	bl	8009200 <__lshift>
 8007e2c:	9007      	str	r0, [sp, #28]
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d100      	bne.n	8007e34 <_strtod_l+0x774>
 8007e32:	e6a0      	b.n	8007b76 <_strtod_l+0x4b6>
 8007e34:	2d00      	cmp	r5, #0
 8007e36:	dd08      	ble.n	8007e4a <_strtod_l+0x78a>
 8007e38:	002a      	movs	r2, r5
 8007e3a:	9905      	ldr	r1, [sp, #20]
 8007e3c:	9804      	ldr	r0, [sp, #16]
 8007e3e:	f001 f9df 	bl	8009200 <__lshift>
 8007e42:	9005      	str	r0, [sp, #20]
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d100      	bne.n	8007e4a <_strtod_l+0x78a>
 8007e48:	e695      	b.n	8007b76 <_strtod_l+0x4b6>
 8007e4a:	9a07      	ldr	r2, [sp, #28]
 8007e4c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007e4e:	9804      	ldr	r0, [sp, #16]
 8007e50:	f001 fa40 	bl	80092d4 <__mdiff>
 8007e54:	1e04      	subs	r4, r0, #0
 8007e56:	d100      	bne.n	8007e5a <_strtod_l+0x79a>
 8007e58:	e68d      	b.n	8007b76 <_strtod_l+0x4b6>
 8007e5a:	2500      	movs	r5, #0
 8007e5c:	68c3      	ldr	r3, [r0, #12]
 8007e5e:	9905      	ldr	r1, [sp, #20]
 8007e60:	60c5      	str	r5, [r0, #12]
 8007e62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e64:	f001 fa1d 	bl	80092a2 <__mcmp>
 8007e68:	42a8      	cmp	r0, r5
 8007e6a:	da5b      	bge.n	8007f24 <_strtod_l+0x864>
 8007e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e6e:	42ab      	cmp	r3, r5
 8007e70:	d11b      	bne.n	8007eaa <_strtod_l+0x7ea>
 8007e72:	42ae      	cmp	r6, r5
 8007e74:	d119      	bne.n	8007eaa <_strtod_l+0x7ea>
 8007e76:	033b      	lsls	r3, r7, #12
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	d116      	bne.n	8007eaa <_strtod_l+0x7ea>
 8007e7c:	22d6      	movs	r2, #214	; 0xd6
 8007e7e:	4b55      	ldr	r3, [pc, #340]	; (8007fd4 <_strtod_l+0x914>)
 8007e80:	04d2      	lsls	r2, r2, #19
 8007e82:	403b      	ands	r3, r7
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d910      	bls.n	8007eaa <_strtod_l+0x7ea>
 8007e88:	6963      	ldr	r3, [r4, #20]
 8007e8a:	42ab      	cmp	r3, r5
 8007e8c:	d102      	bne.n	8007e94 <_strtod_l+0x7d4>
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	dd0a      	ble.n	8007eaa <_strtod_l+0x7ea>
 8007e94:	0021      	movs	r1, r4
 8007e96:	2201      	movs	r2, #1
 8007e98:	9804      	ldr	r0, [sp, #16]
 8007e9a:	f001 f9b1 	bl	8009200 <__lshift>
 8007e9e:	9905      	ldr	r1, [sp, #20]
 8007ea0:	0004      	movs	r4, r0
 8007ea2:	f001 f9fe 	bl	80092a2 <__mcmp>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	dc6c      	bgt.n	8007f84 <_strtod_l+0x8c4>
 8007eaa:	9b06      	ldr	r3, [sp, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d178      	bne.n	8007fa2 <_strtod_l+0x8e2>
 8007eb0:	e66a      	b.n	8007b88 <_strtod_l+0x4c8>
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	4214      	tst	r4, r2
 8007eb6:	d004      	beq.n	8007ec2 <_strtod_l+0x802>
 8007eb8:	682a      	ldr	r2, [r5, #0]
 8007eba:	686b      	ldr	r3, [r5, #4]
 8007ebc:	f7fa f8ec 	bl	8002098 <__aeabi_dmul>
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	1064      	asrs	r4, r4, #1
 8007ec4:	3508      	adds	r5, #8
 8007ec6:	e6ed      	b.n	8007ca4 <_strtod_l+0x5e4>
 8007ec8:	2101      	movs	r1, #1
 8007eca:	3b20      	subs	r3, #32
 8007ecc:	4249      	negs	r1, r1
 8007ece:	4099      	lsls	r1, r3
 8007ed0:	400a      	ands	r2, r1
 8007ed2:	0017      	movs	r7, r2
 8007ed4:	e700      	b.n	8007cd8 <_strtod_l+0x618>
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4252      	negs	r2, r2
 8007eda:	409a      	lsls	r2, r3
 8007edc:	4016      	ands	r6, r2
 8007ede:	e6fb      	b.n	8007cd8 <_strtod_l+0x618>
 8007ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ee2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007ee4:	1ad2      	subs	r2, r2, r3
 8007ee6:	4694      	mov	ip, r2
 8007ee8:	e749      	b.n	8007d7e <_strtod_l+0x6be>
 8007eea:	493b      	ldr	r1, [pc, #236]	; (8007fd8 <_strtod_l+0x918>)
 8007eec:	1acb      	subs	r3, r1, r3
 8007eee:	0001      	movs	r1, r0
 8007ef0:	4099      	lsls	r1, r3
 8007ef2:	910c      	str	r1, [sp, #48]	; 0x30
 8007ef4:	9014      	str	r0, [sp, #80]	; 0x50
 8007ef6:	e757      	b.n	8007da8 <_strtod_l+0x6e8>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	930c      	str	r3, [sp, #48]	; 0x30
 8007efc:	e7fa      	b.n	8007ef4 <_strtod_l+0x834>
 8007efe:	9a08      	ldr	r2, [sp, #32]
 8007f00:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007f02:	9804      	ldr	r0, [sp, #16]
 8007f04:	f001 f97c 	bl	8009200 <__lshift>
 8007f08:	9020      	str	r0, [sp, #128]	; 0x80
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d183      	bne.n	8007e16 <_strtod_l+0x756>
 8007f0e:	e632      	b.n	8007b76 <_strtod_l+0x4b6>
 8007f10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f12:	9907      	ldr	r1, [sp, #28]
 8007f14:	9804      	ldr	r0, [sp, #16]
 8007f16:	f001 f921 	bl	800915c <__pow5mult>
 8007f1a:	9007      	str	r0, [sp, #28]
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d000      	beq.n	8007f22 <_strtod_l+0x862>
 8007f20:	e77c      	b.n	8007e1c <_strtod_l+0x75c>
 8007f22:	e628      	b.n	8007b76 <_strtod_l+0x4b6>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d000      	beq.n	8007f2a <_strtod_l+0x86a>
 8007f28:	e095      	b.n	8008056 <_strtod_l+0x996>
 8007f2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f2c:	033b      	lsls	r3, r7, #12
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	d024      	beq.n	8007f7c <_strtod_l+0x8bc>
 8007f32:	492a      	ldr	r1, [pc, #168]	; (8007fdc <_strtod_l+0x91c>)
 8007f34:	003a      	movs	r2, r7
 8007f36:	0b1b      	lsrs	r3, r3, #12
 8007f38:	428b      	cmp	r3, r1
 8007f3a:	d15e      	bne.n	8007ffa <_strtod_l+0x93a>
 8007f3c:	9b06      	ldr	r3, [sp, #24]
 8007f3e:	3801      	subs	r0, #1
 8007f40:	46b4      	mov	ip, r6
 8007f42:	0001      	movs	r1, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <_strtod_l+0x89e>
 8007f48:	25d4      	movs	r5, #212	; 0xd4
 8007f4a:	4b22      	ldr	r3, [pc, #136]	; (8007fd4 <_strtod_l+0x914>)
 8007f4c:	04ed      	lsls	r5, r5, #19
 8007f4e:	403b      	ands	r3, r7
 8007f50:	42ab      	cmp	r3, r5
 8007f52:	d804      	bhi.n	8007f5e <_strtod_l+0x89e>
 8007f54:	316c      	adds	r1, #108	; 0x6c
 8007f56:	0d1b      	lsrs	r3, r3, #20
 8007f58:	1acb      	subs	r3, r1, r3
 8007f5a:	0001      	movs	r1, r0
 8007f5c:	4099      	lsls	r1, r3
 8007f5e:	4561      	cmp	r1, ip
 8007f60:	d14b      	bne.n	8007ffa <_strtod_l+0x93a>
 8007f62:	4b1f      	ldr	r3, [pc, #124]	; (8007fe0 <_strtod_l+0x920>)
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d102      	bne.n	8007f6e <_strtod_l+0x8ae>
 8007f68:	1c4b      	adds	r3, r1, #1
 8007f6a:	d100      	bne.n	8007f6e <_strtod_l+0x8ae>
 8007f6c:	e603      	b.n	8007b76 <_strtod_l+0x4b6>
 8007f6e:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <_strtod_l+0x914>)
 8007f70:	2600      	movs	r6, #0
 8007f72:	401a      	ands	r2, r3
 8007f74:	2380      	movs	r3, #128	; 0x80
 8007f76:	035b      	lsls	r3, r3, #13
 8007f78:	18d7      	adds	r7, r2, r3
 8007f7a:	e796      	b.n	8007eaa <_strtod_l+0x7ea>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d13c      	bne.n	8007ffa <_strtod_l+0x93a>
 8007f80:	2e00      	cmp	r6, #0
 8007f82:	d13a      	bne.n	8007ffa <_strtod_l+0x93a>
 8007f84:	9a06      	ldr	r2, [sp, #24]
 8007f86:	4b13      	ldr	r3, [pc, #76]	; (8007fd4 <_strtod_l+0x914>)
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	d02d      	beq.n	8007fe8 <_strtod_l+0x928>
 8007f8c:	001a      	movs	r2, r3
 8007f8e:	21d6      	movs	r1, #214	; 0xd6
 8007f90:	403a      	ands	r2, r7
 8007f92:	04c9      	lsls	r1, r1, #19
 8007f94:	428a      	cmp	r2, r1
 8007f96:	dc27      	bgt.n	8007fe8 <_strtod_l+0x928>
 8007f98:	23dc      	movs	r3, #220	; 0xdc
 8007f9a:	049b      	lsls	r3, r3, #18
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	dc00      	bgt.n	8007fa2 <_strtod_l+0x8e2>
 8007fa0:	e658      	b.n	8007c54 <_strtod_l+0x594>
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <_strtod_l+0x924>)
 8007fa4:	0030      	movs	r0, r6
 8007fa6:	9311      	str	r3, [sp, #68]	; 0x44
 8007fa8:	2300      	movs	r3, #0
 8007faa:	9310      	str	r3, [sp, #64]	; 0x40
 8007fac:	0039      	movs	r1, r7
 8007fae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fb2:	f7fa f871 	bl	8002098 <__aeabi_dmul>
 8007fb6:	0006      	movs	r6, r0
 8007fb8:	1e0f      	subs	r7, r1, #0
 8007fba:	d000      	beq.n	8007fbe <_strtod_l+0x8fe>
 8007fbc:	e5e4      	b.n	8007b88 <_strtod_l+0x4c8>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d000      	beq.n	8007fc4 <_strtod_l+0x904>
 8007fc2:	e5e1      	b.n	8007b88 <_strtod_l+0x4c8>
 8007fc4:	2322      	movs	r3, #34	; 0x22
 8007fc6:	9a04      	ldr	r2, [sp, #16]
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	e5dd      	b.n	8007b88 <_strtod_l+0x4c8>
 8007fcc:	08009848 	.word	0x08009848
 8007fd0:	fffffc02 	.word	0xfffffc02
 8007fd4:	7ff00000 	.word	0x7ff00000
 8007fd8:	fffffbe2 	.word	0xfffffbe2
 8007fdc:	000fffff 	.word	0x000fffff
 8007fe0:	7fefffff 	.word	0x7fefffff
 8007fe4:	39500000 	.word	0x39500000
 8007fe8:	2601      	movs	r6, #1
 8007fea:	4aa9      	ldr	r2, [pc, #676]	; (8008290 <_strtod_l+0xbd0>)
 8007fec:	403b      	ands	r3, r7
 8007fee:	189b      	adds	r3, r3, r2
 8007ff0:	4aa8      	ldr	r2, [pc, #672]	; (8008294 <_strtod_l+0xbd4>)
 8007ff2:	4276      	negs	r6, r6
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	0017      	movs	r7, r2
 8007ff8:	e757      	b.n	8007eaa <_strtod_l+0x7ea>
 8007ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d013      	beq.n	8008028 <_strtod_l+0x968>
 8008000:	423b      	tst	r3, r7
 8008002:	d100      	bne.n	8008006 <_strtod_l+0x946>
 8008004:	e751      	b.n	8007eaa <_strtod_l+0x7ea>
 8008006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008008:	9a06      	ldr	r2, [sp, #24]
 800800a:	0030      	movs	r0, r6
 800800c:	0039      	movs	r1, r7
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00f      	beq.n	8008032 <_strtod_l+0x972>
 8008012:	f7ff fb3d 	bl	8007690 <sulp>
 8008016:	0002      	movs	r2, r0
 8008018:	000b      	movs	r3, r1
 800801a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800801c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800801e:	f7f9 f8f7 	bl	8001210 <__aeabi_dadd>
 8008022:	0006      	movs	r6, r0
 8008024:	000f      	movs	r7, r1
 8008026:	e740      	b.n	8007eaa <_strtod_l+0x7ea>
 8008028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800802a:	4233      	tst	r3, r6
 800802c:	d100      	bne.n	8008030 <_strtod_l+0x970>
 800802e:	e73c      	b.n	8007eaa <_strtod_l+0x7ea>
 8008030:	e7e9      	b.n	8008006 <_strtod_l+0x946>
 8008032:	f7ff fb2d 	bl	8007690 <sulp>
 8008036:	0002      	movs	r2, r0
 8008038:	000b      	movs	r3, r1
 800803a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800803c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800803e:	f7fa faab 	bl	8002598 <__aeabi_dsub>
 8008042:	2200      	movs	r2, #0
 8008044:	2300      	movs	r3, #0
 8008046:	0006      	movs	r6, r0
 8008048:	000f      	movs	r7, r1
 800804a:	f7f8 f9f5 	bl	8000438 <__aeabi_dcmpeq>
 800804e:	2800      	cmp	r0, #0
 8008050:	d000      	beq.n	8008054 <_strtod_l+0x994>
 8008052:	e5ff      	b.n	8007c54 <_strtod_l+0x594>
 8008054:	e729      	b.n	8007eaa <_strtod_l+0x7ea>
 8008056:	9905      	ldr	r1, [sp, #20]
 8008058:	0020      	movs	r0, r4
 800805a:	f001 fa65 	bl	8009528 <__ratio>
 800805e:	2380      	movs	r3, #128	; 0x80
 8008060:	2200      	movs	r2, #0
 8008062:	05db      	lsls	r3, r3, #23
 8008064:	9008      	str	r0, [sp, #32]
 8008066:	9109      	str	r1, [sp, #36]	; 0x24
 8008068:	f7f8 f9f6 	bl	8000458 <__aeabi_dcmple>
 800806c:	2800      	cmp	r0, #0
 800806e:	d075      	beq.n	800815c <_strtod_l+0xa9c>
 8008070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d043      	beq.n	80080fe <_strtod_l+0xa3e>
 8008076:	2200      	movs	r2, #0
 8008078:	4b87      	ldr	r3, [pc, #540]	; (8008298 <_strtod_l+0xbd8>)
 800807a:	920c      	str	r2, [sp, #48]	; 0x30
 800807c:	930d      	str	r3, [sp, #52]	; 0x34
 800807e:	4b86      	ldr	r3, [pc, #536]	; (8008298 <_strtod_l+0xbd8>)
 8008080:	9308      	str	r3, [sp, #32]
 8008082:	4b86      	ldr	r3, [pc, #536]	; (800829c <_strtod_l+0xbdc>)
 8008084:	403b      	ands	r3, r7
 8008086:	9314      	str	r3, [sp, #80]	; 0x50
 8008088:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800808a:	4b85      	ldr	r3, [pc, #532]	; (80082a0 <_strtod_l+0xbe0>)
 800808c:	429a      	cmp	r2, r3
 800808e:	d000      	beq.n	8008092 <_strtod_l+0x9d2>
 8008090:	e0b1      	b.n	80081f6 <_strtod_l+0xb36>
 8008092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008096:	9210      	str	r2, [sp, #64]	; 0x40
 8008098:	9311      	str	r3, [sp, #68]	; 0x44
 800809a:	4b82      	ldr	r3, [pc, #520]	; (80082a4 <_strtod_l+0xbe4>)
 800809c:	0030      	movs	r0, r6
 800809e:	18ff      	adds	r7, r7, r3
 80080a0:	0039      	movs	r1, r7
 80080a2:	f001 f97b 	bl	800939c <__ulp>
 80080a6:	0002      	movs	r2, r0
 80080a8:	000b      	movs	r3, r1
 80080aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080ae:	f7f9 fff3 	bl	8002098 <__aeabi_dmul>
 80080b2:	0032      	movs	r2, r6
 80080b4:	003b      	movs	r3, r7
 80080b6:	f7f9 f8ab 	bl	8001210 <__aeabi_dadd>
 80080ba:	4a78      	ldr	r2, [pc, #480]	; (800829c <_strtod_l+0xbdc>)
 80080bc:	4b7a      	ldr	r3, [pc, #488]	; (80082a8 <_strtod_l+0xbe8>)
 80080be:	0006      	movs	r6, r0
 80080c0:	400a      	ands	r2, r1
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d962      	bls.n	800818c <_strtod_l+0xacc>
 80080c6:	4b79      	ldr	r3, [pc, #484]	; (80082ac <_strtod_l+0xbec>)
 80080c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d103      	bne.n	80080d6 <_strtod_l+0xa16>
 80080ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080d0:	3301      	adds	r3, #1
 80080d2:	d100      	bne.n	80080d6 <_strtod_l+0xa16>
 80080d4:	e54f      	b.n	8007b76 <_strtod_l+0x4b6>
 80080d6:	2601      	movs	r6, #1
 80080d8:	4f74      	ldr	r7, [pc, #464]	; (80082ac <_strtod_l+0xbec>)
 80080da:	4276      	negs	r6, r6
 80080dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80080de:	9804      	ldr	r0, [sp, #16]
 80080e0:	f000 fec6 	bl	8008e70 <_Bfree>
 80080e4:	9907      	ldr	r1, [sp, #28]
 80080e6:	9804      	ldr	r0, [sp, #16]
 80080e8:	f000 fec2 	bl	8008e70 <_Bfree>
 80080ec:	9905      	ldr	r1, [sp, #20]
 80080ee:	9804      	ldr	r0, [sp, #16]
 80080f0:	f000 febe 	bl	8008e70 <_Bfree>
 80080f4:	0021      	movs	r1, r4
 80080f6:	9804      	ldr	r0, [sp, #16]
 80080f8:	f000 feba 	bl	8008e70 <_Bfree>
 80080fc:	e60d      	b.n	8007d1a <_strtod_l+0x65a>
 80080fe:	2e00      	cmp	r6, #0
 8008100:	d11d      	bne.n	800813e <_strtod_l+0xa7e>
 8008102:	033b      	lsls	r3, r7, #12
 8008104:	d120      	bne.n	8008148 <_strtod_l+0xa88>
 8008106:	9808      	ldr	r0, [sp, #32]
 8008108:	9909      	ldr	r1, [sp, #36]	; 0x24
 800810a:	2200      	movs	r2, #0
 800810c:	4b62      	ldr	r3, [pc, #392]	; (8008298 <_strtod_l+0xbd8>)
 800810e:	f7f8 f999 	bl	8000444 <__aeabi_dcmplt>
 8008112:	2800      	cmp	r0, #0
 8008114:	d11e      	bne.n	8008154 <_strtod_l+0xa94>
 8008116:	9808      	ldr	r0, [sp, #32]
 8008118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800811a:	2200      	movs	r2, #0
 800811c:	4b64      	ldr	r3, [pc, #400]	; (80082b0 <_strtod_l+0xbf0>)
 800811e:	f7f9 ffbb 	bl	8002098 <__aeabi_dmul>
 8008122:	0005      	movs	r5, r0
 8008124:	9108      	str	r1, [sp, #32]
 8008126:	2280      	movs	r2, #128	; 0x80
 8008128:	0612      	lsls	r2, r2, #24
 800812a:	4694      	mov	ip, r2
 800812c:	9b08      	ldr	r3, [sp, #32]
 800812e:	951c      	str	r5, [sp, #112]	; 0x70
 8008130:	4463      	add	r3, ip
 8008132:	931d      	str	r3, [sp, #116]	; 0x74
 8008134:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008136:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008138:	920c      	str	r2, [sp, #48]	; 0x30
 800813a:	930d      	str	r3, [sp, #52]	; 0x34
 800813c:	e7a1      	b.n	8008082 <_strtod_l+0x9c2>
 800813e:	2e01      	cmp	r6, #1
 8008140:	d102      	bne.n	8008148 <_strtod_l+0xa88>
 8008142:	2f00      	cmp	r7, #0
 8008144:	d100      	bne.n	8008148 <_strtod_l+0xa88>
 8008146:	e585      	b.n	8007c54 <_strtod_l+0x594>
 8008148:	2200      	movs	r2, #0
 800814a:	4b5a      	ldr	r3, [pc, #360]	; (80082b4 <_strtod_l+0xbf4>)
 800814c:	2500      	movs	r5, #0
 800814e:	920c      	str	r2, [sp, #48]	; 0x30
 8008150:	930d      	str	r3, [sp, #52]	; 0x34
 8008152:	e794      	b.n	800807e <_strtod_l+0x9be>
 8008154:	4b56      	ldr	r3, [pc, #344]	; (80082b0 <_strtod_l+0xbf0>)
 8008156:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008158:	9308      	str	r3, [sp, #32]
 800815a:	e7e4      	b.n	8008126 <_strtod_l+0xa66>
 800815c:	4b54      	ldr	r3, [pc, #336]	; (80082b0 <_strtod_l+0xbf0>)
 800815e:	9808      	ldr	r0, [sp, #32]
 8008160:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008162:	2200      	movs	r2, #0
 8008164:	f7f9 ff98 	bl	8002098 <__aeabi_dmul>
 8008168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800816a:	0005      	movs	r5, r0
 800816c:	9108      	str	r1, [sp, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d107      	bne.n	8008182 <_strtod_l+0xac2>
 8008172:	2380      	movs	r3, #128	; 0x80
 8008174:	061b      	lsls	r3, r3, #24
 8008176:	18cb      	adds	r3, r1, r3
 8008178:	9016      	str	r0, [sp, #88]	; 0x58
 800817a:	9317      	str	r3, [sp, #92]	; 0x5c
 800817c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800817e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008180:	e7da      	b.n	8008138 <_strtod_l+0xa78>
 8008182:	0002      	movs	r2, r0
 8008184:	9b08      	ldr	r3, [sp, #32]
 8008186:	9216      	str	r2, [sp, #88]	; 0x58
 8008188:	9317      	str	r3, [sp, #92]	; 0x5c
 800818a:	e7f7      	b.n	800817c <_strtod_l+0xabc>
 800818c:	23d4      	movs	r3, #212	; 0xd4
 800818e:	049b      	lsls	r3, r3, #18
 8008190:	18cf      	adds	r7, r1, r3
 8008192:	9b06      	ldr	r3, [sp, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1a1      	bne.n	80080dc <_strtod_l+0xa1c>
 8008198:	4b40      	ldr	r3, [pc, #256]	; (800829c <_strtod_l+0xbdc>)
 800819a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800819c:	970c      	str	r7, [sp, #48]	; 0x30
 800819e:	403b      	ands	r3, r7
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d19b      	bne.n	80080dc <_strtod_l+0xa1c>
 80081a4:	9908      	ldr	r1, [sp, #32]
 80081a6:	0028      	movs	r0, r5
 80081a8:	f7fa fd2c 	bl	8002c04 <__aeabi_d2iz>
 80081ac:	f7fa fd5e 	bl	8002c6c <__aeabi_i2d>
 80081b0:	000b      	movs	r3, r1
 80081b2:	0002      	movs	r2, r0
 80081b4:	9908      	ldr	r1, [sp, #32]
 80081b6:	0028      	movs	r0, r5
 80081b8:	f7fa f9ee 	bl	8002598 <__aeabi_dsub>
 80081bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081be:	9008      	str	r0, [sp, #32]
 80081c0:	9109      	str	r1, [sp, #36]	; 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d104      	bne.n	80081d0 <_strtod_l+0xb10>
 80081c6:	2e00      	cmp	r6, #0
 80081c8:	d102      	bne.n	80081d0 <_strtod_l+0xb10>
 80081ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081cc:	031b      	lsls	r3, r3, #12
 80081ce:	d058      	beq.n	8008282 <_strtod_l+0xbc2>
 80081d0:	9808      	ldr	r0, [sp, #32]
 80081d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081d4:	4a38      	ldr	r2, [pc, #224]	; (80082b8 <_strtod_l+0xbf8>)
 80081d6:	4b39      	ldr	r3, [pc, #228]	; (80082bc <_strtod_l+0xbfc>)
 80081d8:	f7f8 f934 	bl	8000444 <__aeabi_dcmplt>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d000      	beq.n	80081e2 <_strtod_l+0xb22>
 80081e0:	e4d2      	b.n	8007b88 <_strtod_l+0x4c8>
 80081e2:	9808      	ldr	r0, [sp, #32]
 80081e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081e6:	4a36      	ldr	r2, [pc, #216]	; (80082c0 <_strtod_l+0xc00>)
 80081e8:	4b31      	ldr	r3, [pc, #196]	; (80082b0 <_strtod_l+0xbf0>)
 80081ea:	f7f8 f93f 	bl	800046c <__aeabi_dcmpgt>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d100      	bne.n	80081f4 <_strtod_l+0xb34>
 80081f2:	e773      	b.n	80080dc <_strtod_l+0xa1c>
 80081f4:	e4c8      	b.n	8007b88 <_strtod_l+0x4c8>
 80081f6:	9b06      	ldr	r3, [sp, #24]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d02a      	beq.n	8008252 <_strtod_l+0xb92>
 80081fc:	23d4      	movs	r3, #212	; 0xd4
 80081fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008200:	04db      	lsls	r3, r3, #19
 8008202:	429a      	cmp	r2, r3
 8008204:	d825      	bhi.n	8008252 <_strtod_l+0xb92>
 8008206:	4a2f      	ldr	r2, [pc, #188]	; (80082c4 <_strtod_l+0xc04>)
 8008208:	4b2f      	ldr	r3, [pc, #188]	; (80082c8 <_strtod_l+0xc08>)
 800820a:	0028      	movs	r0, r5
 800820c:	9908      	ldr	r1, [sp, #32]
 800820e:	f7f8 f923 	bl	8000458 <__aeabi_dcmple>
 8008212:	2800      	cmp	r0, #0
 8008214:	d016      	beq.n	8008244 <_strtod_l+0xb84>
 8008216:	0028      	movs	r0, r5
 8008218:	9908      	ldr	r1, [sp, #32]
 800821a:	f7f8 f995 	bl	8000548 <__aeabi_d2uiz>
 800821e:	2800      	cmp	r0, #0
 8008220:	d100      	bne.n	8008224 <_strtod_l+0xb64>
 8008222:	3001      	adds	r0, #1
 8008224:	f7fa fd64 	bl	8002cf0 <__aeabi_ui2d>
 8008228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800822a:	0005      	movs	r5, r0
 800822c:	9108      	str	r1, [sp, #32]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d122      	bne.n	8008278 <_strtod_l+0xbb8>
 8008232:	2380      	movs	r3, #128	; 0x80
 8008234:	061b      	lsls	r3, r3, #24
 8008236:	18cb      	adds	r3, r1, r3
 8008238:	9018      	str	r0, [sp, #96]	; 0x60
 800823a:	9319      	str	r3, [sp, #100]	; 0x64
 800823c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800823e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008240:	920c      	str	r2, [sp, #48]	; 0x30
 8008242:	930d      	str	r3, [sp, #52]	; 0x34
 8008244:	22d6      	movs	r2, #214	; 0xd6
 8008246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008248:	04d2      	lsls	r2, r2, #19
 800824a:	189b      	adds	r3, r3, r2
 800824c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	930d      	str	r3, [sp, #52]	; 0x34
 8008252:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008254:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008256:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008258:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800825a:	f001 f89f 	bl	800939c <__ulp>
 800825e:	0002      	movs	r2, r0
 8008260:	000b      	movs	r3, r1
 8008262:	0030      	movs	r0, r6
 8008264:	0039      	movs	r1, r7
 8008266:	f7f9 ff17 	bl	8002098 <__aeabi_dmul>
 800826a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800826c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800826e:	f7f8 ffcf 	bl	8001210 <__aeabi_dadd>
 8008272:	0006      	movs	r6, r0
 8008274:	000f      	movs	r7, r1
 8008276:	e78c      	b.n	8008192 <_strtod_l+0xad2>
 8008278:	0002      	movs	r2, r0
 800827a:	9b08      	ldr	r3, [sp, #32]
 800827c:	9218      	str	r2, [sp, #96]	; 0x60
 800827e:	9319      	str	r3, [sp, #100]	; 0x64
 8008280:	e7dc      	b.n	800823c <_strtod_l+0xb7c>
 8008282:	4a0d      	ldr	r2, [pc, #52]	; (80082b8 <_strtod_l+0xbf8>)
 8008284:	4b11      	ldr	r3, [pc, #68]	; (80082cc <_strtod_l+0xc0c>)
 8008286:	9808      	ldr	r0, [sp, #32]
 8008288:	9909      	ldr	r1, [sp, #36]	; 0x24
 800828a:	f7f8 f8db 	bl	8000444 <__aeabi_dcmplt>
 800828e:	e7ae      	b.n	80081ee <_strtod_l+0xb2e>
 8008290:	fff00000 	.word	0xfff00000
 8008294:	000fffff 	.word	0x000fffff
 8008298:	3ff00000 	.word	0x3ff00000
 800829c:	7ff00000 	.word	0x7ff00000
 80082a0:	7fe00000 	.word	0x7fe00000
 80082a4:	fcb00000 	.word	0xfcb00000
 80082a8:	7c9fffff 	.word	0x7c9fffff
 80082ac:	7fefffff 	.word	0x7fefffff
 80082b0:	3fe00000 	.word	0x3fe00000
 80082b4:	bff00000 	.word	0xbff00000
 80082b8:	94a03595 	.word	0x94a03595
 80082bc:	3fdfffff 	.word	0x3fdfffff
 80082c0:	35afe535 	.word	0x35afe535
 80082c4:	ffc00000 	.word	0xffc00000
 80082c8:	41dfffff 	.word	0x41dfffff
 80082cc:	3fcfffff 	.word	0x3fcfffff

080082d0 <strtof>:
 80082d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082d2:	4f23      	ldr	r7, [pc, #140]	; (8008360 <strtof+0x90>)
 80082d4:	0004      	movs	r4, r0
 80082d6:	6838      	ldr	r0, [r7, #0]
 80082d8:	000a      	movs	r2, r1
 80082da:	6a03      	ldr	r3, [r0, #32]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d100      	bne.n	80082e2 <strtof+0x12>
 80082e0:	4b20      	ldr	r3, [pc, #128]	; (8008364 <strtof+0x94>)
 80082e2:	0021      	movs	r1, r4
 80082e4:	f7ff f9ec 	bl	80076c0 <_strtod_l>
 80082e8:	0005      	movs	r5, r0
 80082ea:	000c      	movs	r4, r1
 80082ec:	0002      	movs	r2, r0
 80082ee:	000b      	movs	r3, r1
 80082f0:	0028      	movs	r0, r5
 80082f2:	0021      	movs	r1, r4
 80082f4:	f7fa fc66 	bl	8002bc4 <__aeabi_dcmpun>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d005      	beq.n	8008308 <strtof+0x38>
 80082fc:	2000      	movs	r0, #0
 80082fe:	f001 f973 	bl	80095e8 <nanf>
 8008302:	9001      	str	r0, [sp, #4]
 8008304:	9801      	ldr	r0, [sp, #4]
 8008306:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008308:	0021      	movs	r1, r4
 800830a:	0028      	movs	r0, r5
 800830c:	f7fa fd28 	bl	8002d60 <__aeabi_d2f>
 8008310:	9001      	str	r0, [sp, #4]
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	4914      	ldr	r1, [pc, #80]	; (8008368 <strtof+0x98>)
 8008316:	005e      	lsls	r6, r3, #1
 8008318:	0876      	lsrs	r6, r6, #1
 800831a:	1c30      	adds	r0, r6, #0
 800831c:	f7f8 ff10 	bl	8001140 <__aeabi_fcmpun>
 8008320:	2800      	cmp	r0, #0
 8008322:	d1ef      	bne.n	8008304 <strtof+0x34>
 8008324:	4910      	ldr	r1, [pc, #64]	; (8008368 <strtof+0x98>)
 8008326:	1c30      	adds	r0, r6, #0
 8008328:	f7f8 f8d0 	bl	80004cc <__aeabi_fcmple>
 800832c:	2800      	cmp	r0, #0
 800832e:	d1e9      	bne.n	8008304 <strtof+0x34>
 8008330:	2201      	movs	r2, #1
 8008332:	0064      	lsls	r4, r4, #1
 8008334:	0864      	lsrs	r4, r4, #1
 8008336:	4252      	negs	r2, r2
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <strtof+0x9c>)
 800833a:	0028      	movs	r0, r5
 800833c:	0021      	movs	r1, r4
 800833e:	f7fa fc41 	bl	8002bc4 <__aeabi_dcmpun>
 8008342:	2800      	cmp	r0, #0
 8008344:	d108      	bne.n	8008358 <strtof+0x88>
 8008346:	2201      	movs	r2, #1
 8008348:	4b08      	ldr	r3, [pc, #32]	; (800836c <strtof+0x9c>)
 800834a:	4252      	negs	r2, r2
 800834c:	0028      	movs	r0, r5
 800834e:	0021      	movs	r1, r4
 8008350:	f7f8 f882 	bl	8000458 <__aeabi_dcmple>
 8008354:	2800      	cmp	r0, #0
 8008356:	d0d5      	beq.n	8008304 <strtof+0x34>
 8008358:	2222      	movs	r2, #34	; 0x22
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	e7d1      	b.n	8008304 <strtof+0x34>
 8008360:	20000004 	.word	0x20000004
 8008364:	20000508 	.word	0x20000508
 8008368:	7f7fffff 	.word	0x7f7fffff
 800836c:	7fefffff 	.word	0x7fefffff

08008370 <strtok>:
 8008370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008372:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <strtok+0x50>)
 8008374:	0006      	movs	r6, r0
 8008376:	681d      	ldr	r5, [r3, #0]
 8008378:	000f      	movs	r7, r1
 800837a:	35e8      	adds	r5, #232	; 0xe8
 800837c:	682c      	ldr	r4, [r5, #0]
 800837e:	2c00      	cmp	r4, #0
 8008380:	d116      	bne.n	80083b0 <strtok+0x40>
 8008382:	2050      	movs	r0, #80	; 0x50
 8008384:	f000 fd20 	bl	8008dc8 <malloc>
 8008388:	6028      	str	r0, [r5, #0]
 800838a:	6004      	str	r4, [r0, #0]
 800838c:	6044      	str	r4, [r0, #4]
 800838e:	6084      	str	r4, [r0, #8]
 8008390:	60c4      	str	r4, [r0, #12]
 8008392:	6104      	str	r4, [r0, #16]
 8008394:	6144      	str	r4, [r0, #20]
 8008396:	6184      	str	r4, [r0, #24]
 8008398:	6284      	str	r4, [r0, #40]	; 0x28
 800839a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800839c:	6304      	str	r4, [r0, #48]	; 0x30
 800839e:	6344      	str	r4, [r0, #52]	; 0x34
 80083a0:	6384      	str	r4, [r0, #56]	; 0x38
 80083a2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80083a4:	6404      	str	r4, [r0, #64]	; 0x40
 80083a6:	6444      	str	r4, [r0, #68]	; 0x44
 80083a8:	6484      	str	r4, [r0, #72]	; 0x48
 80083aa:	64c4      	str	r4, [r0, #76]	; 0x4c
 80083ac:	7704      	strb	r4, [r0, #28]
 80083ae:	6244      	str	r4, [r0, #36]	; 0x24
 80083b0:	682a      	ldr	r2, [r5, #0]
 80083b2:	0039      	movs	r1, r7
 80083b4:	0030      	movs	r0, r6
 80083b6:	2301      	movs	r3, #1
 80083b8:	f000 f804 	bl	80083c4 <__strtok_r>
 80083bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	20000004 	.word	0x20000004

080083c4 <__strtok_r>:
 80083c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d104      	bne.n	80083d4 <__strtok_r+0x10>
 80083ca:	6810      	ldr	r0, [r2, #0]
 80083cc:	2800      	cmp	r0, #0
 80083ce:	d101      	bne.n	80083d4 <__strtok_r+0x10>
 80083d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d2:	0020      	movs	r0, r4
 80083d4:	000e      	movs	r6, r1
 80083d6:	7805      	ldrb	r5, [r0, #0]
 80083d8:	1c44      	adds	r4, r0, #1
 80083da:	7837      	ldrb	r7, [r6, #0]
 80083dc:	2f00      	cmp	r7, #0
 80083de:	d104      	bne.n	80083ea <__strtok_r+0x26>
 80083e0:	2d00      	cmp	r5, #0
 80083e2:	d110      	bne.n	8008406 <__strtok_r+0x42>
 80083e4:	6015      	str	r5, [r2, #0]
 80083e6:	0028      	movs	r0, r5
 80083e8:	e7f2      	b.n	80083d0 <__strtok_r+0xc>
 80083ea:	3601      	adds	r6, #1
 80083ec:	42bd      	cmp	r5, r7
 80083ee:	d1f4      	bne.n	80083da <__strtok_r+0x16>
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1ee      	bne.n	80083d2 <__strtok_r+0xe>
 80083f4:	6014      	str	r4, [r2, #0]
 80083f6:	7003      	strb	r3, [r0, #0]
 80083f8:	e7ea      	b.n	80083d0 <__strtok_r+0xc>
 80083fa:	0033      	movs	r3, r6
 80083fc:	e00e      	b.n	800841c <__strtok_r+0x58>
 80083fe:	3501      	adds	r5, #1
 8008400:	001c      	movs	r4, r3
 8008402:	2f00      	cmp	r7, #0
 8008404:	d102      	bne.n	800840c <__strtok_r+0x48>
 8008406:	000d      	movs	r5, r1
 8008408:	7826      	ldrb	r6, [r4, #0]
 800840a:	1c63      	adds	r3, r4, #1
 800840c:	782f      	ldrb	r7, [r5, #0]
 800840e:	42be      	cmp	r6, r7
 8008410:	d1f5      	bne.n	80083fe <__strtok_r+0x3a>
 8008412:	2e00      	cmp	r6, #0
 8008414:	d0f1      	beq.n	80083fa <__strtok_r+0x36>
 8008416:	2400      	movs	r4, #0
 8008418:	1e59      	subs	r1, r3, #1
 800841a:	700c      	strb	r4, [r1, #0]
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	e7d7      	b.n	80083d0 <__strtok_r+0xc>

08008420 <_strtol_l.isra.0>:
 8008420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008422:	001f      	movs	r7, r3
 8008424:	000e      	movs	r6, r1
 8008426:	b087      	sub	sp, #28
 8008428:	9005      	str	r0, [sp, #20]
 800842a:	9103      	str	r1, [sp, #12]
 800842c:	9202      	str	r2, [sp, #8]
 800842e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008430:	7834      	ldrb	r4, [r6, #0]
 8008432:	f000 fcc2 	bl	8008dba <__locale_ctype_ptr_l>
 8008436:	2208      	movs	r2, #8
 8008438:	1900      	adds	r0, r0, r4
 800843a:	7843      	ldrb	r3, [r0, #1]
 800843c:	1c75      	adds	r5, r6, #1
 800843e:	4013      	ands	r3, r2
 8008440:	d10c      	bne.n	800845c <_strtol_l.isra.0+0x3c>
 8008442:	2c2d      	cmp	r4, #45	; 0x2d
 8008444:	d10c      	bne.n	8008460 <_strtol_l.isra.0+0x40>
 8008446:	3301      	adds	r3, #1
 8008448:	782c      	ldrb	r4, [r5, #0]
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	1cb5      	adds	r5, r6, #2
 800844e:	2f00      	cmp	r7, #0
 8008450:	d00c      	beq.n	800846c <_strtol_l.isra.0+0x4c>
 8008452:	2f10      	cmp	r7, #16
 8008454:	d114      	bne.n	8008480 <_strtol_l.isra.0+0x60>
 8008456:	2c30      	cmp	r4, #48	; 0x30
 8008458:	d00a      	beq.n	8008470 <_strtol_l.isra.0+0x50>
 800845a:	e011      	b.n	8008480 <_strtol_l.isra.0+0x60>
 800845c:	002e      	movs	r6, r5
 800845e:	e7e6      	b.n	800842e <_strtol_l.isra.0+0xe>
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	2c2b      	cmp	r4, #43	; 0x2b
 8008464:	d1f3      	bne.n	800844e <_strtol_l.isra.0+0x2e>
 8008466:	782c      	ldrb	r4, [r5, #0]
 8008468:	1cb5      	adds	r5, r6, #2
 800846a:	e7f0      	b.n	800844e <_strtol_l.isra.0+0x2e>
 800846c:	2c30      	cmp	r4, #48	; 0x30
 800846e:	d12f      	bne.n	80084d0 <_strtol_l.isra.0+0xb0>
 8008470:	2220      	movs	r2, #32
 8008472:	782b      	ldrb	r3, [r5, #0]
 8008474:	4393      	bics	r3, r2
 8008476:	2b58      	cmp	r3, #88	; 0x58
 8008478:	d151      	bne.n	800851e <_strtol_l.isra.0+0xfe>
 800847a:	2710      	movs	r7, #16
 800847c:	786c      	ldrb	r4, [r5, #1]
 800847e:	3502      	adds	r5, #2
 8008480:	9b01      	ldr	r3, [sp, #4]
 8008482:	4a29      	ldr	r2, [pc, #164]	; (8008528 <_strtol_l.isra.0+0x108>)
 8008484:	0039      	movs	r1, r7
 8008486:	189e      	adds	r6, r3, r2
 8008488:	0030      	movs	r0, r6
 800848a:	f7f7 fed5 	bl	8000238 <__aeabi_uidivmod>
 800848e:	0030      	movs	r0, r6
 8008490:	9104      	str	r1, [sp, #16]
 8008492:	0039      	movs	r1, r7
 8008494:	f7f7 fe4a 	bl	800012c <__udivsi3>
 8008498:	2101      	movs	r1, #1
 800849a:	2300      	movs	r3, #0
 800849c:	4249      	negs	r1, r1
 800849e:	0002      	movs	r2, r0
 80084a0:	468c      	mov	ip, r1
 80084a2:	0018      	movs	r0, r3
 80084a4:	0021      	movs	r1, r4
 80084a6:	3930      	subs	r1, #48	; 0x30
 80084a8:	2909      	cmp	r1, #9
 80084aa:	d813      	bhi.n	80084d4 <_strtol_l.isra.0+0xb4>
 80084ac:	000c      	movs	r4, r1
 80084ae:	42a7      	cmp	r7, r4
 80084b0:	dd1c      	ble.n	80084ec <_strtol_l.isra.0+0xcc>
 80084b2:	1c59      	adds	r1, r3, #1
 80084b4:	d009      	beq.n	80084ca <_strtol_l.isra.0+0xaa>
 80084b6:	4663      	mov	r3, ip
 80084b8:	4282      	cmp	r2, r0
 80084ba:	d306      	bcc.n	80084ca <_strtol_l.isra.0+0xaa>
 80084bc:	d102      	bne.n	80084c4 <_strtol_l.isra.0+0xa4>
 80084be:	9904      	ldr	r1, [sp, #16]
 80084c0:	42a1      	cmp	r1, r4
 80084c2:	db02      	blt.n	80084ca <_strtol_l.isra.0+0xaa>
 80084c4:	2301      	movs	r3, #1
 80084c6:	4378      	muls	r0, r7
 80084c8:	1820      	adds	r0, r4, r0
 80084ca:	782c      	ldrb	r4, [r5, #0]
 80084cc:	3501      	adds	r5, #1
 80084ce:	e7e9      	b.n	80084a4 <_strtol_l.isra.0+0x84>
 80084d0:	270a      	movs	r7, #10
 80084d2:	e7d5      	b.n	8008480 <_strtol_l.isra.0+0x60>
 80084d4:	0021      	movs	r1, r4
 80084d6:	3941      	subs	r1, #65	; 0x41
 80084d8:	2919      	cmp	r1, #25
 80084da:	d801      	bhi.n	80084e0 <_strtol_l.isra.0+0xc0>
 80084dc:	3c37      	subs	r4, #55	; 0x37
 80084de:	e7e6      	b.n	80084ae <_strtol_l.isra.0+0x8e>
 80084e0:	0021      	movs	r1, r4
 80084e2:	3961      	subs	r1, #97	; 0x61
 80084e4:	2919      	cmp	r1, #25
 80084e6:	d801      	bhi.n	80084ec <_strtol_l.isra.0+0xcc>
 80084e8:	3c57      	subs	r4, #87	; 0x57
 80084ea:	e7e0      	b.n	80084ae <_strtol_l.isra.0+0x8e>
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	d108      	bne.n	8008502 <_strtol_l.isra.0+0xe2>
 80084f0:	9a05      	ldr	r2, [sp, #20]
 80084f2:	3323      	adds	r3, #35	; 0x23
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	0030      	movs	r0, r6
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10b      	bne.n	8008516 <_strtol_l.isra.0+0xf6>
 80084fe:	b007      	add	sp, #28
 8008500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008502:	9a01      	ldr	r2, [sp, #4]
 8008504:	2a00      	cmp	r2, #0
 8008506:	d000      	beq.n	800850a <_strtol_l.isra.0+0xea>
 8008508:	4240      	negs	r0, r0
 800850a:	9a02      	ldr	r2, [sp, #8]
 800850c:	2a00      	cmp	r2, #0
 800850e:	d0f6      	beq.n	80084fe <_strtol_l.isra.0+0xde>
 8008510:	9a03      	ldr	r2, [sp, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d000      	beq.n	8008518 <_strtol_l.isra.0+0xf8>
 8008516:	1e6a      	subs	r2, r5, #1
 8008518:	9b02      	ldr	r3, [sp, #8]
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	e7ef      	b.n	80084fe <_strtol_l.isra.0+0xde>
 800851e:	2430      	movs	r4, #48	; 0x30
 8008520:	2f00      	cmp	r7, #0
 8008522:	d1ad      	bne.n	8008480 <_strtol_l.isra.0+0x60>
 8008524:	3708      	adds	r7, #8
 8008526:	e7ab      	b.n	8008480 <_strtol_l.isra.0+0x60>
 8008528:	7fffffff 	.word	0x7fffffff

0800852c <strtol>:
 800852c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800852e:	0013      	movs	r3, r2
 8008530:	4a06      	ldr	r2, [pc, #24]	; (800854c <strtol+0x20>)
 8008532:	0005      	movs	r5, r0
 8008534:	6810      	ldr	r0, [r2, #0]
 8008536:	6a04      	ldr	r4, [r0, #32]
 8008538:	2c00      	cmp	r4, #0
 800853a:	d100      	bne.n	800853e <strtol+0x12>
 800853c:	4c04      	ldr	r4, [pc, #16]	; (8008550 <strtol+0x24>)
 800853e:	000a      	movs	r2, r1
 8008540:	9400      	str	r4, [sp, #0]
 8008542:	0029      	movs	r1, r5
 8008544:	f7ff ff6c 	bl	8008420 <_strtol_l.isra.0>
 8008548:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	20000004 	.word	0x20000004
 8008550:	20000508 	.word	0x20000508

08008554 <_malloc_trim_r>:
 8008554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008556:	4f25      	ldr	r7, [pc, #148]	; (80085ec <_malloc_trim_r+0x98>)
 8008558:	000c      	movs	r4, r1
 800855a:	0005      	movs	r5, r0
 800855c:	f7ff f850 	bl	8007600 <__malloc_lock>
 8008560:	0038      	movs	r0, r7
 8008562:	2203      	movs	r2, #3
 8008564:	4e22      	ldr	r6, [pc, #136]	; (80085f0 <_malloc_trim_r+0x9c>)
 8008566:	3811      	subs	r0, #17
 8008568:	68b3      	ldr	r3, [r6, #8]
 800856a:	1b00      	subs	r0, r0, r4
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	0039      	movs	r1, r7
 8008570:	4393      	bics	r3, r2
 8008572:	18c0      	adds	r0, r0, r3
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	f7f7 fdd9 	bl	800012c <__udivsi3>
 800857a:	1e44      	subs	r4, r0, #1
 800857c:	437c      	muls	r4, r7
 800857e:	42bc      	cmp	r4, r7
 8008580:	da04      	bge.n	800858c <_malloc_trim_r+0x38>
 8008582:	0028      	movs	r0, r5
 8008584:	f7ff f844 	bl	8007610 <__malloc_unlock>
 8008588:	2000      	movs	r0, #0
 800858a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800858c:	2100      	movs	r1, #0
 800858e:	0028      	movs	r0, r5
 8008590:	f7ff f846 	bl	8007620 <_sbrk_r>
 8008594:	68b3      	ldr	r3, [r6, #8]
 8008596:	9a01      	ldr	r2, [sp, #4]
 8008598:	189b      	adds	r3, r3, r2
 800859a:	4298      	cmp	r0, r3
 800859c:	d1f1      	bne.n	8008582 <_malloc_trim_r+0x2e>
 800859e:	4261      	negs	r1, r4
 80085a0:	0028      	movs	r0, r5
 80085a2:	f7ff f83d 	bl	8007620 <_sbrk_r>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	d110      	bne.n	80085cc <_malloc_trim_r+0x78>
 80085aa:	2100      	movs	r1, #0
 80085ac:	0028      	movs	r0, r5
 80085ae:	f7ff f837 	bl	8007620 <_sbrk_r>
 80085b2:	68b2      	ldr	r2, [r6, #8]
 80085b4:	1a81      	subs	r1, r0, r2
 80085b6:	290f      	cmp	r1, #15
 80085b8:	dde3      	ble.n	8008582 <_malloc_trim_r+0x2e>
 80085ba:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <_malloc_trim_r+0xa0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	1ac0      	subs	r0, r0, r3
 80085c0:	4b0d      	ldr	r3, [pc, #52]	; (80085f8 <_malloc_trim_r+0xa4>)
 80085c2:	6018      	str	r0, [r3, #0]
 80085c4:	2301      	movs	r3, #1
 80085c6:	430b      	orrs	r3, r1
 80085c8:	6053      	str	r3, [r2, #4]
 80085ca:	e7da      	b.n	8008582 <_malloc_trim_r+0x2e>
 80085cc:	68b2      	ldr	r2, [r6, #8]
 80085ce:	2601      	movs	r6, #1
 80085d0:	9b01      	ldr	r3, [sp, #4]
 80085d2:	0028      	movs	r0, r5
 80085d4:	1b1b      	subs	r3, r3, r4
 80085d6:	4333      	orrs	r3, r6
 80085d8:	6053      	str	r3, [r2, #4]
 80085da:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <_malloc_trim_r+0xa4>)
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	1b14      	subs	r4, r2, r4
 80085e0:	601c      	str	r4, [r3, #0]
 80085e2:	f7ff f815 	bl	8007610 <__malloc_unlock>
 80085e6:	0030      	movs	r0, r6
 80085e8:	e7cf      	b.n	800858a <_malloc_trim_r+0x36>
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	00000080 	.word	0x00000080
 80085f0:	200000f8 	.word	0x200000f8
 80085f4:	20000500 	.word	0x20000500
 80085f8:	20000690 	.word	0x20000690

080085fc <_free_r>:
 80085fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085fe:	1e0d      	subs	r5, r1, #0
 8008600:	9001      	str	r0, [sp, #4]
 8008602:	d02d      	beq.n	8008660 <_free_r+0x64>
 8008604:	f7fe fffc 	bl	8007600 <__malloc_lock>
 8008608:	2301      	movs	r3, #1
 800860a:	0029      	movs	r1, r5
 800860c:	469c      	mov	ip, r3
 800860e:	3908      	subs	r1, #8
 8008610:	684f      	ldr	r7, [r1, #4]
 8008612:	4662      	mov	r2, ip
 8008614:	003b      	movs	r3, r7
 8008616:	4666      	mov	r6, ip
 8008618:	4393      	bics	r3, r2
 800861a:	18c8      	adds	r0, r1, r3
 800861c:	6845      	ldr	r5, [r0, #4]
 800861e:	3202      	adds	r2, #2
 8008620:	4395      	bics	r5, r2
 8008622:	4a4a      	ldr	r2, [pc, #296]	; (800874c <_free_r+0x150>)
 8008624:	4037      	ands	r7, r6
 8008626:	6896      	ldr	r6, [r2, #8]
 8008628:	42b0      	cmp	r0, r6
 800862a:	d11a      	bne.n	8008662 <_free_r+0x66>
 800862c:	195b      	adds	r3, r3, r5
 800862e:	2f00      	cmp	r7, #0
 8008630:	d106      	bne.n	8008640 <_free_r+0x44>
 8008632:	6808      	ldr	r0, [r1, #0]
 8008634:	1a09      	subs	r1, r1, r0
 8008636:	688d      	ldr	r5, [r1, #8]
 8008638:	181b      	adds	r3, r3, r0
 800863a:	68c8      	ldr	r0, [r1, #12]
 800863c:	60e8      	str	r0, [r5, #12]
 800863e:	6085      	str	r5, [r0, #8]
 8008640:	2001      	movs	r0, #1
 8008642:	4318      	orrs	r0, r3
 8008644:	6048      	str	r0, [r1, #4]
 8008646:	6091      	str	r1, [r2, #8]
 8008648:	4a41      	ldr	r2, [pc, #260]	; (8008750 <_free_r+0x154>)
 800864a:	6812      	ldr	r2, [r2, #0]
 800864c:	4293      	cmp	r3, r2
 800864e:	d304      	bcc.n	800865a <_free_r+0x5e>
 8008650:	4b40      	ldr	r3, [pc, #256]	; (8008754 <_free_r+0x158>)
 8008652:	9801      	ldr	r0, [sp, #4]
 8008654:	6819      	ldr	r1, [r3, #0]
 8008656:	f7ff ff7d 	bl	8008554 <_malloc_trim_r>
 800865a:	9801      	ldr	r0, [sp, #4]
 800865c:	f7fe ffd8 	bl	8007610 <__malloc_unlock>
 8008660:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008662:	2600      	movs	r6, #0
 8008664:	6045      	str	r5, [r0, #4]
 8008666:	42b7      	cmp	r7, r6
 8008668:	d109      	bne.n	800867e <_free_r+0x82>
 800866a:	680f      	ldr	r7, [r1, #0]
 800866c:	4c3a      	ldr	r4, [pc, #232]	; (8008758 <_free_r+0x15c>)
 800866e:	1bc9      	subs	r1, r1, r7
 8008670:	19db      	adds	r3, r3, r7
 8008672:	688f      	ldr	r7, [r1, #8]
 8008674:	42a7      	cmp	r7, r4
 8008676:	d02b      	beq.n	80086d0 <_free_r+0xd4>
 8008678:	68cc      	ldr	r4, [r1, #12]
 800867a:	60fc      	str	r4, [r7, #12]
 800867c:	60a7      	str	r7, [r4, #8]
 800867e:	1947      	adds	r7, r0, r5
 8008680:	687c      	ldr	r4, [r7, #4]
 8008682:	2701      	movs	r7, #1
 8008684:	423c      	tst	r4, r7
 8008686:	d10b      	bne.n	80086a0 <_free_r+0xa4>
 8008688:	195b      	adds	r3, r3, r5
 800868a:	6885      	ldr	r5, [r0, #8]
 800868c:	2e00      	cmp	r6, #0
 800868e:	d121      	bne.n	80086d4 <_free_r+0xd8>
 8008690:	4c31      	ldr	r4, [pc, #196]	; (8008758 <_free_r+0x15c>)
 8008692:	42a5      	cmp	r5, r4
 8008694:	d11e      	bne.n	80086d4 <_free_r+0xd8>
 8008696:	003e      	movs	r6, r7
 8008698:	6151      	str	r1, [r2, #20]
 800869a:	6111      	str	r1, [r2, #16]
 800869c:	60cd      	str	r5, [r1, #12]
 800869e:	608d      	str	r5, [r1, #8]
 80086a0:	2001      	movs	r0, #1
 80086a2:	0005      	movs	r5, r0
 80086a4:	431d      	orrs	r5, r3
 80086a6:	604d      	str	r5, [r1, #4]
 80086a8:	50cb      	str	r3, [r1, r3]
 80086aa:	2e00      	cmp	r6, #0
 80086ac:	d1d5      	bne.n	800865a <_free_r+0x5e>
 80086ae:	4d2b      	ldr	r5, [pc, #172]	; (800875c <_free_r+0x160>)
 80086b0:	42ab      	cmp	r3, r5
 80086b2:	d813      	bhi.n	80086dc <_free_r+0xe0>
 80086b4:	08db      	lsrs	r3, r3, #3
 80086b6:	109d      	asrs	r5, r3, #2
 80086b8:	40a8      	lsls	r0, r5
 80086ba:	6854      	ldr	r4, [r2, #4]
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	4320      	orrs	r0, r4
 80086c0:	6050      	str	r0, [r2, #4]
 80086c2:	189a      	adds	r2, r3, r2
 80086c4:	6893      	ldr	r3, [r2, #8]
 80086c6:	60ca      	str	r2, [r1, #12]
 80086c8:	608b      	str	r3, [r1, #8]
 80086ca:	6091      	str	r1, [r2, #8]
 80086cc:	60d9      	str	r1, [r3, #12]
 80086ce:	e7c4      	b.n	800865a <_free_r+0x5e>
 80086d0:	4666      	mov	r6, ip
 80086d2:	e7d4      	b.n	800867e <_free_r+0x82>
 80086d4:	68c0      	ldr	r0, [r0, #12]
 80086d6:	60e8      	str	r0, [r5, #12]
 80086d8:	6085      	str	r5, [r0, #8]
 80086da:	e7e1      	b.n	80086a0 <_free_r+0xa4>
 80086dc:	0a5d      	lsrs	r5, r3, #9
 80086de:	2d04      	cmp	r5, #4
 80086e0:	d812      	bhi.n	8008708 <_free_r+0x10c>
 80086e2:	0998      	lsrs	r0, r3, #6
 80086e4:	3038      	adds	r0, #56	; 0x38
 80086e6:	00c6      	lsls	r6, r0, #3
 80086e8:	18b6      	adds	r6, r6, r2
 80086ea:	68b5      	ldr	r5, [r6, #8]
 80086ec:	2703      	movs	r7, #3
 80086ee:	42ae      	cmp	r6, r5
 80086f0:	d125      	bne.n	800873e <_free_r+0x142>
 80086f2:	2301      	movs	r3, #1
 80086f4:	1080      	asrs	r0, r0, #2
 80086f6:	4083      	lsls	r3, r0
 80086f8:	6850      	ldr	r0, [r2, #4]
 80086fa:	4303      	orrs	r3, r0
 80086fc:	6053      	str	r3, [r2, #4]
 80086fe:	60ce      	str	r6, [r1, #12]
 8008700:	608d      	str	r5, [r1, #8]
 8008702:	60b1      	str	r1, [r6, #8]
 8008704:	60e9      	str	r1, [r5, #12]
 8008706:	e7a8      	b.n	800865a <_free_r+0x5e>
 8008708:	2d14      	cmp	r5, #20
 800870a:	d802      	bhi.n	8008712 <_free_r+0x116>
 800870c:	0028      	movs	r0, r5
 800870e:	305b      	adds	r0, #91	; 0x5b
 8008710:	e7e9      	b.n	80086e6 <_free_r+0xea>
 8008712:	2d54      	cmp	r5, #84	; 0x54
 8008714:	d802      	bhi.n	800871c <_free_r+0x120>
 8008716:	0b18      	lsrs	r0, r3, #12
 8008718:	306e      	adds	r0, #110	; 0x6e
 800871a:	e7e4      	b.n	80086e6 <_free_r+0xea>
 800871c:	20aa      	movs	r0, #170	; 0xaa
 800871e:	0040      	lsls	r0, r0, #1
 8008720:	4285      	cmp	r5, r0
 8008722:	d802      	bhi.n	800872a <_free_r+0x12e>
 8008724:	0bd8      	lsrs	r0, r3, #15
 8008726:	3077      	adds	r0, #119	; 0x77
 8008728:	e7dd      	b.n	80086e6 <_free_r+0xea>
 800872a:	4e0d      	ldr	r6, [pc, #52]	; (8008760 <_free_r+0x164>)
 800872c:	207e      	movs	r0, #126	; 0x7e
 800872e:	42b5      	cmp	r5, r6
 8008730:	d8d9      	bhi.n	80086e6 <_free_r+0xea>
 8008732:	0c98      	lsrs	r0, r3, #18
 8008734:	307c      	adds	r0, #124	; 0x7c
 8008736:	e7d6      	b.n	80086e6 <_free_r+0xea>
 8008738:	68ad      	ldr	r5, [r5, #8]
 800873a:	42ae      	cmp	r6, r5
 800873c:	d003      	beq.n	8008746 <_free_r+0x14a>
 800873e:	686a      	ldr	r2, [r5, #4]
 8008740:	43ba      	bics	r2, r7
 8008742:	4293      	cmp	r3, r2
 8008744:	d3f8      	bcc.n	8008738 <_free_r+0x13c>
 8008746:	68ee      	ldr	r6, [r5, #12]
 8008748:	e7d9      	b.n	80086fe <_free_r+0x102>
 800874a:	46c0      	nop			; (mov r8, r8)
 800874c:	200000f8 	.word	0x200000f8
 8008750:	20000504 	.word	0x20000504
 8008754:	200006c0 	.word	0x200006c0
 8008758:	20000100 	.word	0x20000100
 800875c:	000001ff 	.word	0x000001ff
 8008760:	00000554 	.word	0x00000554

08008764 <rshift>:
 8008764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008766:	0006      	movs	r6, r0
 8008768:	6905      	ldr	r5, [r0, #16]
 800876a:	3614      	adds	r6, #20
 800876c:	114b      	asrs	r3, r1, #5
 800876e:	0034      	movs	r4, r6
 8008770:	42ab      	cmp	r3, r5
 8008772:	da1a      	bge.n	80087aa <rshift+0x46>
 8008774:	221f      	movs	r2, #31
 8008776:	00ad      	lsls	r5, r5, #2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	1975      	adds	r5, r6, r5
 800877c:	18f3      	adds	r3, r6, r3
 800877e:	4011      	ands	r1, r2
 8008780:	d107      	bne.n	8008792 <rshift+0x2e>
 8008782:	001a      	movs	r2, r3
 8008784:	0033      	movs	r3, r6
 8008786:	001c      	movs	r4, r3
 8008788:	4295      	cmp	r5, r2
 800878a:	d90e      	bls.n	80087aa <rshift+0x46>
 800878c:	ca02      	ldmia	r2!, {r1}
 800878e:	c302      	stmia	r3!, {r1}
 8008790:	e7f9      	b.n	8008786 <rshift+0x22>
 8008792:	cb04      	ldmia	r3!, {r2}
 8008794:	2720      	movs	r7, #32
 8008796:	40ca      	lsrs	r2, r1
 8008798:	46b4      	mov	ip, r6
 800879a:	1a7f      	subs	r7, r7, r1
 800879c:	4664      	mov	r4, ip
 800879e:	429d      	cmp	r5, r3
 80087a0:	d809      	bhi.n	80087b6 <rshift+0x52>
 80087a2:	6022      	str	r2, [r4, #0]
 80087a4:	2a00      	cmp	r2, #0
 80087a6:	d000      	beq.n	80087aa <rshift+0x46>
 80087a8:	3404      	adds	r4, #4
 80087aa:	1ba3      	subs	r3, r4, r6
 80087ac:	109b      	asrs	r3, r3, #2
 80087ae:	6103      	str	r3, [r0, #16]
 80087b0:	d100      	bne.n	80087b4 <rshift+0x50>
 80087b2:	6143      	str	r3, [r0, #20]
 80087b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b6:	681c      	ldr	r4, [r3, #0]
 80087b8:	40bc      	lsls	r4, r7
 80087ba:	4322      	orrs	r2, r4
 80087bc:	4664      	mov	r4, ip
 80087be:	c404      	stmia	r4!, {r2}
 80087c0:	cb04      	ldmia	r3!, {r2}
 80087c2:	46a4      	mov	ip, r4
 80087c4:	40ca      	lsrs	r2, r1
 80087c6:	e7e9      	b.n	800879c <rshift+0x38>

080087c8 <__hexdig_fun>:
 80087c8:	0003      	movs	r3, r0
 80087ca:	3b30      	subs	r3, #48	; 0x30
 80087cc:	2b09      	cmp	r3, #9
 80087ce:	d803      	bhi.n	80087d8 <__hexdig_fun+0x10>
 80087d0:	3820      	subs	r0, #32
 80087d2:	b2c3      	uxtb	r3, r0
 80087d4:	0018      	movs	r0, r3
 80087d6:	4770      	bx	lr
 80087d8:	0003      	movs	r3, r0
 80087da:	3b61      	subs	r3, #97	; 0x61
 80087dc:	2b05      	cmp	r3, #5
 80087de:	d801      	bhi.n	80087e4 <__hexdig_fun+0x1c>
 80087e0:	3847      	subs	r0, #71	; 0x47
 80087e2:	e7f6      	b.n	80087d2 <__hexdig_fun+0xa>
 80087e4:	0002      	movs	r2, r0
 80087e6:	3a41      	subs	r2, #65	; 0x41
 80087e8:	2300      	movs	r3, #0
 80087ea:	2a05      	cmp	r2, #5
 80087ec:	d8f2      	bhi.n	80087d4 <__hexdig_fun+0xc>
 80087ee:	3827      	subs	r0, #39	; 0x27
 80087f0:	e7ef      	b.n	80087d2 <__hexdig_fun+0xa>

080087f2 <__gethex>:
 80087f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087f4:	b08d      	sub	sp, #52	; 0x34
 80087f6:	9005      	str	r0, [sp, #20]
 80087f8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80087fa:	9109      	str	r1, [sp, #36]	; 0x24
 80087fc:	9202      	str	r2, [sp, #8]
 80087fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008800:	f000 fade 	bl	8008dc0 <__localeconv_l>
 8008804:	6803      	ldr	r3, [r0, #0]
 8008806:	0018      	movs	r0, r3
 8008808:	9307      	str	r3, [sp, #28]
 800880a:	f7f7 fc7d 	bl	8000108 <strlen>
 800880e:	2202      	movs	r2, #2
 8008810:	9b07      	ldr	r3, [sp, #28]
 8008812:	4252      	negs	r2, r2
 8008814:	181b      	adds	r3, r3, r0
 8008816:	3b01      	subs	r3, #1
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	9004      	str	r0, [sp, #16]
 800881c:	930b      	str	r3, [sp, #44]	; 0x2c
 800881e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008820:	6819      	ldr	r1, [r3, #0]
 8008822:	1c8b      	adds	r3, r1, #2
 8008824:	1a52      	subs	r2, r2, r1
 8008826:	18d1      	adds	r1, r2, r3
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	9108      	str	r1, [sp, #32]
 800882c:	9901      	ldr	r1, [sp, #4]
 800882e:	3301      	adds	r3, #1
 8008830:	7808      	ldrb	r0, [r1, #0]
 8008832:	2830      	cmp	r0, #48	; 0x30
 8008834:	d0f7      	beq.n	8008826 <__gethex+0x34>
 8008836:	f7ff ffc7 	bl	80087c8 <__hexdig_fun>
 800883a:	1e07      	subs	r7, r0, #0
 800883c:	d000      	beq.n	8008840 <__gethex+0x4e>
 800883e:	e06b      	b.n	8008918 <__gethex+0x126>
 8008840:	9a04      	ldr	r2, [sp, #16]
 8008842:	9907      	ldr	r1, [sp, #28]
 8008844:	9801      	ldr	r0, [sp, #4]
 8008846:	f000 fed3 	bl	80095f0 <strncmp>
 800884a:	2800      	cmp	r0, #0
 800884c:	d000      	beq.n	8008850 <__gethex+0x5e>
 800884e:	e06b      	b.n	8008928 <__gethex+0x136>
 8008850:	9b01      	ldr	r3, [sp, #4]
 8008852:	9a04      	ldr	r2, [sp, #16]
 8008854:	189c      	adds	r4, r3, r2
 8008856:	7820      	ldrb	r0, [r4, #0]
 8008858:	f7ff ffb6 	bl	80087c8 <__hexdig_fun>
 800885c:	2800      	cmp	r0, #0
 800885e:	d067      	beq.n	8008930 <__gethex+0x13e>
 8008860:	9401      	str	r4, [sp, #4]
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	7818      	ldrb	r0, [r3, #0]
 8008866:	2830      	cmp	r0, #48	; 0x30
 8008868:	d052      	beq.n	8008910 <__gethex+0x11e>
 800886a:	f7ff ffad 	bl	80087c8 <__hexdig_fun>
 800886e:	4243      	negs	r3, r0
 8008870:	4143      	adcs	r3, r0
 8008872:	9303      	str	r3, [sp, #12]
 8008874:	2301      	movs	r3, #1
 8008876:	0026      	movs	r6, r4
 8008878:	9308      	str	r3, [sp, #32]
 800887a:	9c01      	ldr	r4, [sp, #4]
 800887c:	7820      	ldrb	r0, [r4, #0]
 800887e:	f7ff ffa3 	bl	80087c8 <__hexdig_fun>
 8008882:	2800      	cmp	r0, #0
 8008884:	d14c      	bne.n	8008920 <__gethex+0x12e>
 8008886:	9a04      	ldr	r2, [sp, #16]
 8008888:	9907      	ldr	r1, [sp, #28]
 800888a:	0020      	movs	r0, r4
 800888c:	f000 feb0 	bl	80095f0 <strncmp>
 8008890:	2800      	cmp	r0, #0
 8008892:	d109      	bne.n	80088a8 <__gethex+0xb6>
 8008894:	2e00      	cmp	r6, #0
 8008896:	d109      	bne.n	80088ac <__gethex+0xba>
 8008898:	9b04      	ldr	r3, [sp, #16]
 800889a:	18e4      	adds	r4, r4, r3
 800889c:	0026      	movs	r6, r4
 800889e:	7820      	ldrb	r0, [r4, #0]
 80088a0:	f7ff ff92 	bl	80087c8 <__hexdig_fun>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	d13d      	bne.n	8008924 <__gethex+0x132>
 80088a8:	1e37      	subs	r7, r6, #0
 80088aa:	d001      	beq.n	80088b0 <__gethex+0xbe>
 80088ac:	1b37      	subs	r7, r6, r4
 80088ae:	00bf      	lsls	r7, r7, #2
 80088b0:	7823      	ldrb	r3, [r4, #0]
 80088b2:	2b50      	cmp	r3, #80	; 0x50
 80088b4:	d001      	beq.n	80088ba <__gethex+0xc8>
 80088b6:	2b70      	cmp	r3, #112	; 0x70
 80088b8:	d147      	bne.n	800894a <__gethex+0x158>
 80088ba:	7863      	ldrb	r3, [r4, #1]
 80088bc:	2b2b      	cmp	r3, #43	; 0x2b
 80088be:	d03d      	beq.n	800893c <__gethex+0x14a>
 80088c0:	2b2d      	cmp	r3, #45	; 0x2d
 80088c2:	d037      	beq.n	8008934 <__gethex+0x142>
 80088c4:	2300      	movs	r3, #0
 80088c6:	1c66      	adds	r6, r4, #1
 80088c8:	9306      	str	r3, [sp, #24]
 80088ca:	7830      	ldrb	r0, [r6, #0]
 80088cc:	f7ff ff7c 	bl	80087c8 <__hexdig_fun>
 80088d0:	1e43      	subs	r3, r0, #1
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b18      	cmp	r3, #24
 80088d6:	d838      	bhi.n	800894a <__gethex+0x158>
 80088d8:	3810      	subs	r0, #16
 80088da:	0005      	movs	r5, r0
 80088dc:	3601      	adds	r6, #1
 80088de:	7830      	ldrb	r0, [r6, #0]
 80088e0:	f7ff ff72 	bl	80087c8 <__hexdig_fun>
 80088e4:	1e43      	subs	r3, r0, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b18      	cmp	r3, #24
 80088ea:	d929      	bls.n	8008940 <__gethex+0x14e>
 80088ec:	9b06      	ldr	r3, [sp, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d000      	beq.n	80088f4 <__gethex+0x102>
 80088f2:	426d      	negs	r5, r5
 80088f4:	197f      	adds	r7, r7, r5
 80088f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f8:	601e      	str	r6, [r3, #0]
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d026      	beq.n	800894e <__gethex+0x15c>
 8008900:	2600      	movs	r6, #0
 8008902:	9b08      	ldr	r3, [sp, #32]
 8008904:	42b3      	cmp	r3, r6
 8008906:	d100      	bne.n	800890a <__gethex+0x118>
 8008908:	3606      	adds	r6, #6
 800890a:	0030      	movs	r0, r6
 800890c:	b00d      	add	sp, #52	; 0x34
 800890e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008910:	9b01      	ldr	r3, [sp, #4]
 8008912:	3301      	adds	r3, #1
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	e7a4      	b.n	8008862 <__gethex+0x70>
 8008918:	2300      	movs	r3, #0
 800891a:	9303      	str	r3, [sp, #12]
 800891c:	001e      	movs	r6, r3
 800891e:	e7ac      	b.n	800887a <__gethex+0x88>
 8008920:	3401      	adds	r4, #1
 8008922:	e7ab      	b.n	800887c <__gethex+0x8a>
 8008924:	3401      	adds	r4, #1
 8008926:	e7ba      	b.n	800889e <__gethex+0xac>
 8008928:	9c01      	ldr	r4, [sp, #4]
 800892a:	2301      	movs	r3, #1
 800892c:	9303      	str	r3, [sp, #12]
 800892e:	e7bf      	b.n	80088b0 <__gethex+0xbe>
 8008930:	0007      	movs	r7, r0
 8008932:	e7fa      	b.n	800892a <__gethex+0x138>
 8008934:	2301      	movs	r3, #1
 8008936:	9306      	str	r3, [sp, #24]
 8008938:	1ca6      	adds	r6, r4, #2
 800893a:	e7c6      	b.n	80088ca <__gethex+0xd8>
 800893c:	2300      	movs	r3, #0
 800893e:	e7fa      	b.n	8008936 <__gethex+0x144>
 8008940:	230a      	movs	r3, #10
 8008942:	435d      	muls	r5, r3
 8008944:	182d      	adds	r5, r5, r0
 8008946:	3d10      	subs	r5, #16
 8008948:	e7c8      	b.n	80088dc <__gethex+0xea>
 800894a:	0026      	movs	r6, r4
 800894c:	e7d3      	b.n	80088f6 <__gethex+0x104>
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	9903      	ldr	r1, [sp, #12]
 8008952:	1ae3      	subs	r3, r4, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	2b07      	cmp	r3, #7
 8008958:	dc47      	bgt.n	80089ea <__gethex+0x1f8>
 800895a:	9805      	ldr	r0, [sp, #20]
 800895c:	f000 fa50 	bl	8008e00 <_Balloc>
 8008960:	0003      	movs	r3, r0
 8008962:	3314      	adds	r3, #20
 8008964:	9303      	str	r3, [sp, #12]
 8008966:	9308      	str	r3, [sp, #32]
 8008968:	2300      	movs	r3, #0
 800896a:	0005      	movs	r5, r0
 800896c:	001e      	movs	r6, r3
 800896e:	9306      	str	r3, [sp, #24]
 8008970:	9b01      	ldr	r3, [sp, #4]
 8008972:	42a3      	cmp	r3, r4
 8008974:	d33c      	bcc.n	80089f0 <__gethex+0x1fe>
 8008976:	9c08      	ldr	r4, [sp, #32]
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	c440      	stmia	r4!, {r6}
 800897c:	1ae4      	subs	r4, r4, r3
 800897e:	10a4      	asrs	r4, r4, #2
 8008980:	612c      	str	r4, [r5, #16]
 8008982:	0030      	movs	r0, r6
 8008984:	f000 fb08 	bl	8008f98 <__hi0bits>
 8008988:	9b02      	ldr	r3, [sp, #8]
 800898a:	0164      	lsls	r4, r4, #5
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	1a26      	subs	r6, r4, r0
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	429e      	cmp	r6, r3
 8008994:	dd5f      	ble.n	8008a56 <__gethex+0x264>
 8008996:	1af6      	subs	r6, r6, r3
 8008998:	0031      	movs	r1, r6
 800899a:	0028      	movs	r0, r5
 800899c:	f000 fe01 	bl	80095a2 <__any_on>
 80089a0:	1e04      	subs	r4, r0, #0
 80089a2:	d00f      	beq.n	80089c4 <__gethex+0x1d2>
 80089a4:	2401      	movs	r4, #1
 80089a6:	211f      	movs	r1, #31
 80089a8:	0020      	movs	r0, r4
 80089aa:	1e73      	subs	r3, r6, #1
 80089ac:	4019      	ands	r1, r3
 80089ae:	4088      	lsls	r0, r1
 80089b0:	0001      	movs	r1, r0
 80089b2:	115a      	asrs	r2, r3, #5
 80089b4:	9803      	ldr	r0, [sp, #12]
 80089b6:	0092      	lsls	r2, r2, #2
 80089b8:	5812      	ldr	r2, [r2, r0]
 80089ba:	420a      	tst	r2, r1
 80089bc:	d002      	beq.n	80089c4 <__gethex+0x1d2>
 80089be:	42a3      	cmp	r3, r4
 80089c0:	dc41      	bgt.n	8008a46 <__gethex+0x254>
 80089c2:	2402      	movs	r4, #2
 80089c4:	0031      	movs	r1, r6
 80089c6:	0028      	movs	r0, r5
 80089c8:	f7ff fecc 	bl	8008764 <rshift>
 80089cc:	19bf      	adds	r7, r7, r6
 80089ce:	9b02      	ldr	r3, [sp, #8]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	9304      	str	r3, [sp, #16]
 80089d4:	429f      	cmp	r7, r3
 80089d6:	dd4e      	ble.n	8008a76 <__gethex+0x284>
 80089d8:	0029      	movs	r1, r5
 80089da:	9805      	ldr	r0, [sp, #20]
 80089dc:	f000 fa48 	bl	8008e70 <_Bfree>
 80089e0:	2300      	movs	r3, #0
 80089e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089e4:	26a3      	movs	r6, #163	; 0xa3
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	e78f      	b.n	800890a <__gethex+0x118>
 80089ea:	3101      	adds	r1, #1
 80089ec:	105b      	asrs	r3, r3, #1
 80089ee:	e7b2      	b.n	8008956 <__gethex+0x164>
 80089f0:	1e63      	subs	r3, r4, #1
 80089f2:	9309      	str	r3, [sp, #36]	; 0x24
 80089f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d015      	beq.n	8008a28 <__gethex+0x236>
 80089fc:	9b06      	ldr	r3, [sp, #24]
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	d105      	bne.n	8008a0e <__gethex+0x21c>
 8008a02:	9b08      	ldr	r3, [sp, #32]
 8008a04:	601e      	str	r6, [r3, #0]
 8008a06:	2600      	movs	r6, #0
 8008a08:	3304      	adds	r3, #4
 8008a0a:	9308      	str	r3, [sp, #32]
 8008a0c:	9606      	str	r6, [sp, #24]
 8008a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a10:	7818      	ldrb	r0, [r3, #0]
 8008a12:	f7ff fed9 	bl	80087c8 <__hexdig_fun>
 8008a16:	230f      	movs	r3, #15
 8008a18:	4018      	ands	r0, r3
 8008a1a:	9b06      	ldr	r3, [sp, #24]
 8008a1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008a1e:	4098      	lsls	r0, r3
 8008a20:	3304      	adds	r3, #4
 8008a22:	4306      	orrs	r6, r0
 8008a24:	9306      	str	r3, [sp, #24]
 8008a26:	e7a3      	b.n	8008970 <__gethex+0x17e>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	9a04      	ldr	r2, [sp, #16]
 8008a2c:	1a9c      	subs	r4, r3, r2
 8008a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a30:	191c      	adds	r4, r3, r4
 8008a32:	9b01      	ldr	r3, [sp, #4]
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	d8e1      	bhi.n	80089fc <__gethex+0x20a>
 8008a38:	9907      	ldr	r1, [sp, #28]
 8008a3a:	0020      	movs	r0, r4
 8008a3c:	f000 fdd8 	bl	80095f0 <strncmp>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d095      	beq.n	8008970 <__gethex+0x17e>
 8008a44:	e7da      	b.n	80089fc <__gethex+0x20a>
 8008a46:	1eb1      	subs	r1, r6, #2
 8008a48:	0028      	movs	r0, r5
 8008a4a:	f000 fdaa 	bl	80095a2 <__any_on>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d0b7      	beq.n	80089c2 <__gethex+0x1d0>
 8008a52:	2403      	movs	r4, #3
 8008a54:	e7b6      	b.n	80089c4 <__gethex+0x1d2>
 8008a56:	9b01      	ldr	r3, [sp, #4]
 8008a58:	2400      	movs	r4, #0
 8008a5a:	429e      	cmp	r6, r3
 8008a5c:	dab7      	bge.n	80089ce <__gethex+0x1dc>
 8008a5e:	1b9e      	subs	r6, r3, r6
 8008a60:	0029      	movs	r1, r5
 8008a62:	0032      	movs	r2, r6
 8008a64:	9805      	ldr	r0, [sp, #20]
 8008a66:	f000 fbcb 	bl	8009200 <__lshift>
 8008a6a:	0003      	movs	r3, r0
 8008a6c:	3314      	adds	r3, #20
 8008a6e:	0005      	movs	r5, r0
 8008a70:	1bbf      	subs	r7, r7, r6
 8008a72:	9303      	str	r3, [sp, #12]
 8008a74:	e7ab      	b.n	80089ce <__gethex+0x1dc>
 8008a76:	9b02      	ldr	r3, [sp, #8]
 8008a78:	685e      	ldr	r6, [r3, #4]
 8008a7a:	42b7      	cmp	r7, r6
 8008a7c:	da6b      	bge.n	8008b56 <__gethex+0x364>
 8008a7e:	9b01      	ldr	r3, [sp, #4]
 8008a80:	1bf6      	subs	r6, r6, r7
 8008a82:	42b3      	cmp	r3, r6
 8008a84:	dc32      	bgt.n	8008aec <__gethex+0x2fa>
 8008a86:	9b02      	ldr	r3, [sp, #8]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d026      	beq.n	8008adc <__gethex+0x2ea>
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d028      	beq.n	8008ae4 <__gethex+0x2f2>
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d119      	bne.n	8008aca <__gethex+0x2d8>
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	42b3      	cmp	r3, r6
 8008a9a:	d116      	bne.n	8008aca <__gethex+0x2d8>
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	dc0d      	bgt.n	8008abc <__gethex+0x2ca>
 8008aa0:	9b02      	ldr	r3, [sp, #8]
 8008aa2:	2662      	movs	r6, #98	; 0x62
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	9a01      	ldr	r2, [sp, #4]
 8008aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	2301      	movs	r3, #1
 8008ab0:	9a03      	ldr	r2, [sp, #12]
 8008ab2:	612b      	str	r3, [r5, #16]
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ab8:	601d      	str	r5, [r3, #0]
 8008aba:	e726      	b.n	800890a <__gethex+0x118>
 8008abc:	9901      	ldr	r1, [sp, #4]
 8008abe:	0028      	movs	r0, r5
 8008ac0:	3901      	subs	r1, #1
 8008ac2:	f000 fd6e 	bl	80095a2 <__any_on>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d1ea      	bne.n	8008aa0 <__gethex+0x2ae>
 8008aca:	0029      	movs	r1, r5
 8008acc:	9805      	ldr	r0, [sp, #20]
 8008ace:	f000 f9cf 	bl	8008e70 <_Bfree>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ad6:	2650      	movs	r6, #80	; 0x50
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	e716      	b.n	800890a <__gethex+0x118>
 8008adc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0de      	beq.n	8008aa0 <__gethex+0x2ae>
 8008ae2:	e7f2      	b.n	8008aca <__gethex+0x2d8>
 8008ae4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1da      	bne.n	8008aa0 <__gethex+0x2ae>
 8008aea:	e7ee      	b.n	8008aca <__gethex+0x2d8>
 8008aec:	1e77      	subs	r7, r6, #1
 8008aee:	2c00      	cmp	r4, #0
 8008af0:	d12f      	bne.n	8008b52 <__gethex+0x360>
 8008af2:	2f00      	cmp	r7, #0
 8008af4:	d004      	beq.n	8008b00 <__gethex+0x30e>
 8008af6:	0039      	movs	r1, r7
 8008af8:	0028      	movs	r0, r5
 8008afa:	f000 fd52 	bl	80095a2 <__any_on>
 8008afe:	0004      	movs	r4, r0
 8008b00:	231f      	movs	r3, #31
 8008b02:	117a      	asrs	r2, r7, #5
 8008b04:	401f      	ands	r7, r3
 8008b06:	3b1e      	subs	r3, #30
 8008b08:	40bb      	lsls	r3, r7
 8008b0a:	9903      	ldr	r1, [sp, #12]
 8008b0c:	0092      	lsls	r2, r2, #2
 8008b0e:	5852      	ldr	r2, [r2, r1]
 8008b10:	421a      	tst	r2, r3
 8008b12:	d001      	beq.n	8008b18 <__gethex+0x326>
 8008b14:	2302      	movs	r3, #2
 8008b16:	431c      	orrs	r4, r3
 8008b18:	9b01      	ldr	r3, [sp, #4]
 8008b1a:	0031      	movs	r1, r6
 8008b1c:	1b9b      	subs	r3, r3, r6
 8008b1e:	2602      	movs	r6, #2
 8008b20:	0028      	movs	r0, r5
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	f7ff fe1e 	bl	8008764 <rshift>
 8008b28:	9b02      	ldr	r3, [sp, #8]
 8008b2a:	685f      	ldr	r7, [r3, #4]
 8008b2c:	2c00      	cmp	r4, #0
 8008b2e:	d041      	beq.n	8008bb4 <__gethex+0x3c2>
 8008b30:	9b02      	ldr	r3, [sp, #8]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d010      	beq.n	8008b5a <__gethex+0x368>
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d012      	beq.n	8008b62 <__gethex+0x370>
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d106      	bne.n	8008b4e <__gethex+0x35c>
 8008b40:	07a2      	lsls	r2, r4, #30
 8008b42:	d504      	bpl.n	8008b4e <__gethex+0x35c>
 8008b44:	9a03      	ldr	r2, [sp, #12]
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	4314      	orrs	r4, r2
 8008b4a:	421c      	tst	r4, r3
 8008b4c:	d10c      	bne.n	8008b68 <__gethex+0x376>
 8008b4e:	2310      	movs	r3, #16
 8008b50:	e02f      	b.n	8008bb2 <__gethex+0x3c0>
 8008b52:	2401      	movs	r4, #1
 8008b54:	e7d4      	b.n	8008b00 <__gethex+0x30e>
 8008b56:	2601      	movs	r6, #1
 8008b58:	e7e8      	b.n	8008b2c <__gethex+0x33a>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d0f2      	beq.n	8008b4e <__gethex+0x35c>
 8008b68:	692c      	ldr	r4, [r5, #16]
 8008b6a:	00a3      	lsls	r3, r4, #2
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	002b      	movs	r3, r5
 8008b70:	00a2      	lsls	r2, r4, #2
 8008b72:	3314      	adds	r3, #20
 8008b74:	1899      	adds	r1, r3, r2
 8008b76:	2200      	movs	r2, #0
 8008b78:	4694      	mov	ip, r2
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	1c50      	adds	r0, r2, #1
 8008b7e:	d01e      	beq.n	8008bbe <__gethex+0x3cc>
 8008b80:	3201      	adds	r2, #1
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	002b      	movs	r3, r5
 8008b86:	3314      	adds	r3, #20
 8008b88:	2e02      	cmp	r6, #2
 8008b8a:	d13b      	bne.n	8008c04 <__gethex+0x412>
 8008b8c:	9a02      	ldr	r2, [sp, #8]
 8008b8e:	9901      	ldr	r1, [sp, #4]
 8008b90:	6812      	ldr	r2, [r2, #0]
 8008b92:	3a01      	subs	r2, #1
 8008b94:	4291      	cmp	r1, r2
 8008b96:	d10b      	bne.n	8008bb0 <__gethex+0x3be>
 8008b98:	114a      	asrs	r2, r1, #5
 8008b9a:	211f      	movs	r1, #31
 8008b9c:	9801      	ldr	r0, [sp, #4]
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	4001      	ands	r1, r0
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	0004      	movs	r4, r0
 8008ba6:	408c      	lsls	r4, r1
 8008ba8:	58d3      	ldr	r3, [r2, r3]
 8008baa:	4223      	tst	r3, r4
 8008bac:	d000      	beq.n	8008bb0 <__gethex+0x3be>
 8008bae:	2601      	movs	r6, #1
 8008bb0:	2320      	movs	r3, #32
 8008bb2:	431e      	orrs	r6, r3
 8008bb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bb6:	601d      	str	r5, [r3, #0]
 8008bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bba:	601f      	str	r7, [r3, #0]
 8008bbc:	e6a5      	b.n	800890a <__gethex+0x118>
 8008bbe:	4662      	mov	r2, ip
 8008bc0:	c304      	stmia	r3!, {r2}
 8008bc2:	4299      	cmp	r1, r3
 8008bc4:	d8d9      	bhi.n	8008b7a <__gethex+0x388>
 8008bc6:	68ab      	ldr	r3, [r5, #8]
 8008bc8:	429c      	cmp	r4, r3
 8008bca:	db12      	blt.n	8008bf2 <__gethex+0x400>
 8008bcc:	686b      	ldr	r3, [r5, #4]
 8008bce:	9805      	ldr	r0, [sp, #20]
 8008bd0:	1c59      	adds	r1, r3, #1
 8008bd2:	f000 f915 	bl	8008e00 <_Balloc>
 8008bd6:	0029      	movs	r1, r5
 8008bd8:	692b      	ldr	r3, [r5, #16]
 8008bda:	9003      	str	r0, [sp, #12]
 8008bdc:	1c9a      	adds	r2, r3, #2
 8008bde:	0092      	lsls	r2, r2, #2
 8008be0:	310c      	adds	r1, #12
 8008be2:	300c      	adds	r0, #12
 8008be4:	f7fe fcfa 	bl	80075dc <memcpy>
 8008be8:	0029      	movs	r1, r5
 8008bea:	9805      	ldr	r0, [sp, #20]
 8008bec:	f000 f940 	bl	8008e70 <_Bfree>
 8008bf0:	9d03      	ldr	r5, [sp, #12]
 8008bf2:	692b      	ldr	r3, [r5, #16]
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	612a      	str	r2, [r5, #16]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	18eb      	adds	r3, r5, r3
 8008c00:	605a      	str	r2, [r3, #4]
 8008c02:	e7bf      	b.n	8008b84 <__gethex+0x392>
 8008c04:	692a      	ldr	r2, [r5, #16]
 8008c06:	4294      	cmp	r4, r2
 8008c08:	da0a      	bge.n	8008c20 <__gethex+0x42e>
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	0028      	movs	r0, r5
 8008c0e:	f7ff fda9 	bl	8008764 <rshift>
 8008c12:	9b02      	ldr	r3, [sp, #8]
 8008c14:	3701      	adds	r7, #1
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	429f      	cmp	r7, r3
 8008c1a:	dd00      	ble.n	8008c1e <__gethex+0x42c>
 8008c1c:	e6dc      	b.n	80089d8 <__gethex+0x1e6>
 8008c1e:	e7c6      	b.n	8008bae <__gethex+0x3bc>
 8008c20:	241f      	movs	r4, #31
 8008c22:	9a01      	ldr	r2, [sp, #4]
 8008c24:	2601      	movs	r6, #1
 8008c26:	4022      	ands	r2, r4
 8008c28:	1e14      	subs	r4, r2, #0
 8008c2a:	d0c1      	beq.n	8008bb0 <__gethex+0x3be>
 8008c2c:	9a04      	ldr	r2, [sp, #16]
 8008c2e:	189b      	adds	r3, r3, r2
 8008c30:	3b04      	subs	r3, #4
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	f000 f9b0 	bl	8008f98 <__hi0bits>
 8008c38:	2120      	movs	r1, #32
 8008c3a:	1b0c      	subs	r4, r1, r4
 8008c3c:	42a0      	cmp	r0, r4
 8008c3e:	dbe4      	blt.n	8008c0a <__gethex+0x418>
 8008c40:	e7b6      	b.n	8008bb0 <__gethex+0x3be>

08008c42 <L_shift>:
 8008c42:	2308      	movs	r3, #8
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	2520      	movs	r5, #32
 8008c48:	1a9a      	subs	r2, r3, r2
 8008c4a:	0092      	lsls	r2, r2, #2
 8008c4c:	1aad      	subs	r5, r5, r2
 8008c4e:	6843      	ldr	r3, [r0, #4]
 8008c50:	6806      	ldr	r6, [r0, #0]
 8008c52:	001c      	movs	r4, r3
 8008c54:	40ac      	lsls	r4, r5
 8008c56:	40d3      	lsrs	r3, r2
 8008c58:	4334      	orrs	r4, r6
 8008c5a:	c010      	stmia	r0!, {r4}
 8008c5c:	6003      	str	r3, [r0, #0]
 8008c5e:	4288      	cmp	r0, r1
 8008c60:	d3f5      	bcc.n	8008c4e <L_shift+0xc>
 8008c62:	bd70      	pop	{r4, r5, r6, pc}

08008c64 <__match>:
 8008c64:	b530      	push	{r4, r5, lr}
 8008c66:	6803      	ldr	r3, [r0, #0]
 8008c68:	780c      	ldrb	r4, [r1, #0]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	2c00      	cmp	r4, #0
 8008c6e:	d102      	bne.n	8008c76 <__match+0x12>
 8008c70:	6003      	str	r3, [r0, #0]
 8008c72:	2001      	movs	r0, #1
 8008c74:	bd30      	pop	{r4, r5, pc}
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	0015      	movs	r5, r2
 8008c7a:	3d41      	subs	r5, #65	; 0x41
 8008c7c:	2d19      	cmp	r5, #25
 8008c7e:	d800      	bhi.n	8008c82 <__match+0x1e>
 8008c80:	3220      	adds	r2, #32
 8008c82:	3101      	adds	r1, #1
 8008c84:	42a2      	cmp	r2, r4
 8008c86:	d0ef      	beq.n	8008c68 <__match+0x4>
 8008c88:	2000      	movs	r0, #0
 8008c8a:	e7f3      	b.n	8008c74 <__match+0x10>

08008c8c <__hexnan>:
 8008c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8e:	b08b      	sub	sp, #44	; 0x2c
 8008c90:	9201      	str	r2, [sp, #4]
 8008c92:	680a      	ldr	r2, [r1, #0]
 8008c94:	9901      	ldr	r1, [sp, #4]
 8008c96:	1153      	asrs	r3, r2, #5
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	18cb      	adds	r3, r1, r3
 8008c9c:	9303      	str	r3, [sp, #12]
 8008c9e:	231f      	movs	r3, #31
 8008ca0:	401a      	ands	r2, r3
 8008ca2:	9008      	str	r0, [sp, #32]
 8008ca4:	9206      	str	r2, [sp, #24]
 8008ca6:	d002      	beq.n	8008cae <__hexnan+0x22>
 8008ca8:	9b03      	ldr	r3, [sp, #12]
 8008caa:	3304      	adds	r3, #4
 8008cac:	9303      	str	r3, [sp, #12]
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	2500      	movs	r5, #0
 8008cb2:	1f1e      	subs	r6, r3, #4
 8008cb4:	0037      	movs	r7, r6
 8008cb6:	0034      	movs	r4, r6
 8008cb8:	9b08      	ldr	r3, [sp, #32]
 8008cba:	6035      	str	r5, [r6, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	9507      	str	r5, [sp, #28]
 8008cc0:	9304      	str	r3, [sp, #16]
 8008cc2:	9502      	str	r5, [sp, #8]
 8008cc4:	9b04      	ldr	r3, [sp, #16]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cca:	9b04      	ldr	r3, [sp, #16]
 8008ccc:	785b      	ldrb	r3, [r3, #1]
 8008cce:	9305      	str	r3, [sp, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d028      	beq.n	8008d26 <__hexnan+0x9a>
 8008cd4:	9805      	ldr	r0, [sp, #20]
 8008cd6:	f7ff fd77 	bl	80087c8 <__hexdig_fun>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d145      	bne.n	8008d6a <__hexnan+0xde>
 8008cde:	9b05      	ldr	r3, [sp, #20]
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	d819      	bhi.n	8008d18 <__hexnan+0x8c>
 8008ce4:	9b02      	ldr	r3, [sp, #8]
 8008ce6:	9a07      	ldr	r2, [sp, #28]
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	dd12      	ble.n	8008d12 <__hexnan+0x86>
 8008cec:	42bc      	cmp	r4, r7
 8008cee:	d206      	bcs.n	8008cfe <__hexnan+0x72>
 8008cf0:	2d07      	cmp	r5, #7
 8008cf2:	dc04      	bgt.n	8008cfe <__hexnan+0x72>
 8008cf4:	002a      	movs	r2, r5
 8008cf6:	0039      	movs	r1, r7
 8008cf8:	0020      	movs	r0, r4
 8008cfa:	f7ff ffa2 	bl	8008c42 <L_shift>
 8008cfe:	9b01      	ldr	r3, [sp, #4]
 8008d00:	2508      	movs	r5, #8
 8008d02:	429c      	cmp	r4, r3
 8008d04:	d905      	bls.n	8008d12 <__hexnan+0x86>
 8008d06:	1f27      	subs	r7, r4, #4
 8008d08:	2500      	movs	r5, #0
 8008d0a:	003c      	movs	r4, r7
 8008d0c:	9b02      	ldr	r3, [sp, #8]
 8008d0e:	603d      	str	r5, [r7, #0]
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	e7d5      	b.n	8008cc4 <__hexnan+0x38>
 8008d18:	9b05      	ldr	r3, [sp, #20]
 8008d1a:	2b29      	cmp	r3, #41	; 0x29
 8008d1c:	d14a      	bne.n	8008db4 <__hexnan+0x128>
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	9a08      	ldr	r2, [sp, #32]
 8008d22:	3302      	adds	r3, #2
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	9b02      	ldr	r3, [sp, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d043      	beq.n	8008db4 <__hexnan+0x128>
 8008d2c:	42bc      	cmp	r4, r7
 8008d2e:	d206      	bcs.n	8008d3e <__hexnan+0xb2>
 8008d30:	2d07      	cmp	r5, #7
 8008d32:	dc04      	bgt.n	8008d3e <__hexnan+0xb2>
 8008d34:	002a      	movs	r2, r5
 8008d36:	0039      	movs	r1, r7
 8008d38:	0020      	movs	r0, r4
 8008d3a:	f7ff ff82 	bl	8008c42 <L_shift>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	429c      	cmp	r4, r3
 8008d42:	d926      	bls.n	8008d92 <__hexnan+0x106>
 8008d44:	cc04      	ldmia	r4!, {r2}
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	42a6      	cmp	r6, r4
 8008d4c:	d2fa      	bcs.n	8008d44 <__hexnan+0xb8>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	c304      	stmia	r3!, {r2}
 8008d52:	429e      	cmp	r6, r3
 8008d54:	d2fc      	bcs.n	8008d50 <__hexnan+0xc4>
 8008d56:	6833      	ldr	r3, [r6, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d104      	bne.n	8008d66 <__hexnan+0xda>
 8008d5c:	9b01      	ldr	r3, [sp, #4]
 8008d5e:	429e      	cmp	r6, r3
 8008d60:	d126      	bne.n	8008db0 <__hexnan+0x124>
 8008d62:	2301      	movs	r3, #1
 8008d64:	6033      	str	r3, [r6, #0]
 8008d66:	2005      	movs	r0, #5
 8008d68:	e025      	b.n	8008db6 <__hexnan+0x12a>
 8008d6a:	9b02      	ldr	r3, [sp, #8]
 8008d6c:	3501      	adds	r5, #1
 8008d6e:	3301      	adds	r3, #1
 8008d70:	9302      	str	r3, [sp, #8]
 8008d72:	2d08      	cmp	r5, #8
 8008d74:	dd06      	ble.n	8008d84 <__hexnan+0xf8>
 8008d76:	9b01      	ldr	r3, [sp, #4]
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	d9ca      	bls.n	8008d12 <__hexnan+0x86>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	2501      	movs	r5, #1
 8008d80:	3c04      	subs	r4, #4
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	220f      	movs	r2, #15
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	4010      	ands	r0, r2
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	4318      	orrs	r0, r3
 8008d8e:	6020      	str	r0, [r4, #0]
 8008d90:	e7bf      	b.n	8008d12 <__hexnan+0x86>
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0de      	beq.n	8008d56 <__hexnan+0xca>
 8008d98:	2120      	movs	r1, #32
 8008d9a:	9a06      	ldr	r2, [sp, #24]
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	1a89      	subs	r1, r1, r2
 8008da0:	2201      	movs	r2, #1
 8008da2:	4252      	negs	r2, r2
 8008da4:	40ca      	lsrs	r2, r1
 8008da6:	3b04      	subs	r3, #4
 8008da8:	6819      	ldr	r1, [r3, #0]
 8008daa:	400a      	ands	r2, r1
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	e7d2      	b.n	8008d56 <__hexnan+0xca>
 8008db0:	3e04      	subs	r6, #4
 8008db2:	e7d0      	b.n	8008d56 <__hexnan+0xca>
 8008db4:	2004      	movs	r0, #4
 8008db6:	b00b      	add	sp, #44	; 0x2c
 8008db8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008dba <__locale_ctype_ptr_l>:
 8008dba:	30ec      	adds	r0, #236	; 0xec
 8008dbc:	6800      	ldr	r0, [r0, #0]
 8008dbe:	4770      	bx	lr

08008dc0 <__localeconv_l>:
 8008dc0:	30f0      	adds	r0, #240	; 0xf0
 8008dc2:	4770      	bx	lr

08008dc4 <__retarget_lock_acquire_recursive>:
 8008dc4:	4770      	bx	lr

08008dc6 <__retarget_lock_release_recursive>:
 8008dc6:	4770      	bx	lr

08008dc8 <malloc>:
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <malloc+0x10>)
 8008dcc:	0001      	movs	r1, r0
 8008dce:	6818      	ldr	r0, [r3, #0]
 8008dd0:	f7fe fa00 	bl	80071d4 <_malloc_r>
 8008dd4:	bd10      	pop	{r4, pc}
 8008dd6:	46c0      	nop			; (mov r8, r8)
 8008dd8:	20000004 	.word	0x20000004

08008ddc <__ascii_mbtowc>:
 8008ddc:	b082      	sub	sp, #8
 8008dde:	2900      	cmp	r1, #0
 8008de0:	d100      	bne.n	8008de4 <__ascii_mbtowc+0x8>
 8008de2:	a901      	add	r1, sp, #4
 8008de4:	1e10      	subs	r0, r2, #0
 8008de6:	d006      	beq.n	8008df6 <__ascii_mbtowc+0x1a>
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d006      	beq.n	8008dfa <__ascii_mbtowc+0x1e>
 8008dec:	7813      	ldrb	r3, [r2, #0]
 8008dee:	600b      	str	r3, [r1, #0]
 8008df0:	7810      	ldrb	r0, [r2, #0]
 8008df2:	1e43      	subs	r3, r0, #1
 8008df4:	4198      	sbcs	r0, r3
 8008df6:	b002      	add	sp, #8
 8008df8:	4770      	bx	lr
 8008dfa:	2002      	movs	r0, #2
 8008dfc:	4240      	negs	r0, r0
 8008dfe:	e7fa      	b.n	8008df6 <__ascii_mbtowc+0x1a>

08008e00 <_Balloc>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e04:	0004      	movs	r4, r0
 8008e06:	000d      	movs	r5, r1
 8008e08:	2e00      	cmp	r6, #0
 8008e0a:	d107      	bne.n	8008e1c <_Balloc+0x1c>
 8008e0c:	2010      	movs	r0, #16
 8008e0e:	f7ff ffdb 	bl	8008dc8 <malloc>
 8008e12:	6260      	str	r0, [r4, #36]	; 0x24
 8008e14:	6046      	str	r6, [r0, #4]
 8008e16:	6086      	str	r6, [r0, #8]
 8008e18:	6006      	str	r6, [r0, #0]
 8008e1a:	60c6      	str	r6, [r0, #12]
 8008e1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e1e:	68f3      	ldr	r3, [r6, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d013      	beq.n	8008e4c <_Balloc+0x4c>
 8008e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e26:	00aa      	lsls	r2, r5, #2
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	189b      	adds	r3, r3, r2
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d118      	bne.n	8008e64 <_Balloc+0x64>
 8008e32:	2101      	movs	r1, #1
 8008e34:	000e      	movs	r6, r1
 8008e36:	40ae      	lsls	r6, r5
 8008e38:	1d72      	adds	r2, r6, #5
 8008e3a:	0092      	lsls	r2, r2, #2
 8008e3c:	0020      	movs	r0, r4
 8008e3e:	f7fe f979 	bl	8007134 <_calloc_r>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d00c      	beq.n	8008e60 <_Balloc+0x60>
 8008e46:	6045      	str	r5, [r0, #4]
 8008e48:	6086      	str	r6, [r0, #8]
 8008e4a:	e00d      	b.n	8008e68 <_Balloc+0x68>
 8008e4c:	2221      	movs	r2, #33	; 0x21
 8008e4e:	2104      	movs	r1, #4
 8008e50:	0020      	movs	r0, r4
 8008e52:	f7fe f96f 	bl	8007134 <_calloc_r>
 8008e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e58:	60f0      	str	r0, [r6, #12]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e1      	bne.n	8008e24 <_Balloc+0x24>
 8008e60:	2000      	movs	r0, #0
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	6802      	ldr	r2, [r0, #0]
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	6103      	str	r3, [r0, #16]
 8008e6c:	60c3      	str	r3, [r0, #12]
 8008e6e:	e7f8      	b.n	8008e62 <_Balloc+0x62>

08008e70 <_Bfree>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008e74:	0006      	movs	r6, r0
 8008e76:	000d      	movs	r5, r1
 8008e78:	2c00      	cmp	r4, #0
 8008e7a:	d107      	bne.n	8008e8c <_Bfree+0x1c>
 8008e7c:	2010      	movs	r0, #16
 8008e7e:	f7ff ffa3 	bl	8008dc8 <malloc>
 8008e82:	6270      	str	r0, [r6, #36]	; 0x24
 8008e84:	6044      	str	r4, [r0, #4]
 8008e86:	6084      	str	r4, [r0, #8]
 8008e88:	6004      	str	r4, [r0, #0]
 8008e8a:	60c4      	str	r4, [r0, #12]
 8008e8c:	2d00      	cmp	r5, #0
 8008e8e:	d007      	beq.n	8008ea0 <_Bfree+0x30>
 8008e90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008e92:	686a      	ldr	r2, [r5, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	0092      	lsls	r2, r2, #2
 8008e98:	189b      	adds	r3, r3, r2
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	602a      	str	r2, [r5, #0]
 8008e9e:	601d      	str	r5, [r3, #0]
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}

08008ea2 <__multadd>:
 8008ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ea4:	001e      	movs	r6, r3
 8008ea6:	2314      	movs	r3, #20
 8008ea8:	469c      	mov	ip, r3
 8008eaa:	0007      	movs	r7, r0
 8008eac:	000c      	movs	r4, r1
 8008eae:	2000      	movs	r0, #0
 8008eb0:	690d      	ldr	r5, [r1, #16]
 8008eb2:	448c      	add	ip, r1
 8008eb4:	4663      	mov	r3, ip
 8008eb6:	8819      	ldrh	r1, [r3, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4351      	muls	r1, r2
 8008ebc:	0c1b      	lsrs	r3, r3, #16
 8008ebe:	4353      	muls	r3, r2
 8008ec0:	1989      	adds	r1, r1, r6
 8008ec2:	0c0e      	lsrs	r6, r1, #16
 8008ec4:	199b      	adds	r3, r3, r6
 8008ec6:	b289      	uxth	r1, r1
 8008ec8:	0c1e      	lsrs	r6, r3, #16
 8008eca:	041b      	lsls	r3, r3, #16
 8008ecc:	185b      	adds	r3, r3, r1
 8008ece:	4661      	mov	r1, ip
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	c108      	stmia	r1!, {r3}
 8008ed4:	468c      	mov	ip, r1
 8008ed6:	4285      	cmp	r5, r0
 8008ed8:	dcec      	bgt.n	8008eb4 <__multadd+0x12>
 8008eda:	2e00      	cmp	r6, #0
 8008edc:	d01b      	beq.n	8008f16 <__multadd+0x74>
 8008ede:	68a3      	ldr	r3, [r4, #8]
 8008ee0:	429d      	cmp	r5, r3
 8008ee2:	db12      	blt.n	8008f0a <__multadd+0x68>
 8008ee4:	6863      	ldr	r3, [r4, #4]
 8008ee6:	0038      	movs	r0, r7
 8008ee8:	1c59      	adds	r1, r3, #1
 8008eea:	f7ff ff89 	bl	8008e00 <_Balloc>
 8008eee:	0021      	movs	r1, r4
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	9001      	str	r0, [sp, #4]
 8008ef4:	1c9a      	adds	r2, r3, #2
 8008ef6:	0092      	lsls	r2, r2, #2
 8008ef8:	310c      	adds	r1, #12
 8008efa:	300c      	adds	r0, #12
 8008efc:	f7fe fb6e 	bl	80075dc <memcpy>
 8008f00:	0021      	movs	r1, r4
 8008f02:	0038      	movs	r0, r7
 8008f04:	f7ff ffb4 	bl	8008e70 <_Bfree>
 8008f08:	9c01      	ldr	r4, [sp, #4]
 8008f0a:	1d2b      	adds	r3, r5, #4
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	18e3      	adds	r3, r4, r3
 8008f10:	3501      	adds	r5, #1
 8008f12:	605e      	str	r6, [r3, #4]
 8008f14:	6125      	str	r5, [r4, #16]
 8008f16:	0020      	movs	r0, r4
 8008f18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08008f1a <__s2b>:
 8008f1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f1c:	0006      	movs	r6, r0
 8008f1e:	0018      	movs	r0, r3
 8008f20:	000c      	movs	r4, r1
 8008f22:	3008      	adds	r0, #8
 8008f24:	2109      	movs	r1, #9
 8008f26:	9301      	str	r3, [sp, #4]
 8008f28:	0015      	movs	r5, r2
 8008f2a:	f7f7 f989 	bl	8000240 <__divsi3>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	2100      	movs	r1, #0
 8008f32:	4283      	cmp	r3, r0
 8008f34:	db20      	blt.n	8008f78 <__s2b+0x5e>
 8008f36:	0030      	movs	r0, r6
 8008f38:	f7ff ff62 	bl	8008e00 <_Balloc>
 8008f3c:	9b08      	ldr	r3, [sp, #32]
 8008f3e:	6143      	str	r3, [r0, #20]
 8008f40:	2301      	movs	r3, #1
 8008f42:	6103      	str	r3, [r0, #16]
 8008f44:	2d09      	cmp	r5, #9
 8008f46:	dd1a      	ble.n	8008f7e <__s2b+0x64>
 8008f48:	0023      	movs	r3, r4
 8008f4a:	3309      	adds	r3, #9
 8008f4c:	001f      	movs	r7, r3
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	1964      	adds	r4, r4, r5
 8008f52:	783b      	ldrb	r3, [r7, #0]
 8008f54:	0001      	movs	r1, r0
 8008f56:	3b30      	subs	r3, #48	; 0x30
 8008f58:	220a      	movs	r2, #10
 8008f5a:	0030      	movs	r0, r6
 8008f5c:	3701      	adds	r7, #1
 8008f5e:	f7ff ffa0 	bl	8008ea2 <__multadd>
 8008f62:	42a7      	cmp	r7, r4
 8008f64:	d1f5      	bne.n	8008f52 <__s2b+0x38>
 8008f66:	002c      	movs	r4, r5
 8008f68:	9b00      	ldr	r3, [sp, #0]
 8008f6a:	3c08      	subs	r4, #8
 8008f6c:	191c      	adds	r4, r3, r4
 8008f6e:	002f      	movs	r7, r5
 8008f70:	9b01      	ldr	r3, [sp, #4]
 8008f72:	429f      	cmp	r7, r3
 8008f74:	db06      	blt.n	8008f84 <__s2b+0x6a>
 8008f76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	3101      	adds	r1, #1
 8008f7c:	e7d9      	b.n	8008f32 <__s2b+0x18>
 8008f7e:	340a      	adds	r4, #10
 8008f80:	2509      	movs	r5, #9
 8008f82:	e7f4      	b.n	8008f6e <__s2b+0x54>
 8008f84:	1b63      	subs	r3, r4, r5
 8008f86:	5ddb      	ldrb	r3, [r3, r7]
 8008f88:	0001      	movs	r1, r0
 8008f8a:	3b30      	subs	r3, #48	; 0x30
 8008f8c:	220a      	movs	r2, #10
 8008f8e:	0030      	movs	r0, r6
 8008f90:	f7ff ff87 	bl	8008ea2 <__multadd>
 8008f94:	3701      	adds	r7, #1
 8008f96:	e7eb      	b.n	8008f70 <__s2b+0x56>

08008f98 <__hi0bits>:
 8008f98:	0003      	movs	r3, r0
 8008f9a:	0c02      	lsrs	r2, r0, #16
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	4282      	cmp	r2, r0
 8008fa0:	d101      	bne.n	8008fa6 <__hi0bits+0xe>
 8008fa2:	041b      	lsls	r3, r3, #16
 8008fa4:	3010      	adds	r0, #16
 8008fa6:	0e1a      	lsrs	r2, r3, #24
 8008fa8:	d101      	bne.n	8008fae <__hi0bits+0x16>
 8008faa:	3008      	adds	r0, #8
 8008fac:	021b      	lsls	r3, r3, #8
 8008fae:	0f1a      	lsrs	r2, r3, #28
 8008fb0:	d101      	bne.n	8008fb6 <__hi0bits+0x1e>
 8008fb2:	3004      	adds	r0, #4
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	0f9a      	lsrs	r2, r3, #30
 8008fb8:	d101      	bne.n	8008fbe <__hi0bits+0x26>
 8008fba:	3002      	adds	r0, #2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	db03      	blt.n	8008fca <__hi0bits+0x32>
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	005b      	lsls	r3, r3, #1
 8008fc6:	d400      	bmi.n	8008fca <__hi0bits+0x32>
 8008fc8:	2020      	movs	r0, #32
 8008fca:	4770      	bx	lr

08008fcc <__lo0bits>:
 8008fcc:	2207      	movs	r2, #7
 8008fce:	6803      	ldr	r3, [r0, #0]
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	0001      	movs	r1, r0
 8008fd4:	401a      	ands	r2, r3
 8008fd6:	d00d      	beq.n	8008ff4 <__lo0bits+0x28>
 8008fd8:	2401      	movs	r4, #1
 8008fda:	2000      	movs	r0, #0
 8008fdc:	4223      	tst	r3, r4
 8008fde:	d105      	bne.n	8008fec <__lo0bits+0x20>
 8008fe0:	3002      	adds	r0, #2
 8008fe2:	4203      	tst	r3, r0
 8008fe4:	d003      	beq.n	8008fee <__lo0bits+0x22>
 8008fe6:	40e3      	lsrs	r3, r4
 8008fe8:	0020      	movs	r0, r4
 8008fea:	600b      	str	r3, [r1, #0]
 8008fec:	bd10      	pop	{r4, pc}
 8008fee:	089b      	lsrs	r3, r3, #2
 8008ff0:	600b      	str	r3, [r1, #0]
 8008ff2:	e7fb      	b.n	8008fec <__lo0bits+0x20>
 8008ff4:	b29c      	uxth	r4, r3
 8008ff6:	0010      	movs	r0, r2
 8008ff8:	2c00      	cmp	r4, #0
 8008ffa:	d101      	bne.n	8009000 <__lo0bits+0x34>
 8008ffc:	2010      	movs	r0, #16
 8008ffe:	0c1b      	lsrs	r3, r3, #16
 8009000:	b2da      	uxtb	r2, r3
 8009002:	2a00      	cmp	r2, #0
 8009004:	d101      	bne.n	800900a <__lo0bits+0x3e>
 8009006:	3008      	adds	r0, #8
 8009008:	0a1b      	lsrs	r3, r3, #8
 800900a:	071a      	lsls	r2, r3, #28
 800900c:	d101      	bne.n	8009012 <__lo0bits+0x46>
 800900e:	3004      	adds	r0, #4
 8009010:	091b      	lsrs	r3, r3, #4
 8009012:	079a      	lsls	r2, r3, #30
 8009014:	d101      	bne.n	800901a <__lo0bits+0x4e>
 8009016:	3002      	adds	r0, #2
 8009018:	089b      	lsrs	r3, r3, #2
 800901a:	07da      	lsls	r2, r3, #31
 800901c:	d4e8      	bmi.n	8008ff0 <__lo0bits+0x24>
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	d001      	beq.n	8009026 <__lo0bits+0x5a>
 8009022:	3001      	adds	r0, #1
 8009024:	e7e4      	b.n	8008ff0 <__lo0bits+0x24>
 8009026:	2020      	movs	r0, #32
 8009028:	e7e0      	b.n	8008fec <__lo0bits+0x20>

0800902a <__i2b>:
 800902a:	b510      	push	{r4, lr}
 800902c:	000c      	movs	r4, r1
 800902e:	2101      	movs	r1, #1
 8009030:	f7ff fee6 	bl	8008e00 <_Balloc>
 8009034:	2301      	movs	r3, #1
 8009036:	6144      	str	r4, [r0, #20]
 8009038:	6103      	str	r3, [r0, #16]
 800903a:	bd10      	pop	{r4, pc}

0800903c <__multiply>:
 800903c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800903e:	690b      	ldr	r3, [r1, #16]
 8009040:	0015      	movs	r5, r2
 8009042:	6912      	ldr	r2, [r2, #16]
 8009044:	b089      	sub	sp, #36	; 0x24
 8009046:	000c      	movs	r4, r1
 8009048:	4293      	cmp	r3, r2
 800904a:	da01      	bge.n	8009050 <__multiply+0x14>
 800904c:	002c      	movs	r4, r5
 800904e:	000d      	movs	r5, r1
 8009050:	6927      	ldr	r7, [r4, #16]
 8009052:	692e      	ldr	r6, [r5, #16]
 8009054:	68a2      	ldr	r2, [r4, #8]
 8009056:	19bb      	adds	r3, r7, r6
 8009058:	6861      	ldr	r1, [r4, #4]
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	4293      	cmp	r3, r2
 800905e:	dd00      	ble.n	8009062 <__multiply+0x26>
 8009060:	3101      	adds	r1, #1
 8009062:	f7ff fecd 	bl	8008e00 <_Balloc>
 8009066:	0003      	movs	r3, r0
 8009068:	3314      	adds	r3, #20
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	9a00      	ldr	r2, [sp, #0]
 800906e:	19bb      	adds	r3, r7, r6
 8009070:	4694      	mov	ip, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	449c      	add	ip, r3
 8009076:	0013      	movs	r3, r2
 8009078:	2200      	movs	r2, #0
 800907a:	9004      	str	r0, [sp, #16]
 800907c:	4563      	cmp	r3, ip
 800907e:	d31c      	bcc.n	80090ba <__multiply+0x7e>
 8009080:	002a      	movs	r2, r5
 8009082:	3414      	adds	r4, #20
 8009084:	00bf      	lsls	r7, r7, #2
 8009086:	19e3      	adds	r3, r4, r7
 8009088:	3214      	adds	r2, #20
 800908a:	00b6      	lsls	r6, r6, #2
 800908c:	9305      	str	r3, [sp, #20]
 800908e:	1993      	adds	r3, r2, r6
 8009090:	9402      	str	r4, [sp, #8]
 8009092:	9306      	str	r3, [sp, #24]
 8009094:	9b06      	ldr	r3, [sp, #24]
 8009096:	429a      	cmp	r2, r3
 8009098:	d311      	bcc.n	80090be <__multiply+0x82>
 800909a:	9b01      	ldr	r3, [sp, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd06      	ble.n	80090ae <__multiply+0x72>
 80090a0:	2304      	movs	r3, #4
 80090a2:	425b      	negs	r3, r3
 80090a4:	449c      	add	ip, r3
 80090a6:	4663      	mov	r3, ip
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d051      	beq.n	8009152 <__multiply+0x116>
 80090ae:	9b04      	ldr	r3, [sp, #16]
 80090b0:	9a01      	ldr	r2, [sp, #4]
 80090b2:	0018      	movs	r0, r3
 80090b4:	611a      	str	r2, [r3, #16]
 80090b6:	b009      	add	sp, #36	; 0x24
 80090b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ba:	c304      	stmia	r3!, {r2}
 80090bc:	e7de      	b.n	800907c <__multiply+0x40>
 80090be:	8814      	ldrh	r4, [r2, #0]
 80090c0:	2c00      	cmp	r4, #0
 80090c2:	d01e      	beq.n	8009102 <__multiply+0xc6>
 80090c4:	2600      	movs	r6, #0
 80090c6:	9d00      	ldr	r5, [sp, #0]
 80090c8:	9f02      	ldr	r7, [sp, #8]
 80090ca:	cf01      	ldmia	r7!, {r0}
 80090cc:	9507      	str	r5, [sp, #28]
 80090ce:	cd08      	ldmia	r5!, {r3}
 80090d0:	9303      	str	r3, [sp, #12]
 80090d2:	b283      	uxth	r3, r0
 80090d4:	4363      	muls	r3, r4
 80090d6:	0019      	movs	r1, r3
 80090d8:	466b      	mov	r3, sp
 80090da:	0c00      	lsrs	r0, r0, #16
 80090dc:	899b      	ldrh	r3, [r3, #12]
 80090de:	4360      	muls	r0, r4
 80090e0:	18cb      	adds	r3, r1, r3
 80090e2:	9903      	ldr	r1, [sp, #12]
 80090e4:	199b      	adds	r3, r3, r6
 80090e6:	0c09      	lsrs	r1, r1, #16
 80090e8:	1841      	adds	r1, r0, r1
 80090ea:	0c18      	lsrs	r0, r3, #16
 80090ec:	1809      	adds	r1, r1, r0
 80090ee:	0c0e      	lsrs	r6, r1, #16
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	0409      	lsls	r1, r1, #16
 80090f4:	430b      	orrs	r3, r1
 80090f6:	9907      	ldr	r1, [sp, #28]
 80090f8:	600b      	str	r3, [r1, #0]
 80090fa:	9b05      	ldr	r3, [sp, #20]
 80090fc:	42bb      	cmp	r3, r7
 80090fe:	d8e4      	bhi.n	80090ca <__multiply+0x8e>
 8009100:	602e      	str	r6, [r5, #0]
 8009102:	6813      	ldr	r3, [r2, #0]
 8009104:	0c1b      	lsrs	r3, r3, #16
 8009106:	9303      	str	r3, [sp, #12]
 8009108:	d01e      	beq.n	8009148 <__multiply+0x10c>
 800910a:	2600      	movs	r6, #0
 800910c:	9b00      	ldr	r3, [sp, #0]
 800910e:	9c02      	ldr	r4, [sp, #8]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	9800      	ldr	r0, [sp, #0]
 8009114:	0007      	movs	r7, r0
 8009116:	8821      	ldrh	r1, [r4, #0]
 8009118:	9d03      	ldr	r5, [sp, #12]
 800911a:	b29b      	uxth	r3, r3
 800911c:	4369      	muls	r1, r5
 800911e:	c820      	ldmia	r0!, {r5}
 8009120:	0c2d      	lsrs	r5, r5, #16
 8009122:	1949      	adds	r1, r1, r5
 8009124:	198e      	adds	r6, r1, r6
 8009126:	0431      	lsls	r1, r6, #16
 8009128:	430b      	orrs	r3, r1
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	cc08      	ldmia	r4!, {r3}
 800912e:	9903      	ldr	r1, [sp, #12]
 8009130:	0c1b      	lsrs	r3, r3, #16
 8009132:	434b      	muls	r3, r1
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	0c36      	lsrs	r6, r6, #16
 8009138:	b289      	uxth	r1, r1
 800913a:	185b      	adds	r3, r3, r1
 800913c:	9905      	ldr	r1, [sp, #20]
 800913e:	199b      	adds	r3, r3, r6
 8009140:	0c1e      	lsrs	r6, r3, #16
 8009142:	42a1      	cmp	r1, r4
 8009144:	d8e6      	bhi.n	8009114 <__multiply+0xd8>
 8009146:	6003      	str	r3, [r0, #0]
 8009148:	9b00      	ldr	r3, [sp, #0]
 800914a:	3204      	adds	r2, #4
 800914c:	3304      	adds	r3, #4
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	e7a0      	b.n	8009094 <__multiply+0x58>
 8009152:	9b01      	ldr	r3, [sp, #4]
 8009154:	3b01      	subs	r3, #1
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	e79f      	b.n	800909a <__multiply+0x5e>
	...

0800915c <__pow5mult>:
 800915c:	2303      	movs	r3, #3
 800915e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009160:	4013      	ands	r3, r2
 8009162:	0005      	movs	r5, r0
 8009164:	000e      	movs	r6, r1
 8009166:	0014      	movs	r4, r2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d008      	beq.n	800917e <__pow5mult+0x22>
 800916c:	4922      	ldr	r1, [pc, #136]	; (80091f8 <__pow5mult+0x9c>)
 800916e:	3b01      	subs	r3, #1
 8009170:	009a      	lsls	r2, r3, #2
 8009172:	5852      	ldr	r2, [r2, r1]
 8009174:	2300      	movs	r3, #0
 8009176:	0031      	movs	r1, r6
 8009178:	f7ff fe93 	bl	8008ea2 <__multadd>
 800917c:	0006      	movs	r6, r0
 800917e:	10a3      	asrs	r3, r4, #2
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	d036      	beq.n	80091f2 <__pow5mult+0x96>
 8009184:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8009186:	2c00      	cmp	r4, #0
 8009188:	d107      	bne.n	800919a <__pow5mult+0x3e>
 800918a:	2010      	movs	r0, #16
 800918c:	f7ff fe1c 	bl	8008dc8 <malloc>
 8009190:	6268      	str	r0, [r5, #36]	; 0x24
 8009192:	6044      	str	r4, [r0, #4]
 8009194:	6084      	str	r4, [r0, #8]
 8009196:	6004      	str	r4, [r0, #0]
 8009198:	60c4      	str	r4, [r0, #12]
 800919a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800919c:	68bc      	ldr	r4, [r7, #8]
 800919e:	2c00      	cmp	r4, #0
 80091a0:	d107      	bne.n	80091b2 <__pow5mult+0x56>
 80091a2:	4916      	ldr	r1, [pc, #88]	; (80091fc <__pow5mult+0xa0>)
 80091a4:	0028      	movs	r0, r5
 80091a6:	f7ff ff40 	bl	800902a <__i2b>
 80091aa:	2300      	movs	r3, #0
 80091ac:	0004      	movs	r4, r0
 80091ae:	60b8      	str	r0, [r7, #8]
 80091b0:	6003      	str	r3, [r0, #0]
 80091b2:	2201      	movs	r2, #1
 80091b4:	9b01      	ldr	r3, [sp, #4]
 80091b6:	4213      	tst	r3, r2
 80091b8:	d00a      	beq.n	80091d0 <__pow5mult+0x74>
 80091ba:	0031      	movs	r1, r6
 80091bc:	0022      	movs	r2, r4
 80091be:	0028      	movs	r0, r5
 80091c0:	f7ff ff3c 	bl	800903c <__multiply>
 80091c4:	0007      	movs	r7, r0
 80091c6:	0031      	movs	r1, r6
 80091c8:	0028      	movs	r0, r5
 80091ca:	f7ff fe51 	bl	8008e70 <_Bfree>
 80091ce:	003e      	movs	r6, r7
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	105b      	asrs	r3, r3, #1
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	d00c      	beq.n	80091f2 <__pow5mult+0x96>
 80091d8:	6820      	ldr	r0, [r4, #0]
 80091da:	2800      	cmp	r0, #0
 80091dc:	d107      	bne.n	80091ee <__pow5mult+0x92>
 80091de:	0022      	movs	r2, r4
 80091e0:	0021      	movs	r1, r4
 80091e2:	0028      	movs	r0, r5
 80091e4:	f7ff ff2a 	bl	800903c <__multiply>
 80091e8:	2300      	movs	r3, #0
 80091ea:	6020      	str	r0, [r4, #0]
 80091ec:	6003      	str	r3, [r0, #0]
 80091ee:	0004      	movs	r4, r0
 80091f0:	e7df      	b.n	80091b2 <__pow5mult+0x56>
 80091f2:	0030      	movs	r0, r6
 80091f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	08009970 	.word	0x08009970
 80091fc:	00000271 	.word	0x00000271

08009200 <__lshift>:
 8009200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009202:	000d      	movs	r5, r1
 8009204:	0017      	movs	r7, r2
 8009206:	692b      	ldr	r3, [r5, #16]
 8009208:	1154      	asrs	r4, r2, #5
 800920a:	b085      	sub	sp, #20
 800920c:	18e3      	adds	r3, r4, r3
 800920e:	9302      	str	r3, [sp, #8]
 8009210:	3301      	adds	r3, #1
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	6849      	ldr	r1, [r1, #4]
 8009216:	68ab      	ldr	r3, [r5, #8]
 8009218:	9003      	str	r0, [sp, #12]
 800921a:	9a01      	ldr	r2, [sp, #4]
 800921c:	4293      	cmp	r3, r2
 800921e:	db34      	blt.n	800928a <__lshift+0x8a>
 8009220:	9803      	ldr	r0, [sp, #12]
 8009222:	f7ff fded 	bl	8008e00 <_Balloc>
 8009226:	2300      	movs	r3, #0
 8009228:	0002      	movs	r2, r0
 800922a:	0006      	movs	r6, r0
 800922c:	0019      	movs	r1, r3
 800922e:	3214      	adds	r2, #20
 8009230:	42a3      	cmp	r3, r4
 8009232:	db2d      	blt.n	8009290 <__lshift+0x90>
 8009234:	43e3      	mvns	r3, r4
 8009236:	17db      	asrs	r3, r3, #31
 8009238:	401c      	ands	r4, r3
 800923a:	002b      	movs	r3, r5
 800923c:	211f      	movs	r1, #31
 800923e:	00a4      	lsls	r4, r4, #2
 8009240:	1914      	adds	r4, r2, r4
 8009242:	692a      	ldr	r2, [r5, #16]
 8009244:	3314      	adds	r3, #20
 8009246:	0092      	lsls	r2, r2, #2
 8009248:	189a      	adds	r2, r3, r2
 800924a:	400f      	ands	r7, r1
 800924c:	d024      	beq.n	8009298 <__lshift+0x98>
 800924e:	3101      	adds	r1, #1
 8009250:	1bc9      	subs	r1, r1, r7
 8009252:	468c      	mov	ip, r1
 8009254:	2100      	movs	r1, #0
 8009256:	6818      	ldr	r0, [r3, #0]
 8009258:	40b8      	lsls	r0, r7
 800925a:	4301      	orrs	r1, r0
 800925c:	4660      	mov	r0, ip
 800925e:	6021      	str	r1, [r4, #0]
 8009260:	cb02      	ldmia	r3!, {r1}
 8009262:	3404      	adds	r4, #4
 8009264:	40c1      	lsrs	r1, r0
 8009266:	429a      	cmp	r2, r3
 8009268:	d8f5      	bhi.n	8009256 <__lshift+0x56>
 800926a:	6021      	str	r1, [r4, #0]
 800926c:	2900      	cmp	r1, #0
 800926e:	d002      	beq.n	8009276 <__lshift+0x76>
 8009270:	9b02      	ldr	r3, [sp, #8]
 8009272:	3302      	adds	r3, #2
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	9803      	ldr	r0, [sp, #12]
 800927a:	3b01      	subs	r3, #1
 800927c:	6133      	str	r3, [r6, #16]
 800927e:	0029      	movs	r1, r5
 8009280:	f7ff fdf6 	bl	8008e70 <_Bfree>
 8009284:	0030      	movs	r0, r6
 8009286:	b005      	add	sp, #20
 8009288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800928a:	3101      	adds	r1, #1
 800928c:	005b      	lsls	r3, r3, #1
 800928e:	e7c4      	b.n	800921a <__lshift+0x1a>
 8009290:	0098      	lsls	r0, r3, #2
 8009292:	5011      	str	r1, [r2, r0]
 8009294:	3301      	adds	r3, #1
 8009296:	e7cb      	b.n	8009230 <__lshift+0x30>
 8009298:	cb02      	ldmia	r3!, {r1}
 800929a:	c402      	stmia	r4!, {r1}
 800929c:	429a      	cmp	r2, r3
 800929e:	d8fb      	bhi.n	8009298 <__lshift+0x98>
 80092a0:	e7e9      	b.n	8009276 <__lshift+0x76>

080092a2 <__mcmp>:
 80092a2:	690a      	ldr	r2, [r1, #16]
 80092a4:	6903      	ldr	r3, [r0, #16]
 80092a6:	b530      	push	{r4, r5, lr}
 80092a8:	1a9b      	subs	r3, r3, r2
 80092aa:	d10e      	bne.n	80092ca <__mcmp+0x28>
 80092ac:	0092      	lsls	r2, r2, #2
 80092ae:	3014      	adds	r0, #20
 80092b0:	3114      	adds	r1, #20
 80092b2:	1884      	adds	r4, r0, r2
 80092b4:	1889      	adds	r1, r1, r2
 80092b6:	3c04      	subs	r4, #4
 80092b8:	3904      	subs	r1, #4
 80092ba:	6822      	ldr	r2, [r4, #0]
 80092bc:	680d      	ldr	r5, [r1, #0]
 80092be:	42aa      	cmp	r2, r5
 80092c0:	d005      	beq.n	80092ce <__mcmp+0x2c>
 80092c2:	42aa      	cmp	r2, r5
 80092c4:	4192      	sbcs	r2, r2
 80092c6:	2301      	movs	r3, #1
 80092c8:	4313      	orrs	r3, r2
 80092ca:	0018      	movs	r0, r3
 80092cc:	bd30      	pop	{r4, r5, pc}
 80092ce:	42a0      	cmp	r0, r4
 80092d0:	d3f1      	bcc.n	80092b6 <__mcmp+0x14>
 80092d2:	e7fa      	b.n	80092ca <__mcmp+0x28>

080092d4 <__mdiff>:
 80092d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d6:	000d      	movs	r5, r1
 80092d8:	b085      	sub	sp, #20
 80092da:	0007      	movs	r7, r0
 80092dc:	0011      	movs	r1, r2
 80092de:	0028      	movs	r0, r5
 80092e0:	0014      	movs	r4, r2
 80092e2:	f7ff ffde 	bl	80092a2 <__mcmp>
 80092e6:	1e06      	subs	r6, r0, #0
 80092e8:	d108      	bne.n	80092fc <__mdiff+0x28>
 80092ea:	0001      	movs	r1, r0
 80092ec:	0038      	movs	r0, r7
 80092ee:	f7ff fd87 	bl	8008e00 <_Balloc>
 80092f2:	2301      	movs	r3, #1
 80092f4:	6146      	str	r6, [r0, #20]
 80092f6:	6103      	str	r3, [r0, #16]
 80092f8:	b005      	add	sp, #20
 80092fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fc:	2301      	movs	r3, #1
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	2800      	cmp	r0, #0
 8009302:	db04      	blt.n	800930e <__mdiff+0x3a>
 8009304:	0023      	movs	r3, r4
 8009306:	002c      	movs	r4, r5
 8009308:	001d      	movs	r5, r3
 800930a:	2300      	movs	r3, #0
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	6861      	ldr	r1, [r4, #4]
 8009310:	0038      	movs	r0, r7
 8009312:	f7ff fd75 	bl	8008e00 <_Balloc>
 8009316:	002f      	movs	r7, r5
 8009318:	2200      	movs	r2, #0
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	6926      	ldr	r6, [r4, #16]
 800931e:	60c3      	str	r3, [r0, #12]
 8009320:	3414      	adds	r4, #20
 8009322:	00b3      	lsls	r3, r6, #2
 8009324:	18e3      	adds	r3, r4, r3
 8009326:	9302      	str	r3, [sp, #8]
 8009328:	692b      	ldr	r3, [r5, #16]
 800932a:	3714      	adds	r7, #20
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	18fb      	adds	r3, r7, r3
 8009330:	9303      	str	r3, [sp, #12]
 8009332:	0003      	movs	r3, r0
 8009334:	4694      	mov	ip, r2
 8009336:	3314      	adds	r3, #20
 8009338:	cc20      	ldmia	r4!, {r5}
 800933a:	cf04      	ldmia	r7!, {r2}
 800933c:	9201      	str	r2, [sp, #4]
 800933e:	b2aa      	uxth	r2, r5
 8009340:	4494      	add	ip, r2
 8009342:	466a      	mov	r2, sp
 8009344:	4661      	mov	r1, ip
 8009346:	8892      	ldrh	r2, [r2, #4]
 8009348:	0c2d      	lsrs	r5, r5, #16
 800934a:	1a8a      	subs	r2, r1, r2
 800934c:	9901      	ldr	r1, [sp, #4]
 800934e:	0c09      	lsrs	r1, r1, #16
 8009350:	1a69      	subs	r1, r5, r1
 8009352:	1415      	asrs	r5, r2, #16
 8009354:	1949      	adds	r1, r1, r5
 8009356:	140d      	asrs	r5, r1, #16
 8009358:	b292      	uxth	r2, r2
 800935a:	0409      	lsls	r1, r1, #16
 800935c:	430a      	orrs	r2, r1
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	9a03      	ldr	r2, [sp, #12]
 8009362:	46ac      	mov	ip, r5
 8009364:	3304      	adds	r3, #4
 8009366:	42ba      	cmp	r2, r7
 8009368:	d8e6      	bhi.n	8009338 <__mdiff+0x64>
 800936a:	9902      	ldr	r1, [sp, #8]
 800936c:	001a      	movs	r2, r3
 800936e:	428c      	cmp	r4, r1
 8009370:	d305      	bcc.n	800937e <__mdiff+0xaa>
 8009372:	3a04      	subs	r2, #4
 8009374:	6813      	ldr	r3, [r2, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00e      	beq.n	8009398 <__mdiff+0xc4>
 800937a:	6106      	str	r6, [r0, #16]
 800937c:	e7bc      	b.n	80092f8 <__mdiff+0x24>
 800937e:	cc04      	ldmia	r4!, {r2}
 8009380:	b291      	uxth	r1, r2
 8009382:	4461      	add	r1, ip
 8009384:	140d      	asrs	r5, r1, #16
 8009386:	0c12      	lsrs	r2, r2, #16
 8009388:	1952      	adds	r2, r2, r5
 800938a:	1415      	asrs	r5, r2, #16
 800938c:	b289      	uxth	r1, r1
 800938e:	0412      	lsls	r2, r2, #16
 8009390:	430a      	orrs	r2, r1
 8009392:	46ac      	mov	ip, r5
 8009394:	c304      	stmia	r3!, {r2}
 8009396:	e7e8      	b.n	800936a <__mdiff+0x96>
 8009398:	3e01      	subs	r6, #1
 800939a:	e7ea      	b.n	8009372 <__mdiff+0x9e>

0800939c <__ulp>:
 800939c:	000b      	movs	r3, r1
 800939e:	4910      	ldr	r1, [pc, #64]	; (80093e0 <__ulp+0x44>)
 80093a0:	b510      	push	{r4, lr}
 80093a2:	4019      	ands	r1, r3
 80093a4:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <__ulp+0x48>)
 80093a6:	18c9      	adds	r1, r1, r3
 80093a8:	2900      	cmp	r1, #0
 80093aa:	dd04      	ble.n	80093b6 <__ulp+0x1a>
 80093ac:	2200      	movs	r2, #0
 80093ae:	000b      	movs	r3, r1
 80093b0:	0010      	movs	r0, r2
 80093b2:	0019      	movs	r1, r3
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	4249      	negs	r1, r1
 80093b8:	1509      	asrs	r1, r1, #20
 80093ba:	2200      	movs	r2, #0
 80093bc:	2300      	movs	r3, #0
 80093be:	2913      	cmp	r1, #19
 80093c0:	dc04      	bgt.n	80093cc <__ulp+0x30>
 80093c2:	2080      	movs	r0, #128	; 0x80
 80093c4:	0300      	lsls	r0, r0, #12
 80093c6:	4108      	asrs	r0, r1
 80093c8:	0003      	movs	r3, r0
 80093ca:	e7f1      	b.n	80093b0 <__ulp+0x14>
 80093cc:	3914      	subs	r1, #20
 80093ce:	2001      	movs	r0, #1
 80093d0:	291e      	cmp	r1, #30
 80093d2:	dc02      	bgt.n	80093da <__ulp+0x3e>
 80093d4:	241f      	movs	r4, #31
 80093d6:	1a61      	subs	r1, r4, r1
 80093d8:	4088      	lsls	r0, r1
 80093da:	0002      	movs	r2, r0
 80093dc:	e7e8      	b.n	80093b0 <__ulp+0x14>
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	7ff00000 	.word	0x7ff00000
 80093e4:	fcc00000 	.word	0xfcc00000

080093e8 <__b2d>:
 80093e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ea:	0006      	movs	r6, r0
 80093ec:	6903      	ldr	r3, [r0, #16]
 80093ee:	3614      	adds	r6, #20
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	18f3      	adds	r3, r6, r3
 80093f4:	1f1d      	subs	r5, r3, #4
 80093f6:	682c      	ldr	r4, [r5, #0]
 80093f8:	000f      	movs	r7, r1
 80093fa:	0020      	movs	r0, r4
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	f7ff fdcb 	bl	8008f98 <__hi0bits>
 8009402:	2320      	movs	r3, #32
 8009404:	1a1b      	subs	r3, r3, r0
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	491c      	ldr	r1, [pc, #112]	; (800947c <__b2d+0x94>)
 800940a:	280a      	cmp	r0, #10
 800940c:	dc16      	bgt.n	800943c <__b2d+0x54>
 800940e:	230b      	movs	r3, #11
 8009410:	0027      	movs	r7, r4
 8009412:	1a1b      	subs	r3, r3, r0
 8009414:	40df      	lsrs	r7, r3
 8009416:	4339      	orrs	r1, r7
 8009418:	469c      	mov	ip, r3
 800941a:	000b      	movs	r3, r1
 800941c:	2100      	movs	r1, #0
 800941e:	42ae      	cmp	r6, r5
 8009420:	d202      	bcs.n	8009428 <__b2d+0x40>
 8009422:	9901      	ldr	r1, [sp, #4]
 8009424:	3908      	subs	r1, #8
 8009426:	6809      	ldr	r1, [r1, #0]
 8009428:	3015      	adds	r0, #21
 800942a:	4084      	lsls	r4, r0
 800942c:	4660      	mov	r0, ip
 800942e:	40c1      	lsrs	r1, r0
 8009430:	430c      	orrs	r4, r1
 8009432:	0022      	movs	r2, r4
 8009434:	0010      	movs	r0, r2
 8009436:	0019      	movs	r1, r3
 8009438:	b003      	add	sp, #12
 800943a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800943c:	2700      	movs	r7, #0
 800943e:	42ae      	cmp	r6, r5
 8009440:	d202      	bcs.n	8009448 <__b2d+0x60>
 8009442:	9d01      	ldr	r5, [sp, #4]
 8009444:	3d08      	subs	r5, #8
 8009446:	682f      	ldr	r7, [r5, #0]
 8009448:	380b      	subs	r0, #11
 800944a:	4684      	mov	ip, r0
 800944c:	1e03      	subs	r3, r0, #0
 800944e:	d012      	beq.n	8009476 <__b2d+0x8e>
 8009450:	409c      	lsls	r4, r3
 8009452:	2020      	movs	r0, #32
 8009454:	4321      	orrs	r1, r4
 8009456:	003c      	movs	r4, r7
 8009458:	1ac0      	subs	r0, r0, r3
 800945a:	40c4      	lsrs	r4, r0
 800945c:	4321      	orrs	r1, r4
 800945e:	000b      	movs	r3, r1
 8009460:	2100      	movs	r1, #0
 8009462:	42b5      	cmp	r5, r6
 8009464:	d901      	bls.n	800946a <__b2d+0x82>
 8009466:	3d04      	subs	r5, #4
 8009468:	6829      	ldr	r1, [r5, #0]
 800946a:	4664      	mov	r4, ip
 800946c:	40c1      	lsrs	r1, r0
 800946e:	40a7      	lsls	r7, r4
 8009470:	430f      	orrs	r7, r1
 8009472:	003a      	movs	r2, r7
 8009474:	e7de      	b.n	8009434 <__b2d+0x4c>
 8009476:	4321      	orrs	r1, r4
 8009478:	000b      	movs	r3, r1
 800947a:	e7fa      	b.n	8009472 <__b2d+0x8a>
 800947c:	3ff00000 	.word	0x3ff00000

08009480 <__d2b>:
 8009480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009482:	001d      	movs	r5, r3
 8009484:	2101      	movs	r1, #1
 8009486:	9f08      	ldr	r7, [sp, #32]
 8009488:	0014      	movs	r4, r2
 800948a:	f7ff fcb9 	bl	8008e00 <_Balloc>
 800948e:	032b      	lsls	r3, r5, #12
 8009490:	006d      	lsls	r5, r5, #1
 8009492:	0006      	movs	r6, r0
 8009494:	0b1b      	lsrs	r3, r3, #12
 8009496:	0d6d      	lsrs	r5, r5, #21
 8009498:	d124      	bne.n	80094e4 <__d2b+0x64>
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	2c00      	cmp	r4, #0
 800949e:	d027      	beq.n	80094f0 <__d2b+0x70>
 80094a0:	4668      	mov	r0, sp
 80094a2:	9400      	str	r4, [sp, #0]
 80094a4:	f7ff fd92 	bl	8008fcc <__lo0bits>
 80094a8:	9c00      	ldr	r4, [sp, #0]
 80094aa:	2800      	cmp	r0, #0
 80094ac:	d01e      	beq.n	80094ec <__d2b+0x6c>
 80094ae:	9b01      	ldr	r3, [sp, #4]
 80094b0:	2120      	movs	r1, #32
 80094b2:	001a      	movs	r2, r3
 80094b4:	1a09      	subs	r1, r1, r0
 80094b6:	408a      	lsls	r2, r1
 80094b8:	40c3      	lsrs	r3, r0
 80094ba:	4322      	orrs	r2, r4
 80094bc:	6172      	str	r2, [r6, #20]
 80094be:	9301      	str	r3, [sp, #4]
 80094c0:	9c01      	ldr	r4, [sp, #4]
 80094c2:	61b4      	str	r4, [r6, #24]
 80094c4:	1e63      	subs	r3, r4, #1
 80094c6:	419c      	sbcs	r4, r3
 80094c8:	3401      	adds	r4, #1
 80094ca:	6134      	str	r4, [r6, #16]
 80094cc:	2d00      	cmp	r5, #0
 80094ce:	d018      	beq.n	8009502 <__d2b+0x82>
 80094d0:	4b12      	ldr	r3, [pc, #72]	; (800951c <__d2b+0x9c>)
 80094d2:	18ed      	adds	r5, r5, r3
 80094d4:	2335      	movs	r3, #53	; 0x35
 80094d6:	182d      	adds	r5, r5, r0
 80094d8:	603d      	str	r5, [r7, #0]
 80094da:	1a18      	subs	r0, r3, r0
 80094dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094de:	6018      	str	r0, [r3, #0]
 80094e0:	0030      	movs	r0, r6
 80094e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094e4:	2280      	movs	r2, #128	; 0x80
 80094e6:	0352      	lsls	r2, r2, #13
 80094e8:	4313      	orrs	r3, r2
 80094ea:	e7d6      	b.n	800949a <__d2b+0x1a>
 80094ec:	6174      	str	r4, [r6, #20]
 80094ee:	e7e7      	b.n	80094c0 <__d2b+0x40>
 80094f0:	a801      	add	r0, sp, #4
 80094f2:	f7ff fd6b 	bl	8008fcc <__lo0bits>
 80094f6:	2401      	movs	r4, #1
 80094f8:	9b01      	ldr	r3, [sp, #4]
 80094fa:	6134      	str	r4, [r6, #16]
 80094fc:	6173      	str	r3, [r6, #20]
 80094fe:	3020      	adds	r0, #32
 8009500:	e7e4      	b.n	80094cc <__d2b+0x4c>
 8009502:	4b07      	ldr	r3, [pc, #28]	; (8009520 <__d2b+0xa0>)
 8009504:	18c0      	adds	r0, r0, r3
 8009506:	4b07      	ldr	r3, [pc, #28]	; (8009524 <__d2b+0xa4>)
 8009508:	6038      	str	r0, [r7, #0]
 800950a:	18e3      	adds	r3, r4, r3
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	18f3      	adds	r3, r6, r3
 8009510:	6958      	ldr	r0, [r3, #20]
 8009512:	f7ff fd41 	bl	8008f98 <__hi0bits>
 8009516:	0164      	lsls	r4, r4, #5
 8009518:	1a20      	subs	r0, r4, r0
 800951a:	e7df      	b.n	80094dc <__d2b+0x5c>
 800951c:	fffffbcd 	.word	0xfffffbcd
 8009520:	fffffbce 	.word	0xfffffbce
 8009524:	3fffffff 	.word	0x3fffffff

08009528 <__ratio>:
 8009528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952a:	b085      	sub	sp, #20
 800952c:	000f      	movs	r7, r1
 800952e:	a902      	add	r1, sp, #8
 8009530:	0006      	movs	r6, r0
 8009532:	f7ff ff59 	bl	80093e8 <__b2d>
 8009536:	0004      	movs	r4, r0
 8009538:	000d      	movs	r5, r1
 800953a:	0038      	movs	r0, r7
 800953c:	a903      	add	r1, sp, #12
 800953e:	9400      	str	r4, [sp, #0]
 8009540:	9501      	str	r5, [sp, #4]
 8009542:	f7ff ff51 	bl	80093e8 <__b2d>
 8009546:	6936      	ldr	r6, [r6, #16]
 8009548:	693f      	ldr	r7, [r7, #16]
 800954a:	0002      	movs	r2, r0
 800954c:	1bf7      	subs	r7, r6, r7
 800954e:	017e      	lsls	r6, r7, #5
 8009550:	46b4      	mov	ip, r6
 8009552:	9f03      	ldr	r7, [sp, #12]
 8009554:	9e02      	ldr	r6, [sp, #8]
 8009556:	000b      	movs	r3, r1
 8009558:	1bf6      	subs	r6, r6, r7
 800955a:	4466      	add	r6, ip
 800955c:	0537      	lsls	r7, r6, #20
 800955e:	2e00      	cmp	r6, #0
 8009560:	dd07      	ble.n	8009572 <__ratio+0x4a>
 8009562:	1979      	adds	r1, r7, r5
 8009564:	9101      	str	r1, [sp, #4]
 8009566:	9800      	ldr	r0, [sp, #0]
 8009568:	9901      	ldr	r1, [sp, #4]
 800956a:	f7f8 f961 	bl	8001830 <__aeabi_ddiv>
 800956e:	b005      	add	sp, #20
 8009570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009572:	1bcb      	subs	r3, r1, r7
 8009574:	e7f7      	b.n	8009566 <__ratio+0x3e>

08009576 <__copybits>:
 8009576:	0013      	movs	r3, r2
 8009578:	3901      	subs	r1, #1
 800957a:	b510      	push	{r4, lr}
 800957c:	1149      	asrs	r1, r1, #5
 800957e:	6912      	ldr	r2, [r2, #16]
 8009580:	3101      	adds	r1, #1
 8009582:	0089      	lsls	r1, r1, #2
 8009584:	3314      	adds	r3, #20
 8009586:	0092      	lsls	r2, r2, #2
 8009588:	1841      	adds	r1, r0, r1
 800958a:	189a      	adds	r2, r3, r2
 800958c:	429a      	cmp	r2, r3
 800958e:	d803      	bhi.n	8009598 <__copybits+0x22>
 8009590:	2300      	movs	r3, #0
 8009592:	4281      	cmp	r1, r0
 8009594:	d803      	bhi.n	800959e <__copybits+0x28>
 8009596:	bd10      	pop	{r4, pc}
 8009598:	cb10      	ldmia	r3!, {r4}
 800959a:	c010      	stmia	r0!, {r4}
 800959c:	e7f6      	b.n	800958c <__copybits+0x16>
 800959e:	c008      	stmia	r0!, {r3}
 80095a0:	e7f7      	b.n	8009592 <__copybits+0x1c>

080095a2 <__any_on>:
 80095a2:	0002      	movs	r2, r0
 80095a4:	6900      	ldr	r0, [r0, #16]
 80095a6:	b510      	push	{r4, lr}
 80095a8:	3214      	adds	r2, #20
 80095aa:	114b      	asrs	r3, r1, #5
 80095ac:	4298      	cmp	r0, r3
 80095ae:	db12      	blt.n	80095d6 <__any_on+0x34>
 80095b0:	dd0b      	ble.n	80095ca <__any_on+0x28>
 80095b2:	201f      	movs	r0, #31
 80095b4:	4001      	ands	r1, r0
 80095b6:	d008      	beq.n	80095ca <__any_on+0x28>
 80095b8:	0098      	lsls	r0, r3, #2
 80095ba:	5884      	ldr	r4, [r0, r2]
 80095bc:	0020      	movs	r0, r4
 80095be:	40c8      	lsrs	r0, r1
 80095c0:	4088      	lsls	r0, r1
 80095c2:	0001      	movs	r1, r0
 80095c4:	2001      	movs	r0, #1
 80095c6:	428c      	cmp	r4, r1
 80095c8:	d104      	bne.n	80095d4 <__any_on+0x32>
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	18d3      	adds	r3, r2, r3
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d803      	bhi.n	80095da <__any_on+0x38>
 80095d2:	2000      	movs	r0, #0
 80095d4:	bd10      	pop	{r4, pc}
 80095d6:	0003      	movs	r3, r0
 80095d8:	e7f7      	b.n	80095ca <__any_on+0x28>
 80095da:	3b04      	subs	r3, #4
 80095dc:	6819      	ldr	r1, [r3, #0]
 80095de:	2900      	cmp	r1, #0
 80095e0:	d0f5      	beq.n	80095ce <__any_on+0x2c>
 80095e2:	2001      	movs	r0, #1
 80095e4:	e7f6      	b.n	80095d4 <__any_on+0x32>
	...

080095e8 <nanf>:
 80095e8:	4800      	ldr	r0, [pc, #0]	; (80095ec <nanf+0x4>)
 80095ea:	4770      	bx	lr
 80095ec:	7fc00000 	.word	0x7fc00000

080095f0 <strncmp>:
 80095f0:	2300      	movs	r3, #0
 80095f2:	b530      	push	{r4, r5, lr}
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d00a      	beq.n	800960e <strncmp+0x1e>
 80095f8:	3a01      	subs	r2, #1
 80095fa:	5cc4      	ldrb	r4, [r0, r3]
 80095fc:	5ccd      	ldrb	r5, [r1, r3]
 80095fe:	42ac      	cmp	r4, r5
 8009600:	d104      	bne.n	800960c <strncmp+0x1c>
 8009602:	429a      	cmp	r2, r3
 8009604:	d002      	beq.n	800960c <strncmp+0x1c>
 8009606:	3301      	adds	r3, #1
 8009608:	2c00      	cmp	r4, #0
 800960a:	d1f6      	bne.n	80095fa <strncmp+0xa>
 800960c:	1b63      	subs	r3, r4, r5
 800960e:	0018      	movs	r0, r3
 8009610:	bd30      	pop	{r4, r5, pc}

08009612 <__ascii_wctomb>:
 8009612:	1e0b      	subs	r3, r1, #0
 8009614:	d004      	beq.n	8009620 <__ascii_wctomb+0xe>
 8009616:	2aff      	cmp	r2, #255	; 0xff
 8009618:	d904      	bls.n	8009624 <__ascii_wctomb+0x12>
 800961a:	238a      	movs	r3, #138	; 0x8a
 800961c:	6003      	str	r3, [r0, #0]
 800961e:	3b8b      	subs	r3, #139	; 0x8b
 8009620:	0018      	movs	r0, r3
 8009622:	4770      	bx	lr
 8009624:	700a      	strb	r2, [r1, #0]
 8009626:	2301      	movs	r3, #1
 8009628:	e7fa      	b.n	8009620 <__ascii_wctomb+0xe>
	...

0800962c <_sbrk>:
 800962c:	4b05      	ldr	r3, [pc, #20]	; (8009644 <_sbrk+0x18>)
 800962e:	0002      	movs	r2, r0
 8009630:	6819      	ldr	r1, [r3, #0]
 8009632:	2900      	cmp	r1, #0
 8009634:	d101      	bne.n	800963a <_sbrk+0xe>
 8009636:	4904      	ldr	r1, [pc, #16]	; (8009648 <_sbrk+0x1c>)
 8009638:	6019      	str	r1, [r3, #0]
 800963a:	6818      	ldr	r0, [r3, #0]
 800963c:	1882      	adds	r2, r0, r2
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	4770      	bx	lr
 8009642:	46c0      	nop			; (mov r8, r8)
 8009644:	200006c4 	.word	0x200006c4
 8009648:	20000a48 	.word	0x20000a48

0800964c <_init>:
 800964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964e:	46c0      	nop			; (mov r8, r8)
 8009650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009652:	bc08      	pop	{r3}
 8009654:	469e      	mov	lr, r3
 8009656:	4770      	bx	lr

08009658 <_fini>:
 8009658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965a:	46c0      	nop			; (mov r8, r8)
 800965c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965e:	bc08      	pop	{r3}
 8009660:	469e      	mov	lr, r3
 8009662:	4770      	bx	lr
